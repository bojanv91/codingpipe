<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
	<title>BojanVeljanovski.com</title>
	<subtitle>I am writing self-notes that might be useful for other people as well on software development and programming in general.</subtitle>
	<link href="https://bojanveljanovski.com/feed/feed.xml" rel="self"/>
	<link href="https://bojanveljanovski.com/"/>
	<updated>2024-10-30T00:00:00Z</updated>
	<id>https://bojanveljanovski.com/</id>
	<author>
		<name>Bojan Veljanovski</name>
		<email>bojanv91+blog@gmail.com</email>
	</author>
	
	<entry>
		<title>Use Enums Over Booleans for Status Fields</title>
		<link href="https://bojanveljanovski.com/posts/use-enums-over-booleans/"/>
		<updated>2024-10-30T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/use-enums-over-booleans/</id>
		<content type="html">&lt;p&gt;In business applications, we often need to track the state of entities - users, orders, payments, etc. While boolean flags might seem simple, they often lead to maintenance headaches. Here&#39;s why you should consider using enums instead.&lt;/p&gt;
&lt;h2 id=&quot;1-the-meaning-of-false-is-not-always-clear&quot; tabindex=&quot;-1&quot;&gt;1: The meaning of false is not always clear &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/use-enums-over-booleans/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The meaning of false is not always clear when using Booleans for status fields.&lt;/p&gt;
&lt;p&gt;Let&#39;s see this example:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; IsActive &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What does it mean when IsActive is false? Does that mean the user has been banned? Or is the email not yet verified?
In most such situations, choosing Enum is a much better choice. Enums are more descriptive and flexible.&lt;/p&gt;
&lt;p&gt;Let&#39;s refactor:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserStatus&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Active&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  PendingVerification
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;UserStatus&lt;/span&gt; Status &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you know that the user can be in active or pending verification state. This approach makes the meaning of the user&#39;s states obvious.&lt;/p&gt;
&lt;h2 id=&quot;2-expanding-with-a-third-option-is-a-very-challenging-refactor&quot; tabindex=&quot;-1&quot;&gt;2: Expanding with a third option is a very challenging refactor &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/use-enums-over-booleans/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Adding a third state like “Banned,” using Booleans can get problematic. Let&#39;s see this example:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; IsActive &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// from the original example&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; IsBanned &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// newly added state for handling banned users&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach creates four possible combinations, but only two are valid. Managing these relationships can become complicated very quickly. Can an active user be banned? What happens then - what field takes precedence?&lt;/p&gt;
&lt;p&gt;Additionally, what about existing data? We need to change the DB schema and migrate a lot of data to the new schema, which may create downtime or technical hurdles, especially at scale.&lt;/p&gt;
&lt;p&gt;With Enums, adding a new state is simple:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UserStatus&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Active&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  PendingVerification&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  Banned  &lt;span class=&quot;token comment&quot;&gt;// new state&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;rules-of-thumb&quot; tabindex=&quot;-1&quot;&gt;Rules of thumb &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/use-enums-over-booleans/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here are some rules of thumb that I use:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with an enum if there’s any chance you’ll need more than two states in the future.&lt;/li&gt;
&lt;li&gt;Use boolean flags only for clear yes/no scenarios that are unlikely to change.&lt;/li&gt;
&lt;li&gt;Before adding a boolean flag, ask yourself: “Could this need more states down the road?”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using enums over booleans early for potentially expandable status fields ensures easier maintenance and clearer code in the long run. I won&#39;t consider it as over-engineering.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Validating ProblemDetails Error Responses in ASP.NET Core API Integration Tests</title>
		<link href="https://bojanveljanovski.com/posts/validating-problemdetails-in-aspnetcore-integration-tests/"/>
		<updated>2024-08-10T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/validating-problemdetails-in-aspnetcore-integration-tests/</id>
		<content type="html">&lt;p&gt;This post describes how to write xUnit integration tests for an ASP.NET Core API project that uses the &lt;strong&gt;ProblemDetails&lt;/strong&gt; error response format.&lt;/p&gt;
&lt;p&gt;To read more on &lt;strong&gt;ProblemDetails&lt;/strong&gt;, check &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc9457&quot;&gt;RFC9457&lt;/a&gt; and &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-8.0#problem-details&quot;&gt;ProblemDetails in ASP.NET Core&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, ensure you have the necessary NuGet packages installed in your test project. You can install them using the following .NET CLI commands in the command line:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; package Microsoft.AspNetCore.Mvc.Testing
dotnet &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; package xunit
dotnet &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; package Shouldly
dotnet &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; package Flurl.Http&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, implement the test fixture that starts the API project in memory within the integration tests:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AspNetCore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mvc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Testing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Flurl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;ContosoUniversity&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebApi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;ContosoUniversity&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegrationTests&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ApiTestFixture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;WebApplicationFactory&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Program&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IAsyncLifetime&lt;/span&gt;&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FlurlClient&lt;/span&gt; _client&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ApiTestFixture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      _client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;FlurlClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;FlurlClient&lt;/span&gt; Client &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; _client&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;InitializeAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Perform any initialization here if needed&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CompletedTask&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DisposeAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      _client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DisposeAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code uses &lt;strong&gt;WebApplicationFactory&amp;lt;ContosoUniversity.WebApi.Program&amp;gt;&lt;/strong&gt; to start the API in-memory for testing.&lt;/p&gt;
&lt;p&gt;Next, create a base class for your test classes that will configure the &lt;strong&gt;Flurl.Http&lt;/strong&gt; client:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Flurl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;ContosoUniversity&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegrationTests&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BaseIntegrationTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IClassFixture&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ApiTestFixture&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FlurlClient&lt;/span&gt; Client&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; BaseUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://localhost/api&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;IntegrationTestBase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiTestFixture&lt;/span&gt; fixture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      Client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fixture&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Client&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;IFlurlRequest&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BaseUrl &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;BaseIntegrationTest&lt;/strong&gt; class provides common functionality and configuration for all API test classes.&lt;/p&gt;
&lt;p&gt;Now, write the test cases for managing students data:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Flurl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Http&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AspNetCore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mvc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Shouldly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Net&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;ContosoUniversity&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IntegrationTests&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ApiTests&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StudentTests&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiTestFixture&lt;/span&gt; fixture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BaseIntegrationTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fixture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Fact&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Create_student_with_valid_input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Arrange&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; studentData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; 
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        FirstName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        LastName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Doe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        EnrollmentDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// Act&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/students&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PostJsonAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;studentData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;
      response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; HttpStatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Fact&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Create_student_fails_when_first_name_is_not_provided&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Arrange&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; studentWithEmptyFirstName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; 
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        FirstName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        LastName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        EnrollmentDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// Act`&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; exception &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Should&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ThrowAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;FlurlHttpException&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/students&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PostJsonAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;studentWithEmptyFirstName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;
      exception&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; HttpStatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BadRequest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; errorResponse &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; exception&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetResponseJsonAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ValidationProblemDetails&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      errorResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldNotBeNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      errorResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;HttpStatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BadRequest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      errorResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;One or more validation errors occurred.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      errorResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Errors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldContainKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;FirstName&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      errorResponse&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Errors&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;FirstName&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldContain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;The FirstName field is required.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Fact&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Create_student_fails_with_submited_reserved_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Arrange&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; studentWithReservedName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; 
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        FirstName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;James&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        LastName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bond&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        EnrollmentDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// Act&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; exception &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Should&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ThrowAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;FlurlHttpException&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/students&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PostJsonAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;studentWithReservedName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;
      exception&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; HttpStatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BadRequest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; problemDetails &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; exception&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetResponseJsonAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ValidationProblemDetails&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      problemDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldNotBeNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      problemDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;HttpStatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BadRequest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      problemDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Cannot create a student named James Bond because it&#39;s a reserved name.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Fact&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Create_student_fails_when_EnrollmentDate_is_too_far_in_the_past&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Arrange&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; tooOldDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddYears&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 3 years ago&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; studentWithTooOldEnrollmentDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; 
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        FirstName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        LastName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Doe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        EnrollmentDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tooOldDate
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// Act&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; exception &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Should&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ThrowAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;FlurlHttpException&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/students&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;PostJsonAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;studentWithTooOldEnrollmentDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token comment&quot;&gt;// Assert&lt;/span&gt;
      exception&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; HttpStatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BadRequest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; problemDetails &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; exception&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetResponseJsonAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ValidationProblemDetails&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      problemDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldNotBeNull&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      problemDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;HttpStatusCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BadRequest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      problemDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;One or more validation errors occurred.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      problemDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Errors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldContainKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;EnrollmentDate&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      problemDetails&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Errors&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;EnrollmentDate&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ShouldContain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Enrollment date cannot be more than 500 days in the past.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These tests check not only the status code but also the structure of the ProblemDetails error response where applicable.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>SSH Command Snippets (Windows)</title>
		<link href="https://bojanveljanovski.com/posts/ssh-windows-snippets/"/>
		<updated>2024-03-31T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/ssh-windows-snippets/</id>
		<content type="html">&lt;p&gt;Windows 10 includes an OpenSSH client b default. You can use it directly from the PowerShell or command prompt terminal.&lt;/p&gt;
&lt;h2 id=&quot;connecting-to-a-linux-server&quot; tabindex=&quot;-1&quot;&gt;Connecting to a Linux server &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/ssh-windows-snippets/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Open a terminal and run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh username@12.34.56.78
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace &lt;code&gt;username&lt;/code&gt; with your Linux server username and &lt;code&gt;12.34.56.78&lt;/code&gt; with the server’s IP address.
The first time you connect, you’ll be prompted to accept the host key. After that, enter your password to log in.
To log out, run the &lt;code&gt;exit&lt;/code&gt; command or press &lt;code&gt;Ctrl+D&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If your Linux server has a different SSH port, let&#39;s say 10322, use the &lt;code&gt;-p&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh username@12.34.56.78 -p 10322
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;downloading-uploading-files-between-your-windows-client-and-a-linux-server&quot; tabindex=&quot;-1&quot;&gt;Downloading/uploading files between your Windows client and a Linux server &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/ssh-windows-snippets/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Use &lt;a href=&quot;https://winscp.net/eng/download.php&quot;&gt;WinSCP&lt;/a&gt; for that.&lt;/p&gt;
&lt;h2 id=&quot;tools&quot; tabindex=&quot;-1&quot;&gt;Tools &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/ssh-windows-snippets/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.putty.org/&quot;&gt;PuTTY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://winscp.net/eng/download.php&quot;&gt;WinSCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.puttygen.com/&quot;&gt;PuTTYgen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;additional-resources&quot; tabindex=&quot;-1&quot;&gt;Additional Resources &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/ssh-windows-snippets/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui&lt;/li&gt;
&lt;li&gt;https://docs.bitnami.com/aws/faq/get-started/access-ssh-tunnel/&lt;/li&gt;
&lt;li&gt;https://docs.vultr.com/port-forwarding-and-proxying-using-openssh&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>RabbitMQ Command Snippets</title>
		<link href="https://bojanveljanovski.com/posts/rabbitmq-cheatsheet/"/>
		<updated>2024-02-29T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/rabbitmq-cheatsheet/</id>
		<content type="html">&lt;h2 id=&quot;installing-rabbitmq-in-windows-using-chocolatey&quot; tabindex=&quot;-1&quot;&gt;Installing RabbitMQ in Windows using Chocolatey &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/rabbitmq-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Start PowerShell as Administrator and run this command, which installs RabbitMQ including the management plugin at port 15672:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;choco install rabbitmq &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;version 3&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;12&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;If you have issues using the RabbitMQ CLI, please refer to the &amp;quot;Troubleshooting common issues&amp;quot; section of this post.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;using-rabbitmqctl&quot; tabindex=&quot;-1&quot;&gt;Using rabbitmqctl &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/rabbitmq-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Enable the management plugin:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;rabbitmq-plugins enable rabbitmq_management&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create user as administrator with permissions to all virtual hosts:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Create new user&lt;/span&gt;
rabbitmqctl add_user username password123

&lt;span class=&quot;token comment&quot;&gt;# Make user an administrator&lt;/span&gt;
rabbitmqctl set_user_tags username administrator

&lt;span class=&quot;token comment&quot;&gt;# Grant permissions for all vhosts&lt;/span&gt;
rabbitmqctl set_permissions &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;p &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; username &lt;span class=&quot;token string&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.*&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List users:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;rabbitmqctl list_users&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Grants permissions for a user in a virtual host:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;rabbitmqctl set_permissions &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;p &lt;span class=&quot;token string&quot;&gt;&quot;custom-vhost&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.*&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Revoke permissions of a user in a virtual host:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;rabbitmqctl clear_permissions &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;p &lt;span class=&quot;token string&quot;&gt;&quot;custom-vhost&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List all virtual hosts:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;rabbitmqctl list_vhosts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a vhost:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;rabbitmqctl add_vhost &lt;span class=&quot;token string&quot;&gt;&quot;custom-vhost&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Delete a vhost:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;rabbitmqctl delete_vhost &lt;span class=&quot;token string&quot;&gt;&quot;custom-vhost&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;troubleshooting-common-issues-with-rabbitmq-cli&quot; tabindex=&quot;-1&quot;&gt;Troubleshooting common issues with RabbitMQ CLI &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/rabbitmq-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If RabbitMQ CLI tools are not accessible in your command prompt, add it to PATH and refresh the session:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# First, check if rabbitmq CLI tools are accessible&lt;/span&gt;
rabbitmqctl version

&lt;span class=&quot;token comment&quot;&gt;# If rabbitmqctl is not found, then add it to PATH and refresh the session&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Set-PathVariable&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token namespace&quot;&gt;[string]&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$AddPath&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Test-Path&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$AddPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$regexAddPath&lt;/span&gt; = &lt;span class=&quot;token namespace&quot;&gt;[regex]&lt;/span&gt;::Escape&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$AddPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$arrPath&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:Path &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;split &lt;span class=&quot;token string&quot;&gt;&#39;;&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Where-Object&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-notMatch&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;^&lt;span class=&quot;token variable&quot;&gt;$regexAddPath&lt;/span&gt;&#92;&#92;?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;$envPathToSet&lt;/span&gt; = &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$arrPath&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$AddPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-join&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;;&#39;&lt;/span&gt;
		&lt;span class=&quot;token namespace&quot;&gt;[Environment]&lt;/span&gt;::SetEnvironmentVariable&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Path&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$envPathToSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Machine&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;Throw&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&#39;&lt;span class=&quot;token variable&quot;&gt;$AddPath&lt;/span&gt;&#39; is not a valid path.&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Set-PathVariable&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;AddPath &lt;span class=&quot;token string&quot;&gt;&quot;C:&#92;Program Files&#92;RabbitMQ Server&#92;rabbitmq_server-3.12.10&#92;sbin&quot;&lt;/span&gt;

refreshenv

&lt;span class=&quot;token comment&quot;&gt;# Now this should work&lt;/span&gt;
rabbitmqctl version&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fix the RabbitMQ Erland cookie mismatch (https://www.rabbitmq.com/cli.html#erlang-cookie):&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Copy-Item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path C:&#92;Windows&#92;System32&#92;config&#92;systemprofile&#92;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;erlang&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cookie &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Destination C:&#92;Users&#92;&lt;span class=&quot;token variable&quot;&gt;$Env&lt;/span&gt;:UserName &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;force&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Troubleshooting commands:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;rabbitmqctl report
rabbitmqctl status&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test RabbitMQ aliveness with the default local user &#39;guest/guest&#39;:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;iwr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Uri &lt;span class=&quot;token string&quot;&gt;&#39;http://localhost:15672/api/aliveness-test/%2F&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Headers @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Authorization = &lt;span class=&quot;token string&quot;&gt;&quot;Basic &quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[System.Convert]&lt;/span&gt;::ToBase64String&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;[System.Text.Encoding]&lt;/span&gt;::ASCII&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;GetBytes&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;guest:guest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;UseBasicParsing&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;additional-resources&quot; tabindex=&quot;-1&quot;&gt;Additional Resources &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/rabbitmq-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://www.rabbitmq.com/docs/cli&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>PostgreSQL Query and Command Snippets</title>
		<link href="https://bojanveljanovski.com/posts/postgresql-cheatsheet/"/>
		<updated>2024-02-29T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/postgresql-cheatsheet/</id>
		<content type="html">&lt;p&gt;Set the PostgreSQL environment variables in your PowerShell session, so you won&#39;t need to add them to every single CLI command in that same session:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Export PostgreSQL variables&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:PGHOST = &lt;span class=&quot;token string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:PGPORT = 5432
&lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:PGUSER = &lt;span class=&quot;token string&quot;&gt;&quot;postgres&quot;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:PGPASSWORD = &lt;span class=&quot;token string&quot;&gt;&quot;postgres&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# So now, you won&#39;t need to add this part in the commands:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# --host localhost --port 5432 --username &quot;postgres&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;backup-command&quot; tabindex=&quot;-1&quot;&gt;Backup command &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/postgresql-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;pg_dump &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;format custom &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;no-owner &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;no-privileges &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;no-acl &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;host localhost &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;port 5432 &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;username &lt;span class=&quot;token string&quot;&gt;&quot;postgres&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;dbname mydb &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;file &lt;span class=&quot;token string&quot;&gt;&quot;C:/backups/mydb.backup&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;restore-command&quot; tabindex=&quot;-1&quot;&gt;Restore command &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/postgresql-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Step 1: Create the database if it doesn&#39;t exist&lt;/span&gt;
psql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;host localhost &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;port 5432 &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;username &lt;span class=&quot;token string&quot;&gt;&quot;postgres&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;dbname postgres &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;c &lt;span class=&quot;token string&quot;&gt;&quot;CREATE DATABASE mydb WITH OWNER postgres ENCODING &#39;UTF8&#39;;&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Step 2: Drop the public schema in the target database&lt;/span&gt;
psql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;host localhost &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;port 5432 &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;username &lt;span class=&quot;token string&quot;&gt;&quot;postgres&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;dbname mydb &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;c &lt;span class=&quot;token string&quot;&gt;&quot;DROP SCHEMA IF EXISTS public CASCADE;&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Step 3: Restore the backup file&lt;/span&gt;
pg_restore &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;format custom &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;no-owner &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;no-privileges &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;no-acl &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;clean &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;exists &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit-on&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;single-transaction &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;host localhost &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;port 5432 &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;username &lt;span class=&quot;token string&quot;&gt;&quot;postgres&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;dbname mydb &lt;span class=&quot;token string&quot;&gt;&quot;D:/backups/mydb-2024-09-01-1150.backup&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;other&quot; tabindex=&quot;-1&quot;&gt;Other &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/postgresql-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;List all databases&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;psql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;command &#92;l&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restore backup only in a specific schema:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;pg_restore &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;schema &lt;span class=&quot;token string&quot;&gt;&quot;schema_name_1&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;format custom &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;no-owner &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;no-privileges &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;single-transaction &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;dbname mydb &lt;span class=&quot;token string&quot;&gt;&quot;C:/backups/mydb.backup&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create user:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;psql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;command &lt;span class=&quot;token string&quot;&gt;&quot;CREATE ROLE testuser NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS PASSWORD &#39;testpsw&#39;;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List users:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;psql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;command &#92;du&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create database:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;psql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;command &lt;span class=&quot;token string&quot;&gt;&quot;CREATE DATABASE mydb;&quot;&lt;/span&gt;

psql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;command &lt;span class=&quot;token string&quot;&gt;&quot;CREATE DATABASE mydb OWNER testuser ENCODING &#39;UTF8&#39;;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create schema in database with authorization to another user&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;psql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;command &lt;span class=&quot;token string&quot;&gt;&quot;CREATE SCHEMA IF NOT EXISTS schema3 AUTHORIZATION testuser2;&quot;&lt;/span&gt; mydb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List all schemas in database:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;psql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;command &#92;dn mydb&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Iterate over all databases in PowerShell:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$databases&lt;/span&gt; = psql &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;tuples-only &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;no-align &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;command &lt;span class=&quot;token string&quot;&gt;&quot;SELECT datname FROM pg_database WHERE datistemplate = false&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Iterate over all databases&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$db&lt;/span&gt; in &lt;span class=&quot;token variable&quot;&gt;$databases&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Write-Host&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Processing database: &lt;span class=&quot;token variable&quot;&gt;$db&lt;/span&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;additional-references&quot; tabindex=&quot;-1&quot;&gt;Additional References &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/postgresql-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.postgresql.org/wiki/Operations_cheat_sheet&quot;&gt;https://wiki.postgresql.org/wiki/Operations_cheat_sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.commandprompt.com/education/postgresql-basic-psql-commands/&quot;&gt;https://www.commandprompt.com/education/postgresql-basic-psql-commands/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.postgresqltutorial.com/postgresql-cheat-sheet/&quot;&gt;https://www.postgresqltutorial.com/postgresql-cheat-sheet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://severalnines.com/blog/performance-cheat-sheet-postgresql&quot;&gt;https://severalnines.com/blog/performance-cheat-sheet-postgresql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>NPM and NVM Command Snippets</title>
		<link href="https://bojanveljanovski.com/posts/npm-nvm-cheatsheet/"/>
		<updated>2024-02-29T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/npm-nvm-cheatsheet/</id>
		<content type="html">&lt;h2 id=&quot;installing-node-js-and-npm-in-windows-via-nvm-using-chocolatey&quot; tabindex=&quot;-1&quot;&gt;Installing node.js and npm in Windows via NVM using Chocolatey &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/npm-nvm-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Start Command Prompt as Administrator and run this command:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;choco install nvm

nvm install latest  &lt;span class=&quot;token comment&quot;&gt;# or you can replace &#39;latest&#39; with a specific node.js version &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-nvm&quot; tabindex=&quot;-1&quot;&gt;Using NVM &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/npm-nvm-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Display the currently active version:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;nvm current&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install node.js in specific version or in &#39;latest&#39;:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;nvm install &amp;lt;version&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List the node.js installations you can choose in &lt;code&gt;nvm use&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;nvm list&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Switch to use the specified version:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;nvm use &amp;lt;version&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Examples: switch to use different versions:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;nvm use 21&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;6&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;2
npm install     &lt;span class=&quot;token comment&quot;&gt;# uses the 21.6.2 version&lt;/span&gt;
nvm use 18&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;16&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;0
npm install     &lt;span class=&quot;token comment&quot;&gt;# uses the 18.16.0 version&lt;/span&gt;
nvm use latest
npm install     &lt;span class=&quot;token comment&quot;&gt;# uses the latest version&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-npm&quot; tabindex=&quot;-1&quot;&gt;Using NPM &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/npm-nvm-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Install everything in project&#39;s &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List the installed versions of all dependencies in this project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;List only the outdated depedencies in this project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm outdated
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;additional-resources&quot; tabindex=&quot;-1&quot;&gt;Additional Resources &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/npm-nvm-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/coreybutler/nvm-windows&lt;/li&gt;
&lt;li&gt;https://community.chocolatey.org/packages/nvm&lt;/li&gt;
&lt;li&gt;https://github.com/nvm-sh/nvm&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Chocolatey Package Manager Snippets</title>
		<link href="https://bojanveljanovski.com/posts/chocolatey-cheatsheet/"/>
		<updated>2024-02-29T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/chocolatey-cheatsheet/</id>
		<content type="html">&lt;h2 id=&quot;installing-chocolatey-windows-package-manager&quot; tabindex=&quot;-1&quot;&gt;Installing Chocolatey Windows Package Manager &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/chocolatey-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Start PowerShell as Administrator and run this command:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Set-ExecutionPolicy&lt;/span&gt; Bypass &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Scope &lt;span class=&quot;token keyword&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[System.Net.ServicePointManager]&lt;/span&gt;::SecurityProtocol = &lt;span class=&quot;token namespace&quot;&gt;[System.Net.ServicePointManager]&lt;/span&gt;::SecurityProtocol &lt;span class=&quot;token operator&quot;&gt;-bor&lt;/span&gt; 3072&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;iex&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebClient&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DownloadString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://community.chocolatey.org/install.powershell&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

choco feature enable &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;n=allowGlobalConfirmation

&lt;span class=&quot;token comment&quot;&gt;# Make `refreshenv` available right away, by defining the $env:ChocolateyInstall&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# variable and importing the Chocolatey profile module.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# Note: Using `. $PROFILE` instead *may* work, but isn&#39;t guaranteed to.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# See: https://stackoverflow.com/questions/46758437/how-to-refresh-the-environment-of-a-powershell-session-after-a-chocolatey-instal&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:ChocolateyInstall = &lt;span class=&quot;token function&quot;&gt;Convert-Path&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token function&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get-Command&lt;/span&gt; choco&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;.Path)&#92;..&#92;..&quot;&lt;/span&gt;   
&lt;span class=&quot;token function&quot;&gt;Import-Module&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$env&lt;/span&gt;:ChocolateyInstall&#92;helpers&#92;chocolateyProfile.psm1&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# refreshenv is now an alias for Update-SessionEnvironment&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# (rather than invoking refreshenv.cmd, the *batch file* for use with cmd.exe)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# This should make git.exe accessible via the refreshed $env:PATH, so that it&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# can be called by name only.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# See: https://stackoverflow.com/questions/46758437/how-to-refresh-the-environment-of-a-powershell-session-after-a-chocolatey-instal&lt;/span&gt;
refreshenv&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;installing-common-chocolatey-packages&quot; tabindex=&quot;-1&quot;&gt;Installing common Chocolatey packages &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/chocolatey-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# PostgreSQL unsupervised with en_US collation:&lt;/span&gt;
choco install postgresql14 &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;params &lt;span class=&quot;token string&quot;&gt;&quot;/Password:postgres /Port:5432&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;ia &lt;span class=&quot;token string&quot;&gt;&quot;--enable-components server,commandlinetools --superaccount postgres --locale us&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# RabbitMQ (for troubleshooting, see this: https://bojanveljanovski.com/posts/rabbitmq-cheatsheet/)&lt;/span&gt;
choco install rabbitmq

&lt;span class=&quot;token comment&quot;&gt;# AWS CLI (for usage, see this: https://bojanveljanovski.com/posts/aws-cli-cheatsheet/)&lt;/span&gt;
choco install awscli

&lt;span class=&quot;token comment&quot;&gt;# Node Version Manager for Windows (for usage, see this: https://bojanveljanovski.com/posts/npm-nvm-cheatsheet/)&lt;/span&gt;
choco install nvm             

&lt;span class=&quot;token comment&quot;&gt;# Let&#39;s Encrypt windows tool&lt;/span&gt;
choco install win-acme

&lt;span class=&quot;token comment&quot;&gt;# IIS URL Rewrite extension&lt;/span&gt;
choco install urlrewrite      

&lt;span class=&quot;token comment&quot;&gt;# .NET Core for Windows Hostinbg - various versions&lt;/span&gt;
choco install dotnetcore-windowshosting &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;version=2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;2
choco install dotnet-6&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;0-windowshosting
choco install dotnet-8&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;0-aspnetruntime
choco install dotnet-8&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;0-runtime

&lt;span class=&quot;token comment&quot;&gt;# .NET Full Framework&lt;/span&gt;
choco install netfx-4&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;8

&lt;span class=&quot;token comment&quot;&gt;# Database management tool&lt;/span&gt;
choco install dbeaver        

&lt;span class=&quot;token comment&quot;&gt;# Notepad++&lt;/span&gt;
choco install notepadplusplus&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>AWS CLI Command Snippets</title>
		<link href="https://bojanveljanovski.com/posts/aws-cli-cheatsheet/"/>
		<updated>2024-02-29T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/aws-cli-cheatsheet/</id>
		<content type="html">&lt;h2 id=&quot;installing-aws-cli-in-windows-using-chocolatey&quot; tabindex=&quot;-1&quot;&gt;Installing AWS CLI in Windows using Chocolatey &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/aws-cli-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Start Command Prompt as Administrator and run this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;choco install awscli
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-aws-cli&quot; tabindex=&quot;-1&quot;&gt;Using AWS CLI &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/aws-cli-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always use profiles, and leave the default profile not configured in order to prevent mistakes.&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Create profiles&lt;/span&gt;
aws configure &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;profile profilename

&lt;span class=&quot;token comment&quot;&gt;# TODO: wip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;using-aws-s3-cli-to-upload-files-to-backblaze-b2-storage&quot; tabindex=&quot;-1&quot;&gt;Using AWS S3 CLI to upload files to Backblaze B2 storage &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/aws-cli-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Prerequisites you need to have (&lt;a href=&quot;https://www.backblaze.com/docs/cloud-storage-use-the-aws-cli-with-backblaze-b2&quot;&gt;see here more&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Backblaze Key ID&lt;/li&gt;
&lt;li&gt;Backblaze App Key&lt;/li&gt;
&lt;li&gt;Backblaze S3 endpoint URL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Configure the &lt;code&gt;backblaze&lt;/code&gt; profile like this:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$FolderPathToBackup&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$Config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FolderPathToBackup
&lt;span class=&quot;token variable&quot;&gt;$BackblazeBucketName&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$Config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BackblazeBucketName
&lt;span class=&quot;token variable&quot;&gt;$BackblazeS3EndpointUrl&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$Config&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BackblazeS3EndpointUrl

&lt;span class=&quot;token comment&quot;&gt;# Configure AWS CLI with Backblaze&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$AWS_ACCESS_KEY_ID&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;BackblazeKeyID&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$AWS_SECRET_ACCESS_KEY&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;BackblazeAppKey&gt;&quot;&lt;/span&gt;

aws configure &lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt; aws_access_key_id &lt;span class=&quot;token variable&quot;&gt;$AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;profile backblaze&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; `
    aws configure &lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt; aws_secret_access_key &lt;span class=&quot;token variable&quot;&gt;$AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;profile backblaze&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test the integration:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;aws s3 &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;endpoint-url=&lt;span class=&quot;token variable&quot;&gt;$BackblazeS3EndpointUrl&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;profile backblaze&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upload the file to the S3-compatible bucket in Backblaze B2:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;aws s3 &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;C:/path/to/backup/&quot;&lt;/span&gt; s3:&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;custom-bucket-name-in-backblaze/ &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;recursive &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;profile backblaze &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;endpoint-url=&lt;span class=&quot;token variable&quot;&gt;$BackblazeS3EndpointUrl&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;additional-resources&quot; tabindex=&quot;-1&quot;&gt;Additional Resources &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/aws-cli-cheatsheet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://aws.amazon.com/cli/&lt;/li&gt;
&lt;li&gt;https://www.backblaze.com/docs/cloud-storage-use-the-aws-cli-with-backblaze-b2&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Problem-Solving Guide for Developers</title>
		<link href="https://bojanveljanovski.com/posts/problem-solving-guide-for-developers/"/>
		<updated>2024-02-11T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/problem-solving-guide-for-developers/</id>
		<content type="html">&lt;p&gt;The most common mistake developers make when solving problems is immediately starting with writing code for a solution that is not properly thought out for a problem that is not clearly understood.&lt;/p&gt;
&lt;p&gt;There are countless ways how to approach problem-solving. In this post, I describe one approach with a couple of tips for software developers.&lt;/p&gt;
&lt;p&gt;The process is made of four steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Analyze&lt;/strong&gt; - Understand the problem&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plan&lt;/strong&gt; - Determine how to resolve the problem&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implement&lt;/strong&gt; and test your solution incrementally&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review&lt;/strong&gt; and refine your solution&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;step-1-analyze-understand-the-problem&quot; tabindex=&quot;-1&quot;&gt;Step 1: Analyze - Understand the problem &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/problem-solving-guide-for-developers/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;General tips:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define the problem clearly. Sometimes, you need to rewrite the problem statement so you can better understand it.&lt;/li&gt;
&lt;li&gt;If the problem is too complex or too large, break it down into smaller, more manageable subproblems.&lt;/li&gt;
&lt;li&gt;Identify possible causes of the problem, and focus on finding the root cause. You can use techniques such as the 5-Whys, flowcharts, and hypothesis testing.&lt;/li&gt;
&lt;li&gt;Ask questions and clarify assumptions to avoid wasting time on irrelevant or incorrect solutions.&lt;/li&gt;
&lt;li&gt;Validate your thinking by describing your understanding with your team. Seek other perspectives.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the problem is a bug caused by your code, try to reproduce it locally and in other environments as well. Is the bug consistently happening everywhere, or is it tied to a specific environment with a specific state of the database?&lt;/p&gt;
&lt;p&gt;If it&#39;s a bug caused by the usage of a third-party service or a library (e.g., Stripe, SendGrid, RabbitMQ, EntityFramework, etc.), do research using the official documentation, discussion/support forum or the GitHub repository of the service/library. Also, you can research on the web or on chat AI tools (e.g., Bing Copilot) by using the specific error message or code.&lt;/p&gt;
&lt;p&gt;And if it&#39;s a new feature request, open and read mindfully any related documents, specs, attachments, discussions, or comments for the given feature request. Then, explore the codebase in the area where the feature is being requested. Make sure you get familiar with the code, especially if it&#39;s unknown to you. This will help you understand the problem better and ask better questions.&lt;/p&gt;
&lt;p&gt;Some problems require the majority of the problem-solving time spent on analysis, and others less so. Whatever the case, make sure you timebox this activity and avoid getting into analysis paralysis.&lt;/p&gt;
&lt;h2 id=&quot;step-2-plan-determine-how-to-resolve-the-problem&quot; tabindex=&quot;-1&quot;&gt;Step 2: Plan - Determine how to resolve the problem &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/problem-solving-guide-for-developers/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Brainstorm and generate possible solutions. Involve your team in the process.&lt;/li&gt;
&lt;li&gt;Think about the possible solutions, their pros and cons, risks, and trade-offs. Include them in your planning and design documents. Also, try to specify short-term and long-term solution options as well.&lt;/li&gt;
&lt;li&gt;Evaluate and select the most suitable solution that would solve the problem. Try to think pragmatically, taking into account the greater business context (schedule, experience, team capacity, impact, cost, urgency, etc.).&lt;/li&gt;
&lt;li&gt;Remember that any chosen solution has trade-offs. Be aware of them and communicate them clearly with the rest of the team (ideally, this will be part of the technical design document).&lt;/li&gt;
&lt;li&gt;Design and create an action plan for the selected solution approach. Use techniques like pseudocode, prototypes, technical design documents, flowcharts, and sequence diagrams to plan and design your solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;step-3-implement-and-test-your-solution-incrementally&quot; tabindex=&quot;-1&quot;&gt;Step 3: Implement and test your solution incrementally &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/problem-solving-guide-for-developers/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Execute the action plan and monitor the progress. Communicate and collaborate with the team and adjust the plan as needed.&lt;/li&gt;
&lt;li&gt;Start with the simplest or most important subproblem and write working code.&lt;/li&gt;
&lt;li&gt;Keep it small, keep it testable.&lt;/li&gt;
&lt;li&gt;Make changes in code incrementally until the entire problem is solved.&lt;/li&gt;
&lt;li&gt;Test your code in each iteration.&lt;/li&gt;
&lt;li&gt;Use debugging tools, logging, and unit/integration testing to find and fix errors in your implementation before anyone from QA or end-users finds them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;step-4-review-and-refine-your-solution&quot; tabindex=&quot;-1&quot;&gt;Step 4: Review and refine your solution &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/problem-solving-guide-for-developers/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ensure your solution solves the problem.&lt;/li&gt;
&lt;li&gt;Review your code in the same way that others will review it and make any necessary tweaks. Ensure you followed the agreed coding conventions and best practices.&lt;/li&gt;
&lt;li&gt;Refactor your code for readability, security, and performance.&lt;/li&gt;
&lt;li&gt;Be mindful and pragmatic when choosing what to optimize and how much time and energy you&#39;ll spend. Optimize &amp;quot;just enough&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>What to Log in Applications?</title>
		<link href="https://bojanveljanovski.com/posts/what-to-log/"/>
		<updated>2024-01-07T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/what-to-log/</id>
		<content type="html">&lt;p&gt;Logging is a critical aspect of application development, but knowing exactly what to log can make the difference between a debugging nightmare and a smooth troubleshooting process.
Let&#39;s start by examining the key types of information you should consider logging in your applications&lt;/p&gt;
&lt;p&gt;You could log:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Important and useful information for developers, QAs, or support&lt;/li&gt;
&lt;li&gt;Unhandled exceptions&lt;/li&gt;
&lt;li&gt;System changes (startup, shutdown, restart, crash)&lt;/li&gt;
&lt;li&gt;Resource issues (disk space to be full, memory exhausted)&lt;/li&gt;
&lt;li&gt;Network connections to external services (failure, success)&lt;/li&gt;
&lt;li&gt;Critical changes (application, data)&lt;/li&gt;
&lt;li&gt;Critical workflows (e.g. booking process, new customer sign-up process)&lt;/li&gt;
&lt;li&gt;Auth and access&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-properties-to-log&quot; tabindex=&quot;-1&quot;&gt;What Properties to Log? &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/what-to-log/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Use the following log properties where applicable:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Timestamp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the log event&#39;s timestamp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Level&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the log level, e.g. info, debug, warning, error, fatal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;SourceContext&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the full name of the class from where the log was added (the logger name of the log entry)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the log event&#39;s message&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the full exception message and stack trace (if there is any)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RequestMethod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the HTTP request method (e.g. POST, GET, PUT, DELETE)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RequestPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the HTTP request path&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;StatusCode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the HTTP response status code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ClientIP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the request caller&#39;s IP address&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CorrelationId&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the ID for request or operation tracking across multiple services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MachineName&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the name of the machine on which the service is running&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the version of the app&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserAgent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the HTTP user agent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserId&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;the authenticated user&#39;s ID making the request&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;what-not-to-log&quot; tabindex=&quot;-1&quot;&gt;What NOT to Log? &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/what-to-log/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Always consider the security and privacy implications of the information you log, especially in production environments. Implementing proper log management and reviewing your logging practices regularly can help ensure that your logs serve their intended purpose without compromising sensitive data.&lt;/p&gt;
&lt;p&gt;Here&#39;s a list of things you should generally avoid logging:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sensitive user information, such as passwords, credit card numbers, or other personally identifiable information (PII)&lt;/li&gt;
&lt;li&gt;Authentication tokens, secrets, and API keys&lt;/li&gt;
&lt;li&gt;Full request or response payloads - log only relevant parts or use automatic tools to obfuscate sensitive data&lt;/li&gt;
&lt;li&gt;Database connection strings&lt;/li&gt;
&lt;li&gt;Excessive debug information or internal implementation details&lt;/li&gt;
&lt;li&gt;Redundant information that doesn&#39;t contribute to the diagnosis of issues or monitoring of the system&lt;/li&gt;
&lt;li&gt;Production environment secrets&lt;/li&gt;
&lt;li&gt;Customer-specific names and information&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>PowerShell Command Snippets</title>
		<link href="https://bojanveljanovski.com/posts/powershell-snippets/"/>
		<updated>2023-12-05T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/powershell-snippets/</id>
		<content type="html">&lt;p&gt;Add a Windows user and grant remote desktop access:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$Password&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Read-Host&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;AsSecureString   
&lt;span class=&quot;token comment&quot;&gt;#&amp;lt;enter your new password&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;New-LocalUser&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MyRDPUser&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Password &lt;span class=&quot;token variable&quot;&gt;$Password&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;Add-LocalGroupMember&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Remote Desktop Users&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Member &lt;span class=&quot;token string&quot;&gt;&quot;MyRDPUser&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Change RDP user password, and set account to never expire:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$Password&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Read-Host&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;AsSecureString
&lt;span class=&quot;token comment&quot;&gt;#&amp;lt;enter your new password&gt;&lt;/span&gt;

&lt;span class=&quot;token variable&quot;&gt;$UserAccount&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-LocalUser&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name &lt;span class=&quot;token string&quot;&gt;&quot;MyRDPUser&quot;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$UserAccount&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Set-LocalUser&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Password &lt;span class=&quot;token variable&quot;&gt;$Password&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;AccountNeverExpires &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;PasswordNeverExpires 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Grant admin rights to a Windows user:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Add-LocalGroupMember&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Group&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Administrators&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Member &lt;span class=&quot;token string&quot;&gt;&quot;MyNewUser&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add firewall rules - allow inbound ports:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;New-NetFirewallRule&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;DisplayName &lt;span class=&quot;token string&quot;&gt;&quot;Port 80&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Direction Inbound &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;LocalPort 80 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Protocol TCP &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Action Allow

&lt;span class=&quot;token function&quot;&gt;New-NetFirewallRule&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;DisplayName &lt;span class=&quot;token string&quot;&gt;&quot;Port 443&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Direction Inbound &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;LocalPort 443 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Protocol TCP &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Action Allow&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install IIS and dependencies:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Install-WindowsFeature&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;name Web-Server &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;IncludeManagementTools
&lt;span class=&quot;token function&quot;&gt;Install-WindowsFeature&lt;/span&gt; web-scripting-tools&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart an IIS website:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Stop-IISSite&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name &lt;span class=&quot;token string&quot;&gt;&quot;YourWebSite&quot;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Start-IISSite&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name &lt;span class=&quot;token string&quot;&gt;&quot;YourWebSite&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create/manage IIS website binding with AppPool:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Create new IIS site&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;New-IISSite&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name &lt;span class=&quot;token string&quot;&gt;&quot;mywebsite&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;BindingInformation &lt;span class=&quot;token string&quot;&gt;&quot;*:80:localhost&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;PhysicalPath &lt;span class=&quot;token string&quot;&gt;&quot;C:&#92;inetpub&#92;wwwroot&#92;mywebsite&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Add HTTPS binding&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;New-IISSiteBinding&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name &lt;span class=&quot;token string&quot;&gt;&quot;mywebsite&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;BindingInformation &lt;span class=&quot;token string&quot;&gt;&quot;*:443:localhost&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;CertificateThumbPrint &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;YOUR_CERT_THUMBPRINT&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;CertStoreLocation &lt;span class=&quot;token string&quot;&gt;&quot;Cert:&#92;LocalMachine&#92;My&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Protocol https &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;SslFlag 1

&lt;span class=&quot;token comment&quot;&gt;# Create AppPool&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;New-Item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;IIS:&#92;AppPools&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Name &lt;span class=&quot;token string&quot;&gt;&quot;mywebsite&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Type&lt;/span&gt; AppPool

&lt;span class=&quot;token comment&quot;&gt;# &quot;v2.0&quot;, &quot;v4.0&quot; and &quot;&quot; (for no managed code)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Set-ItemProperty&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;IIS:&#92;AppPools&#92;mywebsite&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;name &lt;span class=&quot;token string&quot;&gt;&quot;managedRuntimeVersion&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;value &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Set-ItemProperty&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;IIS:&#92;AppPools&#92;mywebsite&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;name &lt;span class=&quot;token string&quot;&gt;&quot;autoStart&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;value &lt;span class=&quot;token boolean&quot;&gt;$true&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Set-ItemProperty&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;IIS:&#92;AppPools&#92;mywebsite&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;name &lt;span class=&quot;token string&quot;&gt;&quot;processModel&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;value @&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;identitytype=&lt;span class=&quot;token string&quot;&gt;&quot;ApplicationPoolIdentity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Assign the application pool to a website&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Set-ItemProperty&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;IIS:&#92;Sites&#92;mywebsite&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;name &lt;span class=&quot;token string&quot;&gt;&quot;applicationPool&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;value &lt;span class=&quot;token string&quot;&gt;&quot;mywebsite&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remove app pool:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Remove-Item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Path &lt;span class=&quot;token string&quot;&gt;&quot;IIS:&#92;AppPools&#92;mywebsite&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Recurse &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ErrorAction SilentlyContinue&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Grant access to the &amp;quot;/logs&amp;quot; folder for an IIS AppPool:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This script assumes that the AppPool name has the same name as the Website name. In order for a given ASP.NET website to be able to write logs to the &amp;quot;/logs&amp;quot; folder, the AppPool needs to have access to that folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; GrantWebsiteFolderPermissions &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$websiteName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
                  
    &lt;span class=&quot;token variable&quot;&gt;$Path&lt;/span&gt; = &lt;span class=&quot;token string&quot;&gt;&quot;C:/inetpub/wwwroot/&lt;span class=&quot;token variable&quot;&gt;$websiteName&lt;/span&gt;/logs&quot;&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$Acl&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;Get-Acl&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$Path&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$Ar&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Security&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AccessControl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FileSystemAccessRule&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;IIS AppPool&#92;&lt;span class=&quot;token variable&quot;&gt;$websiteName&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FullControl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ContainerInherit,ObjectInherit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;$Acl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SetAccessRule&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$Ar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Set-Acl&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$Path&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$Acl&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

GrantWebsiteFolderPermissions &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;websiteName &lt;span class=&quot;token string&quot;&gt;&quot;mywebsite&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install Chocolatey Windows Package Manager:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Set-ExecutionPolicy&lt;/span&gt; Bypass &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Scope &lt;span class=&quot;token keyword&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Force&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;[System.Net.ServicePointManager]&lt;/span&gt;::SecurityProtocol = &lt;span class=&quot;token namespace&quot;&gt;[System.Net.ServicePointManager]&lt;/span&gt;::SecurityProtocol &lt;span class=&quot;token operator&quot;&gt;-bor&lt;/span&gt; 3072&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;iex&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebClient&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DownloadString&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://community.chocolatey.org/install.powershell&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

choco feature enable &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;n=allowGlobalConfirmation&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create scheduled tasks using Windows Task Scheduler:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$Action&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-ScheduledTaskAction&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Execute &lt;span class=&quot;token string&quot;&gt;&quot;.&#92;runBackupProcedure.bat&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;WorkingDirectory &lt;span class=&quot;token string&quot;&gt;&quot;C:&#92;YourStartInPath&quot;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$Triggers&lt;/span&gt; = @&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;      &lt;span class=&quot;token comment&quot;&gt;# Add two daily triggers at different times&lt;/span&gt;
    $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;New-ScheduledTaskTrigger&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Daily &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;At 3PM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    $&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;New-ScheduledTaskTrigger&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Daily &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;At 6AM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$Settings&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-ScheduledTaskSettingsSet&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;HistoryEnabled &lt;span class=&quot;token boolean&quot;&gt;$true&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$Principal&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-ScheduledTaskPrincipal&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;UserId &lt;span class=&quot;token string&quot;&gt;&quot;NT AUTHORITY&#92;SYSTEM&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;LogonType ServiceAccount

&lt;span class=&quot;token comment&quot;&gt;# Register the task&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Register-ScheduledTask&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Action &lt;span class=&quot;token variable&quot;&gt;$Action&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Trigger &lt;span class=&quot;token variable&quot;&gt;$Triggers&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;TaskName &lt;span class=&quot;token string&quot;&gt;&quot;BackupDatabaseToS3&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Description &lt;span class=&quot;token string&quot;&gt;&quot;Runs BackupDatabaseToS3 daily&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Settings &lt;span class=&quot;token variable&quot;&gt;$Settings&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Principal &lt;span class=&quot;token variable&quot;&gt;$Principal&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Get task info&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Get-ScheduledTask&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;TaskName &lt;span class=&quot;token string&quot;&gt;&quot;BackupDatabaseToS3&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Get-ScheduledTaskInfo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-batch&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-batch&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;:: runBackupProcedure.bat&lt;/span&gt;
&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;powershell&lt;/span&gt;.exe -ExecutionPolicy Bypass -File &lt;span class=&quot;token string&quot;&gt;&quot;.&#92;backupDatabase.ps1&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token command&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;powershell&lt;/span&gt;.exe -ExecutionPolicy Bypass -File &lt;span class=&quot;token string&quot;&gt;&quot;.&#92;uploadBackupToS3.ps1&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Serilog Setup for .NET Core Worker Service Project</title>
		<link href="https://bojanveljanovski.com/posts/configuring-serilog-in-net-core-worker-and-windows-service-applications/"/>
		<updated>2023-08-18T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/configuring-serilog-in-net-core-worker-and-windows-service-applications/</id>
		<content type="html">&lt;p&gt;In this post, we&#39;ll add and configure the &lt;em&gt;Serilog&lt;/em&gt; logger to a Windows Service app. This post assumes you&#39;ve already &lt;a href=&quot;https://bojanveljanovski.com/building-windows-service-applications-in-net-core&quot;&gt;built a Windows Service app project&lt;/a&gt; and made sure your current app directory path is fixed as described in the referenced post.&lt;/p&gt;
&lt;h2 id=&quot;add-and-configure-serilog&quot; tabindex=&quot;-1&quot;&gt;Add and configure &lt;em&gt;Serilog&lt;/em&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/configuring-serilog-in-net-core-worker-and-windows-service-applications/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; we need to install the following &lt;em&gt;Serilog&lt;/em&gt; NuGet packages into our app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Serilog&lt;/em&gt; - the main package&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Serilog.Extensions.Hosting&lt;/em&gt; - enables the use of &lt;code&gt;IHostBuilder.UseSerilog()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Serilog.Settings.Configuration&lt;/em&gt; - enables reading log configuration from &lt;em&gt;appsettings.json&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Serilog.Sinks.Console&lt;/em&gt; - enables writing to the Console&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Serilog.Sinks.File&lt;/em&gt; - enables writing to log files&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;dotnet add package Serilog
dotnet add package Serilog.Extensions.Hosting
dotnet add package Serilog.Settings.Configuration
dotnet add package Serilog.Sinks.Console
dotnet add package Serilog.Sinks.File
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, in the &lt;em&gt;Program.cs&lt;/em&gt; file we wrap the startup code in a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; block to ensure that any configuration issues will be appropriately logged:&lt;/p&gt;
&lt;pre class=&quot;language-diff-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-diff-cs&quot;&gt;using Serilog;

namespace PlaygroundWorkerService
{
&lt;span class=&quot;token unchanged language-cs&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           Directory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetCurrentDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AppDomain&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CurrentDomain&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BaseDirectory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;token unchanged language-cs&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;// The initial bootstrap logger is able to log errors during start-up.&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token comment&quot;&gt;// It&#39;s fully replaced by the logger configured in `UseSerilog()`.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted language-cs&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;            Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;LoggerConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WriteTo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateBootstrapLogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;token unchanged language-cs&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Information&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Starting up&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;token unchanged language-cs&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               &lt;span class=&quot;token class-name&quot;&gt;IHost&lt;/span&gt; host &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Host&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                   &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;services &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                       services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;AddHostedService&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Worker&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted language-cs&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseSerilog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hostingContext&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; services&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; loggerConfiguration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; loggerConfiguration
&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ReadFrom&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hostingContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Configuration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token unchanged language-cs&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                   &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseWindowsService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                   &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                   
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               host&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;token unchanged language-cs&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Information&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Stopped cleanly&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;token unchanged language-cs&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ex&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;An unhandled exception occured during bootstrapping&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CloseAndFlush&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;.UseSerilog()&lt;/code&gt; call will redirect all log events through your &lt;em&gt;Serilog&lt;/em&gt; pipeline.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next,&lt;/strong&gt; we&#39;ll configure the logger using JSON configuration strings placed in the &lt;em&gt;appsettings.json&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;Serilog&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Using&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Serilog.Sinks.Console&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Serilog.Sinks.File&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;MinimumLevel&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Information&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Override&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Microsoft&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Information&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Warning&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;WriteTo:Async&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Async&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Args&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;configure&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;File&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;Args&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;token property&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;logs/log.txt&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;token property&quot;&gt;&quot;outputTemplate&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;[{Timestamp:u} {Level:u3}] {Message:lj}{NewLine}{Exception}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;token property&quot;&gt;&quot;rollingInterval&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Day&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;token property&quot;&gt;&quot;shared&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;WriteTo&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Console&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;Args&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;outputTemplate&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;[{Timestamp:u} {Level:u3}] {Message:lj}{NewLine}{Exception}&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Enrich&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FromLogContext&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;WithMachineName&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;WithThreadId&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;Properties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;Application&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sample&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Finally,&lt;/strong&gt; we can start our application and logs will show up in the app&#39;s &lt;em&gt;/logs&lt;/em&gt; directory, as well in the Console/Terminal if you start it as a console app.&lt;/p&gt;
&lt;h2 id=&quot;use-the-serilog-logger&quot; tabindex=&quot;-1&quot;&gt;Use the &lt;em&gt;Serilog&lt;/em&gt; logger &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/configuring-serilog-in-net-core-worker-and-windows-service-applications/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is how we can use the &lt;em&gt;Serilog&lt;/em&gt; logger from our hosted service:&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Serilog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ILogger&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Serilog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ILogger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;PlaygroundWorkerService&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Worker&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;BackgroundService&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ILogger&lt;/span&gt; _logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ForContext&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Worker&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;CancellationToken&lt;/span&gt; stoppingToken&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;stoppingToken&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;IsCancellationRequested&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                _logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Information&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Worker running at: {time}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; DateTimeOffset&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Now&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Task&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stoppingToken&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;references&quot; tabindex=&quot;-1&quot;&gt;References &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/configuring-serilog-in-net-core-worker-and-windows-service-applications/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/serilog/serilog-extensions-hosting#inline-initialization&lt;/li&gt;
&lt;li&gt;https://github.com/serilog/serilog-settings-configuration&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Building .NET Core Windows Services</title>
		<link href="https://bojanveljanovski.com/posts/building-windows-service-applications-in-net-core/"/>
		<updated>2023-08-16T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/building-windows-service-applications-in-net-core/</id>
		<content type="html">&lt;p&gt;Running your console app as a Windows Service is a great way to execute long running or time-scheduled operations in the background, outside of your web endpoints handlers.&lt;/p&gt;
&lt;p&gt;In this post, we&#39;ll create a console application that also can be started as a Windows Service. Then, we&#39;ll add logging with &lt;em&gt;Serilog&lt;/em&gt; to ensure log files will be created in the correct directories.&lt;/p&gt;
&lt;h2 id=&quot;step-1-create-new-worker-service-project&quot; tabindex=&quot;-1&quot;&gt;Step 1 - Create new &amp;quot;Worker Service&amp;quot; project &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/building-windows-service-applications-in-net-core/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, create a new project in Visual Studio choosing the &amp;quot;Worker Service&amp;quot; template. I&#39;ll name my project &lt;code&gt;PlaygroundWorkerService&lt;/code&gt;. This template creates the following folders and files structure from which we can infer how to add new functionalities:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;appsettings.json
appsettings.Development.json
Program.cs
Worker.cs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Program.cs&lt;/code&gt; holds the project initialization code.
&lt;code&gt;Worker.cs&lt;/code&gt; is a sample &lt;code&gt;HostedService&lt;/code&gt; implementation.&lt;/p&gt;
&lt;p&gt;If you Ctrl+F5 start this project it will properly run as a console application in the terminal.&lt;/p&gt;
&lt;h2 id=&quot;step-2-setup-the-windows-services-hosting-extension&quot; tabindex=&quot;-1&quot;&gt;Step 2 - Setup the Windows Services hosting extension &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/building-windows-service-applications-in-net-core/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, install the &lt;em&gt;Microsoft.Extensions.Hosting.WindowsServices&lt;/em&gt; NuGet package to the project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet add package Microsoft.Extensions.Hosting.WindowsServices
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, call the &lt;code&gt;.UseWindowsService()&lt;/code&gt; extension method in &lt;code&gt;Program.cs&lt;/code&gt;, just before &lt;code&gt;.Build()&lt;/code&gt;.
&lt;strong&gt;And then,&lt;/strong&gt; set the current directory to the actual base directory of your app - a fix to the base app path for Windows Service apps.&lt;/p&gt;
&lt;pre class=&quot;language-diff-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-diff-csharp&quot;&gt;namespace PlaygroundWorkerService
{
&lt;span class=&quot;token unchanged language-csharp&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted language-csharp&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;	        Directory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetCurrentDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AppDomain&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CurrentDomain&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BaseDirectory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;token unchanged language-csharp&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           &lt;span class=&quot;token class-name&quot;&gt;IHost&lt;/span&gt; host &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Host&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;services &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;                   services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;AddHostedService&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Worker&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted language-csharp&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseWindowsService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;token unchanged language-csharp&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;               &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;token unchanged language-csharp&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;           host&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; When the app runs as a service, &lt;code&gt;.UseWindowsService()&lt;/code&gt; sets the &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.ihostenvironment.contentrootpath#microsoft-extensions-hosting-ihostenvironment-contentrootpath&quot;&gt;ContentRootPath&lt;/a&gt; to &lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/api/system.appcontext.basedirectory#system-appcontext-basedirectory&quot;&gt;AppContext.BaseDirectory&lt;/a&gt; which for a Windows Service defaults to &lt;code&gt;C:&#92;Windows&#92;system32&lt;/code&gt;. This means that any log files (or any other files) that you would expect to find in your local app folder, will appear in the system32 folder. The fix for this side effect is the following line of code which we already added above:&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;Directory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetCurrentDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AppDomain&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CurrentDomain&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BaseDirectory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Now&lt;/strong&gt;, if you Ctrl+F5 start this project it will still properly run as a console application in the terminal, but also can be started as a Windows Service and run in the background.&lt;/p&gt;
&lt;h2 id=&quot;step-3-publish-and-host-the-console-app-as-a-windows-service&quot; tabindex=&quot;-1&quot;&gt;Step 3 - Publish and host the console app as a Windows Service &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/building-windows-service-applications-in-net-core/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, publish your console app to a publish output directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet publish -r win-x64 --no-self-contained -c Release --output &amp;quot;D:&#92;win-services&#92;PlaygroundWorkerService&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, open your terminal as an administrator, navigate to your publish output directory (mine is: &lt;code&gt;D:&#92;win-services&#92;PlaygroundWorkerService&lt;/code&gt;), and run the following command to host your console app as a Windows Service:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sc create &amp;quot;PlaygroundWorkerService&amp;quot; binpath=&amp;quot;D:&#92;win-services&#92;PlaygroundWorkerService&#92;PlaygroundWorkerService.exe&amp;quot; start=&amp;quot;auto&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The terminal shows &lt;code&gt;[SC] CreateService SUCCESS&lt;/code&gt; to inform you that the Windows Service has been successfully created with autostart mode enabled (meaning - when the OS restarts, the service will start automatically on startup).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt;, start your service:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sc start &amp;quot;PlaygroundWorkerService&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;, check if your service is running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sc query &amp;quot;PlaygroundWorkerService&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last command will return the following status if the service is successfully running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SERVICE_NAME: PlaygroundWorkerService
        TYPE               : 10  WIN32_OWN_PROCESS
        STATE              : 4  RUNNING
                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)
        WIN32_EXIT_CODE    : 0  (0x0)
        SERVICE_EXIT_CODE  : 0  (0x0)
        CHECKPOINT         : 0x0
        WAIT_HINT          : 0x0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;additionally-stopping-and-deleting-a-windows-service&quot; tabindex=&quot;-1&quot;&gt;Additionally - Stopping and deleting a Windows Service &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/building-windows-service-applications-in-net-core/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you need to stop or delete your service, you can run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sc stop &amp;quot;PlaygroundWorkerService&amp;quot;

sc delete &amp;quot;PlaygroundWorkerService&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;further-reading&quot; tabindex=&quot;-1&quot;&gt;Further reading &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/building-windows-service-applications-in-net-core/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bojanveljanovski.com/2023-08-16-creating-and-deploying-a-windows-service-app-in-dotnet&quot;&gt;Adding Serilog logger to a .NET Core Windows Service app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Pseudocode-Driven Programming: Step-by-Step Example</title>
		<link href="https://bojanveljanovski.com/posts/a-step-by-step-example-in-pseudocode-driven-programming/"/>
		<updated>2023-08-13T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/a-step-by-step-example-in-pseudocode-driven-programming/</id>
		<content type="html">&lt;p&gt;Pseudocode is a plain language text that describes the steps of a computer program.&lt;/p&gt;
&lt;p&gt;Let&#39;s look at the following example. We have a program that takes user&#39;s input, parses it, then generates a QR code image from the parsed input, and finally it saves the image to the filesystem.&lt;/p&gt;
&lt;p&gt;Here is the first iteration of the pseudocode for it:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// read user&#39;s input value&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// parse the input&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// generate QR code image from the parsed input&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// save the image to filesystem&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// print the image filepath so the user can know where to look for the image&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is the final iteration of the pseudocode:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// input = read user&#39;s input value&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// parsedValue = parseInput(input)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// image = generateQrCodeImage(parsedValue)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// saveImage(image, filepath)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// print(filepath) &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of the time this is the very first step I take before I start writing computer code. I breakdown the problem into smaller chunks to get better sense of it. Then I write the solution down using pseudocode.
Note that the above pseudocode was written and rewritten a couple of times until I was satisfied with the program&#39;s workflow and the naming.&lt;/p&gt;
&lt;p&gt;From here I start writing actual code like this:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// input = read user&#39;s input value&lt;/span&gt;
Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Please enter an input value:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// parsedValue = parseInput(input)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; parsedInput &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ParseInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// image = generateQrCodeImage(parsedValue)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; image &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GenerateQrCodeImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parsedInput&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// saveImage(image, filepath)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; imageFilepath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SaveImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;C:&#92;&#92;qrcode-images&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// print(filepath) &lt;/span&gt;
Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imageFilepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, I can remove the comments:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Please enter an input value:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; parsedInput &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ParseInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; image &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GenerateQrCodeImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parsedInput&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; imageFilepath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SaveImage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;C:&#92;&#92;qrcode-images&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imageFilepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, I can write some tests for the parser like this:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mode=a;value=787878;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ParseInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a.2222787878&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mode=d;value=112233;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ParseInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;d asdf112233&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ThrowsException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ParseInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;qwex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, I can implement the remaining methods using the same approach. Sometimes the implementation is straightforward, sometimes is not. The important thing is to unblock yourself, don&#39;t rush to write actual &amp;quot;final&amp;quot; code, make a good design/flow/structure in pseudocode, then implement stuff.&lt;/p&gt;
&lt;p&gt;Rules of thumb:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First breakdown solutions in pseudocode, then in computer code&lt;/li&gt;
&lt;li&gt;Pseudocode can be written closer to a plain language or closer to a computer code&lt;/li&gt;
&lt;li&gt;Keep the pseudocode high-level, but not too generic&lt;/li&gt;
&lt;li&gt;Solve problems using an &amp;quot;outside-in&amp;quot; way - start from the main program flow (outside), and then focus on the details (inside)&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Excel Export with ClosedXML in C# and .NET Core</title>
		<link href="https://bojanveljanovski.com/posts/exporting-c-objects-to-excel-with-closedxml/"/>
		<updated>2023-08-12T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/exporting-c-objects-to-excel-with-closedxml/</id>
		<content type="html">&lt;p&gt;Used library: ClosedXML (&lt;a href=&quot;https://docs.closedxml.io&quot;&gt;docs site&lt;/a&gt;; &lt;a href=&quot;https://github.com/ClosedXML/ClosedXML&quot;&gt;github&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The simplest way to export any objects IEnumerable to Excel is by using ClosedXML&#39;s &lt;code&gt;IXLTable.InsertTable&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt; data)&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;AuthorDto&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetAuthors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; wb &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;XLWorkbook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; ws &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; wb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddWorksheet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Inserts the collection to Excel as a table with a header row.&lt;/span&gt;
ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;InsertTable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Adjust column size to contents.&lt;/span&gt;
ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AdjustToContents&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Save to local file system.&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; filename &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;Export - &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;/span&gt;&lt;span class=&quot;token format-string&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;yyyyMMddHHmmss&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.xlsx&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
wb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SaveAs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filename&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In ASP.NET you can use the following code to return a downloadable Excel file:&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// &amp;lt;-- the above code --&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
wb&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SaveAs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; content &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; contentType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; contentType&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filename&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;AuthorDto&lt;/code&gt; can be any C# class object. Here is this example&#39;s class:&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AuthorDto&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; Id &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; FirstName &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; LastName &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; ContactEmail &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is the generated Excel table:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2023-08-12-exporting-to-excel-with-closedxml-in-dotnet/img01-excel-file-sample-table.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;For further table customization check the &lt;a href=&quot;https://docs.closedxml.io/en/latest/features/tables.html&quot;&gt;tables feature&lt;/a&gt; in the official docs.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Mocking Services in ASP.NET Core Tests with ConfigureTestServices()</title>
		<link href="https://bojanveljanovski.com/posts/overriding-services-in-aspnet-core-integration-tests/"/>
		<updated>2023-08-11T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/overriding-services-in-aspnet-core-integration-tests/</id>
		<content type="html">&lt;p&gt;Let&#39;s say you have the following ASP.NET Core project.&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;PlaygroundApi&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Program&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; builder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; WebApplication&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IPaymentService&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;StripePaymentService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;MapGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IConfiguration&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; projectKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ProjectKey&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;ProjectKey is: &#39;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;projectKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It has a &lt;code&gt;IPaymentService&lt;/code&gt; scoped service injected with a &lt;code&gt;StripePaymentService&lt;/code&gt; implementation.&lt;/p&gt;
&lt;p&gt;For the needs of integration testing we want to mock the payment service, and not use the real &lt;code&gt;StripePaymentService&lt;/code&gt; implementation. To do that, we can use the &lt;code&gt;ConfigureTestServices&lt;/code&gt; method extension in the TestServer to override the &lt;code&gt;IPaymentService&lt;/code&gt; implementation with a &lt;code&gt;MockPaymentService&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AspNetCore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mvc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Testing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AspNetCore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TestHost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Extensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Extensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DependencyInjection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;PlaygroundApi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tests&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UnitTest1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebApplicationFactory&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PlaygroundApi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Program&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _webAppFactory&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UnitTest1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            _webAppFactory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;WebApplicationFactory&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PlaygroundApi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Program&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithWebHostBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;builder &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureTestServices&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;services &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;AddScoped&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IPaymentService&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;MockPaymentService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Fact&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Test_payment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; scope &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; _webAppFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateScope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; paymentService &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; scope&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ServiceProvider&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetRequiredService&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;IPaymentService&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;// Test proof that the payment service type now is the mock.&lt;/span&gt;
            Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token type-expression class-name&quot;&gt;MockPaymentService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paymentService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Custom AppSettings Configuration in ASP.NET Core Tests</title>
		<link href="https://bojanveljanovski.com/posts/custom-appsettings-configuration-in-aspnet-core-integration-tests/"/>
		<updated>2023-08-10T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/custom-appsettings-configuration-in-aspnet-core-integration-tests/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; The ASP.NET integration tests use the web application project &lt;code&gt;appsettings.json&lt;/code&gt; configuration.
When you start the web application from the integration tests using the TestServer (from the &lt;code&gt;Microsoft.AspNetCore.Mvc.Testing&lt;/code&gt; package), the web application uses the &lt;code&gt;appsettings.json&lt;/code&gt; configuration files that are placed in the web application root directory. Normally this doesn&#39;t suit us well since we need to have different configs for our integration tests for things like connection strings, storage URLs, etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Configure the ASP.NET integration tests to use the test project specific &lt;code&gt;appsettings.json&lt;/code&gt; configuration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2023-08-10-using-custom-appsettings-configuration-in-aspnet-core-integration-tests-with-testserver/testserver-appsettings-diagram.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;To do this, create &lt;code&gt;appsettings.json&lt;/code&gt; and &lt;code&gt;appsettings.Development.json&lt;/code&gt; configuration files in the integration tests project.&lt;/p&gt;
&lt;p&gt;Then, set the properties &lt;code&gt;Build Action = Content&lt;/code&gt; and &lt;code&gt;Copy to output directory = Copy if newer&lt;/code&gt; to both files.&lt;/p&gt;
&lt;p&gt;Finally, configure the &lt;code&gt;WebApplicationFactory&lt;/code&gt; to use the configuration files from the test project itself. Here is a sample code and a test case.&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;AspNetCore&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mvc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Testing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;Microsoft&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Extensions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Configuration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;PlaygroundApi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Tests&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UnitTest1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebApplicationFactory&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PlaygroundApi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Program&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; _webAppFactory&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UnitTest1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            _webAppFactory &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;WebApplicationFactory&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PlaygroundApi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Program&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WithWebHostBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;builder &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ConfigureAppConfiguration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token comment&quot;&gt;// Set the base path to the integration tests build output directory&lt;/span&gt;
                        &lt;span class=&quot;token comment&quot;&gt;// where the integration tests&#39; config files will be copied into.&lt;/span&gt;
                        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetBasePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Directory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetCurrentDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddJsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;appsettings.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                        config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddJsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;appsettings.Development.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;Fact&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Test1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; httpClient &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; _webAppFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CreateClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; httpClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetStringAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;token comment&quot;&gt;// Here the endpoint returns configuration specific result for testing purposes.&lt;/span&gt;
            Assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ProjectKey is: &#39;integrationtests_local_development&#39;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>PostgreSQL Docker Compose Setup</title>
		<link href="https://bojanveljanovski.com/posts/setting-up-postgresql-with-docker-compose/"/>
		<updated>2023-08-09T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/setting-up-postgresql-with-docker-compose/</id>
		<content type="html">&lt;p&gt;Docker is a great tool for simplifying the installation of applications and services. As well as isolating them from your machine to avoid potential conflicts with other installations. This is especially useful for development machines where you tend to have many services installed in various versions for various projects.&lt;/p&gt;
&lt;p&gt;In this post, we&#39;ll install and setup Postgres with Docker Desktop, and we&#39;ll configure data persistence in the Docker container.&lt;/p&gt;
&lt;p&gt;Prerequisite for this post is to have &lt;a href=&quot;https://www.docker.com/products/docker-desktop/&quot;&gt;Docker Desktop&lt;/a&gt; installed.&lt;/p&gt;
&lt;p&gt;First, start Docker Desktop.&lt;/p&gt;
&lt;p&gt;Next, create or choose a folder where your Docker container setup files will be stored. My folder of choice is &lt;code&gt;D:&#92;devops&#92;docker&#92;local_postgres&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, inside your chosen folder, create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file and place the following content:&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3.1&#39;&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres
    &lt;span class=&quot;token key atrule&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;15432:5432&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; always
    &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres
      &lt;span class=&quot;token key atrule&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres
      &lt;span class=&quot;token key atrule&quot;&gt;POSTGRES_DB&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; postgres
    &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; ./postgresql&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/var/lib/postgresql/data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;docker-compose.yml&lt;/code&gt; file will download and install the Postgres image, will set the DB engine with the provided environment variables, will bind the internal port &lt;code&gt;5432&lt;/code&gt; to an external port &lt;code&gt;15432&lt;/code&gt;, and finally will configure an external volume where the Postgres data files be stored and persistent outside of the container. The internal &lt;code&gt;/var/lib/postgresql/data&lt;/code&gt; folder will be mapped to our
&lt;code&gt;postgres-data&lt;/code&gt; folder on the disk (or the full path: &lt;code&gt;D:&#92;devops&#92;docker&#92;local_postgres&#92;postgres-data&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Next, open the Windows terminal in your folder and run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output will show that Docker is working correctly. You can also inspect the status of your container instance in the Docker Desktop app as well.&lt;/p&gt;
&lt;p&gt;Now you can connect to the container&#39;s Postgres database engine using your DB tool of choice (e.g. DBeaver) with the following connection info:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host: localhost
Port: 15432
Username: postgres
Password: postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stopping and restarting the docker container won&#39;t cause data loss due the presence of the volume parameter in docker-compose.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>HTTP Retry with Flurl and Polly in .NET Core</title>
		<link href="https://bojanveljanovski.com/posts/retry-failed-http-requests-in-dotnet/"/>
		<updated>2023-08-08T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/retry-failed-http-requests-in-dotnet/</id>
		<content type="html">&lt;p&gt;HTTP requests may fail to many reasons - the API server could be temporary offline, a network glitch might occur, a mid-request deploy might happen, the server may be overloaded with requests, etc.
Some failures go away if you just re-run the requests, and sometimes you&#39;ll need to wait a bit before doing that.&lt;/p&gt;
&lt;p&gt;To overcome these type of glitches you can wrap your HTTP calls with a retry policy.&lt;/p&gt;
&lt;h2 id=&quot;net-client-code-with-flurl-and-polly&quot; tabindex=&quot;-1&quot;&gt;.NET client code with Flurl and Polly &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/retry-failed-http-requests-in-dotnet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Policy
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;FlurlHttpException&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Activate only on this exception, with filter:&lt;/span&gt;
        x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StatusCode &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;      &lt;span class=&quot;token comment&quot;&gt;// on Server error&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StatusCode &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;408&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// on Request Timeout&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;StatusCode &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;429&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// on Too Many Requests&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WaitAndRetryAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;token comment&quot;&gt;// Retry maximum 4 times, &lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;                             &lt;span class=&quot;token comment&quot;&gt;// but wait a specified duration between each retry.&lt;/span&gt;
        TimeSpan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FromSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        TimeSpan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FromSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        TimeSpan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FromSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        TimeSpan&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FromSeconds&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ExecuteAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://api.example.com/todos&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetJsonAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TodosResponse&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Execute the request.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;TIP: You can abstract parts of this code to reduce the verboseness when applying policies across your projects to something like this:&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ExecuteRequestAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://api.example.com/todos&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetJsonAsync&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TodosResponse&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;references&quot; tabindex=&quot;-1&quot;&gt;References &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/retry-failed-http-requests-in-dotnet/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/App-vNext/Polly#wait-and-retry&lt;/li&gt;
&lt;li&gt;https://github.com/App-vNext/Polly/wiki/Retry&lt;/li&gt;
&lt;li&gt;https://learn.microsoft.com/en-us/azure/architecture/patterns/retry&lt;/li&gt;
&lt;li&gt;https://flurl.dev/docs/fluent-http/&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Dynamic SQL Query Building With SqlKata in .NET Core</title>
		<link href="https://bojanveljanovski.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/"/>
		<updated>2023-01-23T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/</id>
		<content type="html">&lt;p&gt;There are two common approaches to building dynamic SQL queries in C# application code. One uses string concatenation and executes the query using libraries such as &lt;a href=&quot;https://github.com/DapperLib/Dapper/blob/main/Readme.md&quot;&gt;Dapper&lt;/a&gt;. The other uses expressions-based query builder libraries such as &lt;a href=&quot;https://sqlkata.com/&quot;&gt;SqlKata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, we&#39;ll build a typical search query that can filter by any optional search parameters. Then, it&#39;ll return paginated results with a total count. We&#39;ll attach parameter-based filter conditions in the &amp;quot;where&amp;quot; clause only when valid values are passed for those parameters. We&#39;ll exclude &lt;code&gt;NULL&lt;/code&gt; or empty array parameters since those values are invalid for our filter criteria.&lt;/p&gt;
&lt;p&gt;Let&#39;s look at the typical implementations written in .NET application code.&lt;/p&gt;
&lt;h2 id=&quot;query-building-with-string-concatenation&quot; tabindex=&quot;-1&quot;&gt;Query building with string concatenation &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this example, we&#39;re building a base query from which we&#39;ll build the list and count queries. Finally, we&#39;re using Dapper to execute both queries. We use &lt;a href=&quot;https://learn.microsoft.com/en-us/aspnet/core/data/ef-mvc/complex-data-model/_static/diagram.png?view=aspnetcore-7.0&quot;&gt;ContosoUniversity&lt;/a&gt; database as a referenced database example.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This is the filter request object that the user passes to the query&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;QueryRequest&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; SearchText &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; DepartmentId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;?&lt;/span&gt;&lt;/span&gt; InstructorIds &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; SkipCount &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// for offset&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; TakeCount &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// for limit&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;QueryResponse&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;QueryCoursesStringConcat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;QueryRequest&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IDbConnection&lt;/span&gt; dbConnection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Build the base query that tries to search by all optional parameters if provided,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// or returns all results. It&#39;s used in building the list and count queries bellow.&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;@&quot;
from Course
inner join Department on Department.ID = Course.DepartmentID
left join CourseAssignment on CourseAssignment.CourseID = Course.ID
left join Instructor on Instructor.ID = CourseAssignment.InstructorID
left join Enrollment on Enrollment.CourseID = Course.ID
WHERE 1 = 1
&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SearchText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; and (Course.Title ilike @SearchText or Instructor.FullName ilike @SearchText)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DepartmentId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HasValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; and Department.ID = @DepartmentID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InstructorIds&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; and Instructor.ID = any(@InstructorIds)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Built the list query with pagination on top of the base query.&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; listQuery &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;@&quot;
select 
Course.Title as CourseTitle,
Course.Credits as CourseCredits,
Department.Name as DepartmentName,
Instructor.LastName as InstructorName &quot;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; OFFSET @SkipCount LIMIT @TakeCount&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Execute the list query using Dapper&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ResponseItem&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;listQuery&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    SearchText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SearchText&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    DepartmentID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DepartmentId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    InstructorIds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InstructorIds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    SkipCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SkipCount&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    TakeCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TakeCount
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Build the count query.&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; countQuery &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;select count(*) &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Execute the count query using Dapper&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; totalCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbConnection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ExecuteScalar&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countQuery&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    SearchText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SearchText&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    DepartmentID &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DepartmentId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    InstructorIds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InstructorIds
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;QueryResponse&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    TotalCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; totalCount
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are a couple of things we&#39;re keeping an eye on while building such queries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;making sure we&#39;re placing whitespaces in the correct places before and after concatenating the strings; it&#39;s easy to mess this up if not careful;&lt;/li&gt;
&lt;li&gt;opting in for using the &lt;code&gt;WHERE 1 = 1&lt;/code&gt; pattern to which we are attaching parameter-based filter conditions with ease, instead of using the other common alternative option with &lt;code&gt;AND (@Param is NULL or Name = @Param)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;making sure we&#39;re adding SQL parameters in the SQL query string (e.g.,&lt;code&gt;&amp;quot; and Name = @Param&amp;quot;&lt;/code&gt;), and we&#39;re not adding the parameter&#39;s values into the string with concatenation (not like this: &lt;code&gt;$&amp;quot; and Name = &#39;{request.Name}&#39;&amp;quot;&lt;/code&gt;) which opens our code to SQL injection.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;query-building-with-sqlkata&quot; tabindex=&quot;-1&quot;&gt;Query building with SqlKata &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This example builds on top of the string concatenation example - you can view it as a rewritten version of it only by using only &lt;a href=&quot;https://sqlkata.com/&quot;&gt;SqlKata&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SqlKata is an expression-based query-building library for C#. I&#39;ve used it in many projects with great success. Use cases vary, from building ad-hoc dynamic SQL queries for reports and charts, to advanced user-generated reports and dashboard builders.&lt;/p&gt;
&lt;p&gt;Let&#39;s look at the SqlKata-version of our search query.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;QueryResponse&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;QueryCoursesSqlKata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;QueryRequest&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;QueryFactory&lt;/span&gt; dbQueryFactory&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Build the base query that tries to search by all optional parameters if provided,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// or returns all results. It&#39;s used in building the list and count queries bellow.&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbQueryFactory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Course&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Department&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Department.ID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Course.DepartmentID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;LeftJoin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CourseAssignment&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CourseAssignment.CourseID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Course.ID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;LeftJoin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Instructor&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Instructor.ID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;CourseAssignment.InstructorID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;LeftJoin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Enrollment&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Enrollment.CourseID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Course.ID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SearchText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WhereLike&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Course.Title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SearchText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OrWhereLike&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Instructor.FullName&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SearchText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DepartmentId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;HasValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Department.ID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DepartmentId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InstructorIds&lt;span class=&quot;token punctuation&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WhereIn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Instructor.ID&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InstructorIds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Built and execute the list query with pagination on top of the base query.&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;Course.Title as CourseTitle&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;Course.Credits as CourseCredits&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;Department.Name as DepartmentName&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&quot;Instructor.LastName as InstructorName&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Offset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SkipCount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Limit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TakeCount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ResponseItem&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Build and execute the count query.&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; totalCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;QueryResponse&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Items &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    TotalCount &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; totalCount
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SqlKata&#39;s &lt;code&gt;Query&lt;/code&gt; instances are mutable. So, we have to remember to use &lt;code&gt;.Clone()&lt;/code&gt; before we change a query for usage in many queries built on top of the original query. Just like how we&#39;ve used it in our example above.&lt;/p&gt;
&lt;h2 id=&quot;sqlkata-usage-references&quot; tabindex=&quot;-1&quot;&gt;SqlKata usage references &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SqlKata&#39;s &lt;a href=&quot;https://sqlkata.com/docs&quot;&gt;documentation&lt;/a&gt; is rich with examples. There is also a &lt;a href=&quot;https://sqlkata.com/playground&quot;&gt;SqlKata Playground&lt;/a&gt; to quickly try out code samples and see their output for multiple database providers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Generating a SQL string from a SqlKata query&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Course&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Published&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Credits&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; compiler &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;PostgresCompiler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; sql &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; compiler&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Sql&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// returns: SELECT * FROM &quot;Course&quot; WHERE &quot;Published&quot; = @p0 AND &quot;Credits&quot; = @p1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the &lt;a href=&quot;https://sqlkata.com/docs/#compile-only-example&quot;&gt;compiler only examples&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;a href=&quot;https://sqlkata.com/docs/select#raw&quot;&gt;SelectRaw&lt;/a&gt; for accessing Postgres JSONB columns&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fullname as Fullname&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SelectRaw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;data-&gt;&#39;BillingAddress&#39;-&gt;&gt;&#39;City&#39; as BillingCity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are also similar accompanied methods: &lt;code&gt;WhereRaw&lt;/code&gt;, &lt;code&gt;FromRaw&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nested conditions in the Where clause&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;User&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Enabled&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;q &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; q&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Role&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Manager&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;OrWhere&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Role&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Member&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// SELECT * FROM &quot;User&quot; &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// WHERE &quot;Enabled&quot; = true AND (&quot;Role&quot; = &#39;Manager&#39; OR &quot;Role&quot; = &#39;Member&#39;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>How to Implement Strongly Typed Configuration in .NET Core</title>
		<link href="https://bojanveljanovski.com/posts/strongly-typed-appsettings-configuration-in-net-core-with-validation/"/>
		<updated>2023-01-08T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/strongly-typed-appsettings-configuration-in-net-core-with-validation/</id>
		<content type="html">&lt;p&gt;Create a strongly typed configuration class for &lt;strong&gt;appsettings.json&lt;/strong&gt; using &lt;strong&gt;required&lt;/strong&gt; and &lt;strong&gt;init&lt;/strong&gt; properties:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppSettings&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; required &lt;span class=&quot;token return-type class-name&quot;&gt;ConnectionStringsConfig&lt;/span&gt; ConnectionStrings &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; required &lt;span class=&quot;token return-type class-name&quot;&gt;LoggingConfig&lt;/span&gt; Logging &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ConnectionStringsConfig&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; required &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; DefaultConnection &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LoggingConfig&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; required &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; LogLevel &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Match your &lt;strong&gt;appsettings.json&lt;/strong&gt; structure:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;ConnectionStrings&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;DefaultConnection&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Server=myserver;Database=mydb;&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Logging&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;LogLevel&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Information&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Register in &lt;strong&gt;Program.cs&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;AppSettings&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Configuration&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use in services:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyService&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppSettings&lt;/span&gt; _appSettings&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MyService&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IOptions&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;AppSettings&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        _appSettings &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use in Blazor SSR Razor file:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;@inject IOptions&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;AppSettings&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Options

&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Logging&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; @Options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;LogLevel&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;benefits-of-this-approach&quot; tabindex=&quot;-1&quot;&gt;Benefits of This Approach &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/strongly-typed-appsettings-configuration-in-net-core-with-validation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This implementation provides several advantages over traditional string-based configuration access:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compile-time type checking prevents configuration key typos&lt;/li&gt;
&lt;li&gt;IntelliSense support improves developer productivity&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;required&lt;/strong&gt; modifier ensures all necessary configuration values are provided&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Init&lt;/strong&gt;-only properties prevent accidental configuration modifications&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>What is the Select N+1 Problem and How to Solve it?</title>
		<link href="https://bojanveljanovski.com/posts/select-n-plus-1-problem/"/>
		<updated>2018-06-10T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/select-n-plus-1-problem/</id>
		<content type="html">&lt;p&gt;Select N+1 is a data-access performance problem. Any code that iterates thru a collection of elements, and executes additional query for each element, has this problem. Thought, this behavior is avoidable.&lt;/p&gt;
&lt;p&gt;Let&#39;s look at this sample code:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/select-n-plus-1-problem-diagram.jpg&quot; alt=&quot;diagram&quot;&gt;&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; books &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LoadBooks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;// 1st query&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; book &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; bookReviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LoadBookReviews&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// 2nd query, called N times&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;LoadBooks()&lt;/code&gt; makes a database query to load books. Then, for each book &lt;code&gt;LoadBookReviews(book.Id)&lt;/code&gt; makes a query to load reviews for the given book. Loading books is one query, plus N additional queries for loading book reviews, results in N+1 database queries, where N is the number of books.&lt;/p&gt;
&lt;p&gt;If there are 100 loaded books, the above code will call 101 database queries, thus causing performance problems. Imagine if multiple users open the same page at the same time...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does this look in SQL?&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- 1st query&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; Book &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- 2nd query, N times&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; BookReview &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; BookId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;-- BookId = @BookId&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; BookReview &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; BookId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; BookReview &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; BookId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;solution-load-necessary-data-before-iterating-through-it&quot; tabindex=&quot;-1&quot;&gt;Solution: Load necessary data before iterating through it &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/select-n-plus-1-problem/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One solution to N+1 problem is to load all necessary data before iterating through it. This way we won&#39;t need to execute additional database queries to load child data in for-loops, since we will have that data loaded before.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; books &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LoadBooks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;token comment&quot;&gt;// 1st query&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; reviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LoadBookReviewsFor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 2nd query, called once&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; book &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; bookReviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; reviews&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookId &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;LoadBooks()&lt;/code&gt; does the same thing as before, where &lt;code&gt;LoadBookReviewsFor(..book ids..)&lt;/code&gt; queries the database to load all book reviews for a given list of books, instead for a single book.&lt;/p&gt;
&lt;p&gt;In this case, no matter how many books or reviews are there, the code will always call only 2 database queries; thus fixing the N+1 problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does this look in SQL?&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- 1st query&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; Book &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- 2nd query&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; BookReview &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; BookId &lt;span class=&quot;token operator&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;-- BookId IN @BookIds&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;example-in-entity-framework-with-navigation-properties-and-lazy-loading&quot; tabindex=&quot;-1&quot;&gt;Example in Entity Framework with navigation properties and lazy loading &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/select-n-plus-1-problem/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; books &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// 1st query&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; book &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; bookReviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Reviews&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// 2nd query, called N times via lazy loading&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good: refactor to eager loading, using the &lt;strong&gt;Include&lt;/strong&gt; feature.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; books &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Reviews&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// 1st query, batched&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; book &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; bookReviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Reviews&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// in-memory, no additional queries&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using &lt;code&gt;.Include(x =&amp;gt; x.Reviews)&lt;/code&gt; in Entity Framework (or &lt;code&gt;.Fetch(x =&amp;gt; x.Reviews)&lt;/code&gt; in NHibernate) we eagerly load related book reviews in a single database query. This approach solves the Select N+1 problem, but opens doors to loading too many objects in memory, especially when we need to load many related collections; in such cases, plain old SQL approach is preferred.&lt;/p&gt;
&lt;h2 id=&quot;example-in-entity-framework-without-navigation-properties&quot; tabindex=&quot;-1&quot;&gt;Example in Entity Framework without navigation properties &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/select-n-plus-1-problem/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; books &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// 1st query&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; book &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 2nd query, called N times explicitelly &lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; bookReviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookReviews&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookId &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good: &lt;strong&gt;load necessary data before iterating through it&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; books &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;token comment&quot;&gt;// 1st query&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; bookIds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; allReviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookReviews           &lt;span class=&quot;token comment&quot;&gt;// 2nd query&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; bookIds&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; book &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; bookReviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; allReviews&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookId &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// no additional query&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;example-in-marten-document-database&quot; tabindex=&quot;-1&quot;&gt;Example in Marten document database &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/select-n-plus-1-problem/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; books &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Book&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// 1st query&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; book &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 2nd query, called N times explicitelly &lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; bookReviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;BookReview&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookId &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good: same approach, &lt;strong&gt;load necessary data before iterating through it&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; books &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Book&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;token comment&quot;&gt;// 1st query&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; bookIds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; allReviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;BookReview&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// 2nd query&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookId&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsOneOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bookIds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;								

&lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; book &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; books&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; bookReviews &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; allReviews&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;BookId &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// no additional query&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;summary&quot; tabindex=&quot;-1&quot;&gt;Summary &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/select-n-plus-1-problem/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Select N+1 is a performance problem that can really slow down your application. The more &amp;quot;N&amp;quot; results the application has, the less performant it will be when this problem is not detected and fixed.&lt;/p&gt;
&lt;p&gt;Here we&#39;ve seen how to detect such problem and how to fix it. The common approach follows a straightforward practice: &lt;strong&gt;load necessary data before iterating through it.&lt;/strong&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to Extend Select2 with Adapters</title>
		<link href="https://bojanveljanovski.com/posts/extending-select2-with-adapters/"/>
		<updated>2017-10-24T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/extending-select2-with-adapters/</id>
		<content type="html">&lt;p&gt;Starting from version 4.0, the Select2 jQuery plugin uses the adapter pattern as a way for developers to extend its features and behavior. Having implemented very custom select-based components, I can assure you that this is very powerful and useful feature.&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, the docs about this feature do not include concrete usage examples, so it&#39;s quite difficult to get started, to understand how to use it, and how to build on top of it - especially if you haven&#39;t worked with jQuery plugins for a while. So, this article offers usage examples and describes how to use Select2 &lt;a href=&quot;https://select2.org/advanced/adapters-and-decorators&quot;&gt;adapters and decorators&lt;/a&gt; feature.&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-are-adapters-and-decorators-in-select2&quot; tabindex=&quot;-1&quot;&gt;What are adapters and decorators in Select2? &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/extending-select2-with-adapters/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Adapter, adapts interface of an existing class to another interface. For example replacing the appearance of the selection input element with icon element.&lt;/p&gt;
&lt;p&gt;Decorator, attach additional responsibilities to an object dynamically. For example adding functional checkboxes in multiple select dropdown items, or dedicated search field in multiple selection dropdown.&lt;/p&gt;
&lt;p&gt;Select2 has several built-in adapters that can be used, overridden, and modified. You can find them explained in the &lt;a href=&quot;https://select2.org/advanced/default-adapters&quot;&gt;advanced section in the docs&lt;/a&gt;, and their source code in the &lt;a href=&quot;https://github.com/select2/select2/tree/062c6c3af5f0f39794c34c0a343a3857e587cc97/src/js/select2&quot;&gt;GitHub repository&lt;/a&gt;. For example, here is how &lt;code&gt;SelectionAdapter&lt;/code&gt; is implemented (&lt;a href=&quot;https://github.com/select2/select2/blob/062c6c3af5f0f39794c34c0a343a3857e587cc97/src/js/select2/selection/single.js&quot;&gt;link to source file&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;From the internal use of the adapters in select2 source code you can actually re-use and adapt their code in your apps. This is the approach that helped me to better understand how to use this feature.&lt;/p&gt;
&lt;p&gt;You can take total control of the appearance and behavior of select2-based elements in your web apps by learning and exposing the full potential of this feature.&lt;/p&gt;
&lt;h2 id=&quot;defining-and-using-custom-adapters&quot; tabindex=&quot;-1&quot;&gt;Defining and using custom adapters &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/extending-select2-with-adapters/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A Select2 adapter is defined using an AMD module. Adapters can use other adapters or objects (to extend or decorate) by taking AMD module dependencies. Select2 automatically loads modules when the adapters are being constructed.&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;select2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CustomSelectionAdapter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;select2/utils&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;select2/selection/multiple&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;select2/selection/placeholder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;select2/selection/eventRelay&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;select2/selection/single&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Utils&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MultipleSelection&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Placeholder&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EventRelay&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; SingleSelection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Here goes the code of this custom adapter&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This piece of code defines a custom &lt;code&gt;SelectionAdapter&lt;/code&gt;. It should be executed only once. Usually it is called from application start, just after external libraries (like jQuery, Select2) are loaded, or just before it&#39;s first usage, in a lazy-execution way. For single-page applications, the lazy-execution is preferred approach.&lt;/p&gt;
&lt;p&gt;Custom adapters can be used when constructing select2 elements, by &lt;em&gt;requiring&lt;/em&gt; the AMD module in which they are defined to the select2 configuration API. Bellow is an example where the already defined custom selection adapter is used.&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;htmlElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;select2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; sampleDataAsArray&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    selectionAdapter&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;select2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CustomSelectionAdapter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, the &lt;code&gt;htmlElement&lt;/code&gt; will be transformed to a select2 element with customized &lt;em&gt;selection&lt;/em&gt; interface and behavior, as defined in &lt;code&gt;CustomSelectionAdapter&lt;/code&gt;. Besides customizing the &lt;code&gt;selectionAdapter&lt;/code&gt;, you can customize also the &lt;code&gt;resultsAdapter&lt;/code&gt;, &lt;code&gt;dataAdapter&lt;/code&gt;, &lt;code&gt;ajaxAdapter&lt;/code&gt;, &lt;code&gt;resultsAdapter&lt;/code&gt;, and &lt;code&gt;dropdownAdapter&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;example-custom-multiple-select&quot; tabindex=&quot;-1&quot;&gt;Example: Custom multiple select &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/extending-select2-with-adapters/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This example demonstrates the full power of adapters and decorators feature. It extends&lt;code&gt;SelectionAdapter&lt;/code&gt; and &lt;code&gt;DropdownAdapter&lt;/code&gt; to fulfil the goals.&lt;/p&gt;
&lt;p&gt;Default behavior of the multiple select, to be modified is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ability to search for items directly from the selection-box.&lt;/li&gt;
&lt;li&gt;Show selected items in the selection-box.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Desired new behavior:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ability to search items from a dedicated search box, shown in the dropdown (same as in single select).&lt;/li&gt;
&lt;li&gt;Show number of selected items out of the total in the selection-box. Also, show arrow icon in the selection-box.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At image bellow, the default and desired outcomes are visualized.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/extending-select2-with-adapters.png&quot; alt=&quot;Custom multiple select&quot;&gt;&lt;/p&gt;
&lt;p&gt;To make select2 do the desired behavior, two custom adapters need to be written, a &lt;code&gt;SelectionAdapter&lt;/code&gt; and a &lt;code&gt;DropdownAdapter&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Find the complete solution example on &lt;a href=&quot;https://jsfiddle.net/bojanv91/ou7ohLd1/15&quot;&gt;jsFiddle&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step 1 - create custom selection adapter&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;select2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CustomSelectionAdapter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/utils&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/selection/multiple&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/selection/placeholder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/selection/eventRelay&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/selection/single&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Utils&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MultipleSelection&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Placeholder&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EventRelay&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; SingleSelection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Decorates MultipleSelection with Placeholder&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; adapter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Utils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Decorate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MultipleSelection&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Placeholder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Decorates adapter with EventRelay - ensures events will continue to fire&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// e.g. selected, changed&lt;/span&gt;
    adapter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Utils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Decorate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;adapter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EventRelay&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    adapter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Use selection-box from SingleSelection adapter&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// This implementation overrides the default implementation&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; $selection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; SingleSelection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; $selection&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    adapter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// copy and modify SingleSelection adapter&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; $rendered &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$selection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.select2-selection__rendered&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; noItemsSelected &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; formatted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;noItemsSelected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        formatted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;placeholder&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; itemsData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          selected&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          all&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;option&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Pass selected and all items to display method&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// which calls templateSelection&lt;/span&gt;
        formatted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;itemsData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $rendered&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

      $rendered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;formatted&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      $rendered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; formatted&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; adapter&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 2 - create custom dropdown adapter&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;select2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CustomDropdownAdapter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/utils&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/dropdown&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/dropdown/attachBody&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/dropdown/attachContainer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/dropdown/search&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;select2/dropdown/minimumResultsForSearch&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Utils&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Dropdown&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AttachBody&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AttachContainer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Search&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MinimumResultsForSearch&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Decorate Dropdown with Search functionalities&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; dropdownWithSearch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Utils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Decorate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Dropdown&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    dropdownWithSearch&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Copy and modify default search render method&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; $rendered &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Dropdown&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// Add ability for a placeholder in the search box&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; placeholder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;placeholderForSearch&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; $search &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;span class=&quot;select2-search select2-search--dropdown&quot;&gt;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;input class=&quot;select2-search__field&quot; placeholder=&quot;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; placeholder &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&quot; type=&quot;search&quot;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&#39; tabindex=&quot;-1&quot; autocomplete=&quot;off&quot; autocorrect=&quot;off&quot; autocapitalize=&quot;off&quot;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&#39; spellcheck=&quot;false&quot; role=&quot;textbox&quot; /&gt;&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&#39;&amp;lt;/span&gt;&#39;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchContainer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $search&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$search &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $search&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;input&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      $rendered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; $rendered&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Decorate the dropdown+search with necessary containers&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; adapter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Utils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Decorate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dropdownWithSearch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AttachContainer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    adapter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Utils&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Decorate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;adapter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AttachBody&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; adapter&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Step 3 - use the defined adapters&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-typescript&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#multipleWithSearch&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;select2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; testData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  placeholder&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Select items&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  placeholderForSearch&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Filter items&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;		&lt;span class=&quot;token comment&quot;&gt;// additional placeholder for search box&lt;/span&gt;
  closeOnSelect&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Make selection-box similar to single select&lt;/span&gt;
  selectionAdapter&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;select2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CustomSelectionAdapter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;templateSelection&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Selected &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;selected&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; out of &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;all&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Add search box in dropdown&lt;/span&gt;
  dropdownAdapter&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;select2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;amd&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CustomDropdownAdapter&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find the complete solution example on &lt;a href=&quot;https://jsfiddle.net/bojanv91/ou7ohLd1/15&quot;&gt;jsFiddle&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot; tabindex=&quot;-1&quot;&gt;Summary &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/extending-select2-with-adapters/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This article explains how you can extend Select2 plugin by utilizing its adapters and decorators feature.&lt;/p&gt;
&lt;p&gt;To create better custom adapters, try to re-use the built-in adapters, and modify them on the go. By doing that you will learn more about select2 internals, thus your custom adapters will be much cleaner and you will have less code to debug.&lt;/p&gt;
&lt;p&gt;Finally, observe the example code on &lt;a href=&quot;https://jsfiddle.net/bojanv91/ou7ohLd1/15&quot;&gt;jsFiddle&lt;/a&gt;, modify it and see how you can further customize select2 as per your needs.&lt;/p&gt;
&lt;p&gt;NOTE: I use the select2 plugin in my Aurelia apps by wrapping common behavior in custom elements. So far, so good. It&#39;s nice that we are able to easily re-use proven components/plugins from other major platforms.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to refactor Feature Envy Code</title>
		<link href="https://bojanveljanovski.com/posts/refactoring-a-feature-envy-code/"/>
		<updated>2017-07-29T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/refactoring-a-feature-envy-code/</id>
		<content type="html">&lt;p&gt;In a design review meeting a colleague asked: &amp;quot;Why sometimes we directly manipulate dependent objects fields, and sometimes we put the manipulation logic behind methods in those objects? What are pros/cons in both approaches?&amp;quot;&lt;!--excerpt--&gt; This was a great question, because it opened a productive discussion. Checking the &lt;a href=&quot;https://blog.codinghorror.com/code-smells/&quot;&gt;code smells taxonomy&lt;/a&gt;, and analyzing the code under review deeper, we identified it belongs to the feature envy code smells category. And this is how we refactored it.&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is feature envy code?&lt;/strong&gt;
&lt;em&gt;Feature envy&lt;/em&gt; is a code smell describing when an object accesses fields of another object to execute some operation, instead of just telling the object what to do.&lt;/p&gt;
&lt;p&gt;Let&#39;s analyze the following code segment, and try to refactor it.
For better context, it addresses the requirement: &lt;em&gt;An active user can pay a pending order. For reporting purposes the order tracks when and who paid it.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;original-code-segment-simplified&quot; tabindex=&quot;-1&quot;&gt;Original code segment (simplified) &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/refactoring-a-feature-envy-code/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here you can see the original code segment greatly simplified, so it&#39;s easier to follow.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PayOrderRequest&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Guid&lt;/span&gt; OrderId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PayOrderHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;BaseCommandHandler&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PayOrderRequest&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PayOrderRequest&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; currentUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LoggedInUserId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; order &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Order&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OrderId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// checks if the order can be paid&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pending &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; UserStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Active&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token comment&quot;&gt;// pay the order, and record related information&lt;/span&gt;
            order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Completed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PaidByUserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PaidOnUtc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CoreException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; cannot pay this order.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
        Session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The core problem with this code is that it breaks encapsulation. The command handler depends too much on the &lt;code&gt;order&lt;/code&gt; internals, and forms tight coupling. The &lt;code&gt;order&lt;/code&gt; leaked it&#39;s domain logic to the command handler, thus it became anemic data-object.&lt;/p&gt;
&lt;p&gt;Besides breaking encapsulation, it also makes the paying order functionality  hard to unit test. The command handler depends on the database via the session object, and to the logged in user provider. Writing a unit test for this, means we need to write mocks for both services. If we refactor it, fixing the encapsulation, we&#39;ll see that writing unit tests will be an easier task to do. Besides, why create mocks until deemed necessary?&lt;/p&gt;
&lt;p&gt;Ultimately, the command handler should only coordinate the workflow, and the order object should only deal with the domain logic. They should not mix responsibilities between themselves. But this is not the case we have here.&lt;/p&gt;
&lt;p&gt;Our question is, can the command handler &lt;strong&gt;tell&lt;/strong&gt; the &lt;code&gt;order&lt;/code&gt; what to do, encapsulating the logic, instead of asking it for too many details? Let&#39;s find out.&lt;/p&gt;
&lt;h2 id=&quot;step-1-hold-precondition-result-in-an-inline-variable&quot; tabindex=&quot;-1&quot;&gt;Step 1 - hold precondition result in an inline variable &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/refactoring-a-feature-envy-code/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s introduce &lt;code&gt;canOrderByPaid&lt;/code&gt; boolean variable which will hold the result of the precondition for paying an order.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Original&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pending &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; UserStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Active&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  

&lt;span class=&quot;token comment&quot;&gt;// Refactored (step 1)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; canOrderByPaid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pending &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; UserStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Active&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;canOrderByPaid&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s better to create a inline variable to describe more complex condition checks, and use it in the if-condition statement, than having bloated if-condition statement with a comment above, describing what it does.&lt;/p&gt;
&lt;h2 id=&quot;step-2-encapsulate-the-precondition-in-the-order&quot; tabindex=&quot;-1&quot;&gt;Step 2 - encapsulate the precondition in the &lt;code&gt;Order&lt;/code&gt; &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/refactoring-a-feature-envy-code/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now it makes sense to encapsulate the precondition for paying an order, in the order object itself.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Original&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pending &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; UserStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Active&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  

&lt;span class=&quot;token comment&quot;&gt;// Refactored (step 1)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; canOrderByPaid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pending &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; UserStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Active&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;canOrderByPaid&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;// Refactored (step 2)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CanBePaidBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token range operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The order class:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* Code removed for clarity */&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CanBePaidBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pending &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; UserStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Active&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/* Code removed for clarity */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this change, we eliminated coupling from the command handler to the fields of order and user classes (e.g. &lt;code&gt;order.Status&lt;/code&gt;, &lt;code&gt;user.Status&lt;/code&gt;). Imagine in more complex cases, how much direct coupling will be reduced only by following good encapsulation.&lt;/p&gt;
&lt;h2 id=&quot;step-3-encapsulate-the-actual-operation&quot; tabindex=&quot;-1&quot;&gt;Step 3 - encapsulate the actual operation &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/refactoring-a-feature-envy-code/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Following the same way how we encapsulated the paying precondition, we&#39;ll encapsulate the paying operation.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Refactored (step 2)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CanBePaidBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Completed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PaidByUserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PaidOnUtc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CoreException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; cannot pay this order.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;// Refactored (step 3)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CanBePaidBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Pay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CoreException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;User &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; cannot pay this order.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The order class:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* Code removed for clarity */&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Pay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; payer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Completed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        PaidByUserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; payer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        PaidOnUtc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/* Code removed for clarity */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;step-4-encapsulate-further&quot; tabindex=&quot;-1&quot;&gt;Step 4 - encapsulate further &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/refactoring-a-feature-envy-code/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Seeing the refactoring changes in previous steps, this final refactoring change comes natural.&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Refactored (step 3)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CanBePaidBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Pay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CoreException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;User &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; cannot pay this order.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;// Refactored (step 4)&lt;/span&gt;
order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Pay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The order class:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* Code removed for clarity */&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Pay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; payer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CanBePaidBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;payer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CoreException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;User &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;payer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; cannot pay this order.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        Status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Completed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        PaidByUserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; payer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        PaidOnUtc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/* Code removed for clarity */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;the-final-refactored-code&quot; tabindex=&quot;-1&quot;&gt;The final refactored code &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/refactoring-a-feature-envy-code/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is how the final refactored code looks like. Compare it to the original one in the beginning of this session. What key difference can you identify?&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PayOrderRequest&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Guid&lt;/span&gt; OrderId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PayOrderHandler&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;BaseCommandHandler&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PayOrderRequest&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;PayOrderRequest&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; currentUser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;User&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LoggedInUserId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; order &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Order&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OrderId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Pay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentUser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        
        Session&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;order&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the &lt;code&gt;Order&lt;/code&gt; class, encapsulating the domain logic:&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Order&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;/* Code removed for clarity */&lt;/span&gt;
  
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;OrderStatus&lt;/span&gt; Status &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Guid&lt;/span&gt; PaidByUserId &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;DateTime&lt;/span&gt; PaidOnUtc &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Pay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; payer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;CanBePaidBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;payer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;CoreException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;User &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;payer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; cannot pay this order.&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Completed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PaidByUserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; payer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        order&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PaidOnUtc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; DateTime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;UtcNow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;CanBePaidBy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;User&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; OrderStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Pending &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Status &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; UserStatus&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Active&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;/* Code removed for clarity */&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see we moved the domain logic out of the command handler, and we put it to the &lt;code&gt;Order&lt;/code&gt; entity, where it belongs.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/refactoring-a-feature-envy-code/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The benefits we achieved from this refactoring session are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The command handler &lt;strong&gt;stops asking&lt;/strong&gt; for details (and internals). Now it &lt;strong&gt;tells&lt;/strong&gt; what other objects should do. Does not care about the details anymore. With this, we fulfilled the &lt;strong&gt;Tell Don&#39;t Ask Principle&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The direct &lt;strong&gt;coupling&lt;/strong&gt; from the command handler to the fields in user and order classes is &lt;strong&gt;eliminated&lt;/strong&gt;. Less coupling, more sanity.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Order&lt;/code&gt; class is not a bag of public set properties anymore. It&#39;s not anemic, it&#39;s not a data-class. Now it has cohesive responsibility, &lt;strong&gt;encapsulating the actions it can perform&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Domain logic&lt;/strong&gt; for paying &lt;strong&gt;is not leaked&lt;/strong&gt; in other classes anymore. Now it&#39;s located in the responsible class itself. So, only by looking at the &lt;code&gt;Order&lt;/code&gt; class we can understand what it can do. No need to open other related classes.&lt;/li&gt;
&lt;li&gt;Paying functionality can be easily &lt;strong&gt;unit tested&lt;/strong&gt;, without having to deal with special mocking techniques. Less mocks, better tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Rule of thumb:&lt;/strong&gt; Where ever you see a method uses fields of another class extensively to perform some action, consider moving the action&#39;s logic into &lt;em&gt;that&lt;/em&gt; class itself.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Visual Studio 2017 Tips</title>
		<link href="https://bojanveljanovski.com/posts/visual-studio-2017-notes/"/>
		<updated>2017-03-09T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/visual-studio-2017-notes/</id>
		<content type="html">&lt;p&gt;Visual Studio 2017 has shipped. In this post I highlight the top changes from my perspective and the list of all useful extensions I&#39;ve installed.&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;p&gt;For VS2015 extensions, check my &lt;a href=&quot;https://bojanveljanovski.com/2016/12/vs2016-extensions/&quot;&gt;older post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;top-5-highlights-from-my-perspective&quot; tabindex=&quot;-1&quot;&gt;Top 5 Highlights From My Perspective &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/visual-studio-2017-notes/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To see all new features and changes, check the &lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes&quot;&gt;VS2017 release notes&lt;/a&gt;. Here is my top list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#csharpvb&quot;&gt;Support for C# 7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#coding-convention-support-via-editorconfig&quot;&gt;Support for Coding Convention via EditorConfig. Finally!&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#dotnetcore&quot;&gt;Stable tools support for .NET Core and ASP.NET Core&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#debug&quot;&gt;Improved Exception Helper for Debugging&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#a-idbetternav-aimproved-code-navigation&quot;&gt;Improved Code Navigation via &amp;quot;Richer Omnibar&amp;quot;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;extensions&quot; tabindex=&quot;-1&quot;&gt;Extensions &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/visual-studio-2017-notes/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vsrefactoringessentials.com/&quot;&gt;Refactoring Essentials&lt;/a&gt;. C# analyzers and refactoring proposals.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.AddNewFile&quot;&gt;Add New File&lt;/a&gt;. Create any type of files via standard templates without touching the mouse. Mapped to Ctrl+Shift+A.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.OpenCommandLine&quot;&gt;Open Command Line&lt;/a&gt;. Opens CMD in current solution directory. Mapped to Alt+Space.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.PowerCommandsforVisualStudio&quot;&gt;PowerCommands is a set of useful extensions for the Visual Studio IDE&lt;/a&gt;. Besides the defaults, I&#39;ve turned on &amp;quot;Format document on save&amp;quot; option.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.TimeStampMargin&quot;&gt;Time Stamp Margin&lt;/a&gt;. Adds timestamps in the output dialog.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager&quot;&gt;ResXManager&lt;/a&gt;. Manage localization of all ResX-Based resources in one place. Shows all resources of a solution and let&#39;s you edit the strings and their localizations in a well-arranged data grid.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.ProjectFileTools&quot;&gt;Project File Tools&lt;/a&gt;. Provides Intellisense and other tooling for XML based project files such as .csproj and .vbproj files.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.VuejsPack-18329&quot;&gt;Vue.js Pack 2017&lt;/a&gt;. Intellisense for Vue.js.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.AureliaPack&quot;&gt;Aurelia Pack&lt;/a&gt;. A snippet pack to make you more productive working with the Aurelia JavaScript framework.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=frhagn.Typewriter&quot;&gt;Typewriter&lt;/a&gt;. Typewriter generates TypeScript files from c# code files using TypeScript Templates. This allows you to create fully typed TypeScript representations of server side API that automatically updates when you make changes to your C# code.&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Fixing ASP.NET MVC5 Razor Compilation</title>
		<link href="https://bojanveljanovski.com/posts/snippet-fix-razor-views-compilation/"/>
		<updated>2017-01-27T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/snippet-fix-razor-views-compilation/</id>
		<content type="html">&lt;p&gt;Errors in Razor Views by default are detected and displayed during runtime. In the past this has caused us issues in production where end-clients were hit by these errors instead us detecting them earlier. There is an obvious but inconvenient fix to prevent this from happening. &lt;!--excerpt--&gt;&lt;/p&gt;
&lt;h2 id=&quot;how-to-fix-the-problem&quot; tabindex=&quot;-1&quot;&gt;How to fix the problem? &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/snippet-fix-razor-views-compilation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You need to compile the razor views, so such errors can be detected during compile time instead of runtime.&lt;/p&gt;
&lt;p&gt;To do that, in &lt;code&gt;.csproj&lt;/code&gt; add following piece of code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;Project&amp;gt;
        ..
        &amp;lt;PropertyGroup&amp;gt;
            &amp;lt;MvcBuildViews&amp;gt;true&amp;lt;/MvcBuildViews&amp;gt;
            ..
        &amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&#39;ll think this is enough and ASP.NET MVC is smart to do it&#39;s job, but nope, &lt;strong&gt;it will not simply work&lt;/strong&gt;. Why? Read more &lt;a href=&quot;http://stackoverflow.com/questions/4725387/mvcbuildviews-not-working-correctly/4732019#4732019&quot;&gt;here&lt;/a&gt;.
Short story to working view compilation functionality is to add the following piece of code too in your &lt;code&gt;.csproj&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;Target Name=&amp;quot;MvcBuildViews&amp;quot; AfterTargets=&amp;quot;AfterBuild&amp;quot; Condition=&amp;quot;&#39;$(MvcBuildViews)&#39;==&#39;true&#39;&amp;quot;&amp;gt;
        &amp;lt;AspNetCompiler VirtualPath=&amp;quot;temp&amp;quot; PhysicalPath=&amp;quot;$(WebProjectOutputDir)&amp;quot; /&amp;gt;
    &amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s it. Now it works.&lt;/p&gt;
&lt;h2 id=&quot;but-it-slows-down-the-build-time&quot; tabindex=&quot;-1&quot;&gt;But it slows down the build time? &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/snippet-fix-razor-views-compilation/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Oh, just to mention that Razor Views compilation is slow process, so you might want to trigger it before making deployments or in CI (&lt;code&gt;Release&lt;/code&gt;), instead of slowing down the whole build process while you are coding (&lt;code&gt;Debug&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The target conditions are the solution:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;PropertyGroup Condition=&amp;quot;&#39;$(Configuration)|$(Platform)&#39; == &#39;Debug|AnyCPU&#39;&amp;quot;&amp;gt;
        ..
        &amp;lt;MvcBuildViews&amp;gt;false&amp;lt;/MvcBuildViews&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;
    &amp;lt;PropertyGroup Condition=&amp;quot;&#39;$(Configuration)|$(Platform)&#39; == &#39;Release|AnyCPU&#39;&amp;quot;&amp;gt;
        ..
        &amp;lt;MvcBuildViews&amp;gt;true&amp;lt;/MvcBuildViews&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Top Visual Studio 2015 Extensions I Use</title>
		<link href="https://bojanveljanovski.com/posts/vs2016-extensions/"/>
		<updated>2016-12-31T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/vs2016-extensions/</id>
		<content type="html">&lt;p&gt;Rich IDEs are a great asset to enhance productivity in writing and reading code.&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;p&gt;Visual Studio 2015 as a rich IDE helps a lot when navigating through code and files, refactoring, smart searching classes/methods/properties and much more. But still there are some useful or improved functionalities not baked in, that can be easily found as extensions.&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is the list of extensions that I use every day:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vsrefactoringessentials.com/&quot;&gt;Refactoring Essentials&lt;/a&gt; - Rich free refactoring tool for C#.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://visualstudiogallery.msdn.microsoft.com/3f820e99-6c0d-41db-aa74-a18d9623b1f3&quot;&gt;Add New File&lt;/a&gt; - The fastest and easiest way to add new files to any project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jaredpar/EasyMotion&quot;&gt;Easy Motion&lt;/a&gt; - A vim EasyMotion clone for Visual Studio. Instead of moving your hands to the arrow keys or even worse, grabbing the mouse, simple initiate an easy motion search by pressing &lt;code&gt;Shift + Control + ;&lt;/code&gt;. (&lt;em&gt;NOTE: I changed my shortcut to be bound to &lt;code&gt;Ctrl + Shift + F&lt;/code&gt; as I can trigger it only using the left hand.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=SteveDowerMSFT.IndentGuides&quot;&gt;Indent Guides &lt;/a&gt; - Adds vertical lines at each indent level. It can even add a vertical line to a certain character length (e.g. on 100 characters length so you know visually how long is your line of code).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=GolanAvraham.ConfigurationTransform&quot;&gt;Configuration Transform&lt;/a&gt; - Automatically transform web.config, app.config or any other config during the build process. Once the transformation is set, it will run on other build machines without the extension.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MatthewJohnsonMSFT.HideMainMenu&quot;&gt;Hide Main Menu&lt;/a&gt; - Automatically hides the Visual Studio main menu when not in use. To show when hidden, press &lt;code&gt;ALT&lt;/code&gt; key.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=mayerwin.RenameVisualStudioWindowTitle&quot;&gt;Rename Visual Studio Window Title &lt;/a&gt; - This lightweight extension allows changing the window title of Visual Studio to include a folder tree with a configurable distance from the solution/project file. (&lt;em&gt;NOTE: The title template I use is:&lt;code&gt;[solutionName] ([configurationName]) - [documentParentPath:2:0]&lt;/code&gt;&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.OpenCommandLine&quot;&gt;Open Command Line&lt;/a&gt; - Opens a command line at the root of the project by pressing &lt;code&gt;ALT + Space&lt;/code&gt;. Useful when you need to execute commands from CMD at the current project&#39;s directory.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager&quot;&gt;ResXManager&lt;/a&gt; - Manage localization of all ResX-Based resources in one place. Shows all resources of a solution and lets you edit the strings and their localizations in a well-arranged data grid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;NOTE: I do evaluate performance hit on Visual Studio itself before I use or recommend an extension. There are some other good extensions too that I don&#39;t use because they slow down Visual Studio a lot. Fast and responsive IDE has higher priority than new or improved functionalities on my machine :)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What extensions do &lt;em&gt;you&lt;/em&gt; use, dear reader?&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Global Day of Coderetreat 2016 Skopje Event Recap</title>
		<link href="https://bojanveljanovski.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/"/>
		<updated>2016-10-27T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;#GDCR16&lt;/code&gt; is a day for celebrating passion and software craftsmanship. This year&#39;s event in Skopje, Macedonia was a blast! Fresh ideas, new perspectives and great people is everything you need for such an event.&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;h2 id=&quot;about-the-event&quot; tabindex=&quot;-1&quot;&gt;About the event &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://globalday.coderetreat.org/&quot;&gt;Coderetreat&lt;/a&gt; is a one day event that provides developers the opportunity for skills improvement by focusing on software development and &lt;strong&gt;design fundamentals&lt;/strong&gt;. By practicing the basic principles of &lt;strong&gt;modular and object-oriented design&lt;/strong&gt;, participants can improve their ability to write code that &lt;strong&gt;minimizes the cost of change over time&lt;/strong&gt;. It aims to shrink the gap between the code we write under pressure of needing to deliver on time and the perfect code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2016-10-27-global-day-of-coderetreat-2016-haselt-macedonia/6.png&quot; alt=&quot;Global Day of Coderetreat 2016 in Skopje, Macedonia&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;hosting-and-facilitating&quot; tabindex=&quot;-1&quot;&gt;Hosting and facilitating &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having the huge enthusiasm about community work and passion in software development and coding, &lt;a href=&quot;http://www.haselt.com/&quot;&gt;HASELT&lt;/a&gt; supported this year&#39;s Coderetreat in Macedonia by providing sponsorship, logistics for organization and space where programmers were gathered. We&#39;ve had the pleasure to have with us &lt;a href=&quot;https://bojanveljanovski.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/dalibornasevic.com&quot;&gt;Dalibor Nasevic&lt;/a&gt;, who is long-time facilitator of Coderetreat events in Macedonia and helped all attendees to make the most out of the event.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2016-10-27-global-day-of-coderetreat-2016-haselt-macedonia/2.png&quot; alt=&quot;Global Day of Coderetreat 2016 in Skopje, Macedonia&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2016-10-27-global-day-of-coderetreat-2016-haselt-macedonia/3.png&quot; alt=&quot;Global Day of Coderetreat 2016 in Skopje, Macedonia&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;sessions&quot; tabindex=&quot;-1&quot;&gt;Sessions &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting early in the morning the facilitator introduced the agenda for the day. There were five sessions of pair programming. After each session, retrospective meetings were held where each pair discussed what they did. After that, participants switched pairs and prepared for the next session.&lt;/p&gt;
&lt;p&gt;The first session was intended to get the participants familiar with the problem, and introduction to &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway&#39;s Game of Life&lt;/a&gt;. In the second session, &amp;quot;Ping-pong pair programming&amp;quot;, the pairs learned the importance of communication when pairing and collaborate together to see other ways of writing code. The third session was &amp;quot;No primitives across method boundaries (input or output)&amp;quot;. In the fourth session, &amp;quot;No conditionals&amp;quot;, the pairs had to find ways of avoiding conditionals and fewer logical paths. The last session, &amp;quot;Evil pair programming&amp;quot; was designed to practice writing quality tests, where the tester tries to write good tests and the coder writes just enough code to pass tests.&lt;/p&gt;
&lt;p&gt;At the end of all sessions, the participants had the final retrospective with Dalibor. He asked the following questions, to which all participants shared their thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What, if anything, did you learn today?&lt;/li&gt;
&lt;li&gt;What, if anything, surprised you today?&lt;/li&gt;
&lt;li&gt;What, if anything, will you do differently moving forward?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2016-10-27-global-day-of-coderetreat-2016-haselt-macedonia/4.png&quot; alt=&quot;Global Day of Coderetreat 2016 in Skopje, Macedonia&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;impressions-from-the-event&quot; tabindex=&quot;-1&quot;&gt;Impressions from the event &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Being able to see so diverse thoughts about designing software was truly inspirational, and the way how people collaborated and shared their ideas was really empowering to everyone, including myself.&lt;/p&gt;
&lt;p&gt;Personally, if I have to choose only a single event that I would like to attend to, Coderetreat would be definitely &lt;em&gt;that&lt;/em&gt; one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here are impressions shared by my awesome colleagues, the driving force of the whole organization:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We had an amazing time, meeting developers willing to learn, improve and also share their knowledge with others. We hope that the participants found this event as inspirational and productive as we do.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;and also, the impressions shared by Dalibor who put his energy and enthusiasm guiding the participants during the whole day:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It was great experience for me being part of another Global Day of Coderetreat and facilitate the local event in Skopje. I am very grateful to Bojan and the rest of the HASELT team for their passion and inspirational energy in organizing and hosting the event. I&#39;m very happy for the attendees too. The ones for who the event is. The ones that chose to spend that Saturday practicing software design with other developers, work in different programming languages, share their knowledge and improve their craft together. Their passion, their positive energy and their enthusiasm. It&#39;s great to see how inspirational the event can be for them and what they are going to change on their daily jobs starting Monday.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2016-10-27-global-day-of-coderetreat-2016-haselt-macedonia/5.png&quot; alt=&quot;Global Day of Coderetreat 2016 in Skopje, Macedonia&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;what-s-next&quot; tabindex=&quot;-1&quot;&gt;What&#39;s next? &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Next, after being part of this very inspirational event, we are encouraged to contribute even more to the local software development community. So, we put ourselves a goal to organize many similar tech events, workshops and regular meet-ups in order to bring the local community even closer, by encouraging discussions, empowering people, sharing experiences and ideas. Stay tuned for more info which is coming, very soon!&lt;/p&gt;
&lt;h2 id=&quot;additional-reading&quot; tabindex=&quot;-1&quot;&gt;Additional Reading &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dalibornasevic.com/posts/74-notes-from-global-day-of-coderetreat-2016-in-skopje&quot;&gt;Dalibor&#39;s notes of Global Day of Coderetreat in Skopje&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/4rulesofsimpledesign/c/gdcr&quot;&gt;Book: Understanding the Four Rules of Simple Design by Corey Haines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://coderetreat.org/&quot;&gt;http://coderetreat.org/ &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://globalday.coderetreat.org/&quot;&gt;http://globalday.coderetreat.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway&#39;s Game of Life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dear reader, thanks for investing your time in reading our collective story, and I hope you&#39;ll be inspired enough to join us in the next events, which are coming soon. Oh, and don&#39;t forget: always be learning, always be coding.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.facebook.com/HASELTofficial/photos/?tab=album&amp;amp;album_id=666003166900108&quot;&gt;See more pictures here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post was originally posted on &lt;a href=&quot;http://haselt.com/global-day-of-coderetreat-2016-haselt/&quot;&gt;http://haselt.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A special thanks to my colleague &lt;a href=&quot;https://www.linkedin.com/in/viktorijanikolovska&quot;&gt;Viktorija Nikolovska&lt;/a&gt; for her help with this article.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>ASP.NET MVC5 Feature Folders Structure</title>
		<link href="https://bojanveljanovski.com/posts/feature-folders-structure-in-asp-net/"/>
		<updated>2016-05-27T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/feature-folders-structure-in-asp-net/</id>
		<content type="html">&lt;p&gt;Structuring your files around &lt;strong&gt;business concerns&lt;/strong&gt; is more natural way of handling projects than structuring them around &lt;strong&gt;technical concerns&lt;/strong&gt;. The &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;Separation of Concerns&lt;/a&gt; is applied in both approaches, but not both of them give the same desired clarity and ease for developers. This blogpost focuses on organizing MVC projects around &lt;strong&gt;feature folders&lt;/strong&gt;, which represent the business concerns.&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;p&gt;Most of the time developers make modifications related to a single feature (e.g. adding new fields, changing business rules, adding validation...). Structuring folders around interrelated files can make modification process simpler. The common MVC folder structure violates the rule of &lt;em&gt;&amp;quot;Files that change together should be structured together&amp;quot;&lt;/em&gt;. Structuring by business concerns embraces this very important rule.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Files that change together should be structured together.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;horizontal-technical-vs-vertical-business-folder-structure&quot; tabindex=&quot;-1&quot;&gt;Horizontal (Technical) vs. Vertical (Business) Folder Structure &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/feature-folders-structure-in-asp-net/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On the left side you can see the common MVC structure. On the right side you can see the feature folders structure of the very same project.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Styles
        Shared.css
        Login.css
    Scripts
        Login.js
    Controllers
        CoursesController.cs
        DepartmentsController.cs
        EnrollmentsController.cs
        InstructorsController.cs
        StudentsController.cs
        UsersController.cs
    Models  
        CourseEditModel.cs
        CourseIndexModel.cs
        DepartmentEditModel.cs
        DepartmentIndexModel.cs
        EnrollmentEditModel.cs
        EnrollmentIndexModel.cs
        InstructorEditModel.cs
        InstructorIndexModel.cs
        StudentEditModel.cs
        StudentIndexModel.cs
        UserLoginModel.cs
        UserRegisterModel.cs
        UserForgotPasswordModel.cs
    Views
        Courses
            Edit.cshtml
            Index.cshtml
        Departments
            Edit.cshtml
            Index.cshtml
        Enrollments
            Edit.cshtml
            Index.cshtml
        Instructors
            Edit.cshtml
            Index.cshtml
        Shared
            _Layout.cshtml
        Students
            Edit.cshtml
            Index.cshtml
        Users
            ForgotPassword.cshtml
            Login.cshtml
            Register.cshtml
    _ViewStart.cshtml
&lt;/code&gt;&lt;/pre&gt;
&lt;div style=&quot;&quot;&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;    Features
        Courses
            CoursesController.cs
            Edit.cs
            Edit.cshtml
            Index.cs
            Index.cshtml
        Departments
            DepartmentsController.cs
            Edit.cs
            Edit.cshtml
            Index.cs
            Index.cshtml
        Enrollments
            EnrollmentsController.cs
            Edit.cs
            Edit.cshtml
            Index.cs
            Index.cshtml
        Instructors
            InstructorsController.cs
            Edit.cs
            Edit.cshtml
            Index.cs
            Index.cshtml
        Shared
            _Layout.cshtml
            Shared.css
        Students
            StudentsController.cs
            Edit.cs
            Edit.cshtml
            Index.cs
            Index.cshtml
        Users
            UsersController.cs
            ForgotPassword.cs
            ForgotPassword.cshtml
            Login.cs
            Login.cshtml
            Login.css
            Login.js
            Register.cs
            Register.cshtml
    _ViewStart.cshtml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you see this in your IDE (e.g. in Visual Studio), the distinction between the files is even greater, given that there is accompanied file type icon shown besides the filename.&lt;/p&gt;
&lt;p&gt;Now, imagine you scale in amount of features, in addition to the standard N-Layer stuff like repositories, services, handlers, DTOs, etc... You will soon notice that things are starting to get messy in the technical folders organization. In the feature folders organization, each feature can scale on it&#39;s own, thus much easier to manage.&lt;/p&gt;
&lt;p&gt;Food for thought:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if we put our CSS and JavaScript files also in these feature folders?&lt;/li&gt;
&lt;li&gt;What if one feature folder becomes so demanding on the UI that needs to be a full SPA view/module - can we structure it to use Angular?&lt;/li&gt;
&lt;li&gt;Can we develop one feature UI in Angular, another one in React, all other in classic server-side MVC, and stay sane with our overall project structure?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example of single feature evolved as Angular application/module:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Features
        ...
        ShoppingCart
            Components
                CartComponent.js
                CartComponent.css
                PaymentComponent.js
                PaymentComponent.css
                CartContainer.js
            App.js
            App.css
            Index.cshtml
            ShoppingCartController.cs
        ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;benefits-of-using-feature-folders-over-technical-folder-structure&quot; tabindex=&quot;-1&quot;&gt;Benefits of using Feature Folders (over technical folder structure) &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/feature-folders-structure-in-asp-net/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Structuring your files by features (business concerns) makes things easier to find and manage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Time spent on navigation through Solution Explorer to locate interdependent files is drastically reduced since they are all in a single folder.&lt;/li&gt;
&lt;li&gt;You don&#39;t step over each other toes with your peers, thus, avoid spending time on fixing merge conflicts.&lt;/li&gt;
&lt;li&gt;You can scale and modify each feature on its own, independently from other features and even use different UI technology.&lt;/li&gt;
&lt;li&gt;You immediately understand what an application does and where to find necessary files for your given requirement.&lt;/li&gt;
&lt;li&gt;You can easily reuse similar features across projects by simply copying just a single folder.&lt;/li&gt;
&lt;li&gt;You can reason much easier about each feature just by looking in a single (feature) folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;implementing-feature-folders-in-asp-net-mvc-5&quot; tabindex=&quot;-1&quot;&gt;Implementing Feature Folders in ASP.NET MVC 5 &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/feature-folders-structure-in-asp-net/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To make this work in ASP.NET MVC 5, we should inherit the &lt;code&gt;RazorViewEngine&lt;/code&gt; and change the view location parts to ones that fit our new structure.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public class FeatureFoldersRazorViewEngine : RazorViewEngine
    {
        public FeatureFoldersRazorViewEngine()
        {
            var featureFolderViewLocationFormats = new[]
            {
                &amp;quot;~/Features/{1}/{0}.cshtml&amp;quot;,
                &amp;quot;~/Features/{1}/{0}.vbhtml&amp;quot;,
                &amp;quot;~/Features/Shared/{0}.cshtml&amp;quot;,
                &amp;quot;~/Features/Shared/{0}.vbhtml&amp;quot;,
            };

            ViewLocationFormats = featureFolderViewLocationFormats;
            MasterLocationFormats = featureFolderViewLocationFormats;
            PartialViewLocationFormats = featureFolderViewLocationFormats;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we have to add our newly created &lt;code&gt;FeatureFoldersRazorViewEngine&lt;/code&gt; in our application.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public class Global : HttpApplication
    {
        void Application_Start(object sender, EventArgs e)
        {
            // ...
            ViewEngines.Engines.Clear();
            ViewEngines.Engines.Add(new FeatureFoldersRazorViewEngine());
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;summary&quot; tabindex=&quot;-1&quot;&gt;Summary &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/feature-folders-structure-in-asp-net/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Structuring our MVC projects following feature folders approach increases the productivity of our dev teams.&lt;/p&gt;
&lt;p&gt;At our company, we have been using feature folders project structure on over dozens projects for over a year, and due to the high success and productivity boost, it became our default project structure on the presentation layer.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to Refactor Business Rules Using the Specification Pattern</title>
		<link href="https://bojanveljanovski.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/"/>
		<updated>2015-09-29T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/</id>
		<content type="html">&lt;p&gt;The other day, one of my colleges asked me for code review on a specific part of code and I said let&#39;s dig a little deeper into the options that we have. In this article, I demonstrate the re-factoring steps in detail that we&#39;ve taken and eventually how we employed the &lt;code&gt;Specification Pattern&lt;/code&gt; &lt;!--excerpt--&gt;. Have in mind that, I choose a very basic example in order to keep things simple and avoid confusion that can be arouse from domain complexity.&lt;!--excerpt--&gt;&lt;/p&gt;
&lt;p&gt;Here is the original code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//..

var newCompany = new Company(message.Name, message.CountryId);
	
// Query all companies from database 
var companies = _companyRepository.Query().ToList();
// Check if the newly created company is unique
if (companies.Any(x =&amp;gt; x.Name == newCompany.Name &amp;amp;&amp;amp; x.CountryId == newCompany.CountryId))
	throw new Exception(&amp;quot;A company with the same name and country already exists&amp;quot;);

session.Save(newCompany);
//..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we can see a few problems. First, all companies are queried from the database, and that can create performance issues. Another problem is too much operations happening in the &lt;code&gt;If&lt;/code&gt; check line; thus, the lengthy line is making the code harder to read. And, the final problem is very plain practice of &lt;code&gt;Exception&lt;/code&gt; throwing. Although, I like expressing explicit guard checks, that code can be better. Let&#39;s tackle these problems, one by one, in a few steps along this article and provide some improvement suggestions.&lt;/p&gt;
&lt;p&gt;Also, I provide here the &lt;code&gt;tl;dr;&lt;/code&gt; version of the code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//..

var newCompany = new Company(message.Name, message.CountryId);
	
var spec = new UniqueCompanySpecification(_companyRepository);
if (spec.IsSatisfiedBy(newCompany) == false)
	throw new CompanyAlreadyExistsException();

session.Save(newCompany);
//..
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;how-we-get-there&quot; tabindex=&quot;-1&quot;&gt;How we get there? &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;step-1-solve-the-query-performance-issues&quot; tabindex=&quot;-1&quot;&gt;Step 1 - Solve The Query Performance Issues &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;var numberOfSameCompanies = _companyRepository.Query()
	.Where(x =&amp;gt; x.Name == newCompany.Name &amp;amp;&amp;amp; x.CountryId == newCompany.CountryId)
	.Count();
if (numberOfSameCompanies &amp;gt; 0)
	throw new Exception(&amp;quot;A company with the same name and country already exists&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The query above retrieves the number of companies satisfying the given &lt;code&gt;where&lt;/code&gt; condition. Performance issues have been solved.&lt;/p&gt;
&lt;h2 id=&quot;step-2-make-the-if-condition-check-explicit&quot; tabindex=&quot;-1&quot;&gt;Step 2 - Make The &lt;code&gt;if&lt;/code&gt; Condition Check Explicit &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;var numberOfSameCompanies = _companyRepository.Query()
	.Where(x =&amp;gt; x.Name == newCompany.Name &amp;amp;&amp;amp; x.CountryId == newCompany.CountryId)
	.Count();
var doesCompanyAlreadyExists = numberOfSameCompanies &amp;gt; 0;
if (doesCompanyAlreadyExists)
	throw new Exception(&amp;quot;A company with the same name and country already exists&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By setting some explicit conditions, we gain clear understanding of what the code does.&lt;/p&gt;
&lt;h2 id=&quot;step-3-make-the-business-rule-violation-explicit&quot; tabindex=&quot;-1&quot;&gt;Step 3 - Make The Business Rule Violation Explicit &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Original:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;throw new Exception(&amp;quot;A company with the same name and country already exists&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Re-factored to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;throw new CompanyAlreadyExistsException();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the implementation of the exception:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class CompanyAlreadyExistsException : Exception
{
  CompanyAlreadyExistsException()
    :base(&amp;quot;A company with the same name and country already exists&amp;quot;)
  {
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, it looks better. Anyway, we have still room for improvements.&lt;/p&gt;
&lt;h2 id=&quot;step-4-encapsulate-the-business-rule-check-by-employing-the-specification-pattern&quot; tabindex=&quot;-1&quot;&gt;Step 4 - Encapsulate The Business Rule Check By Employing &#39;The Specification Pattern&#39; &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &#39;Specification Pattern&#39; is a tactical design pattern presented in Eric Evans’ book Domain Driven Design. The &lt;code&gt;Specification Pattern&lt;/code&gt; is a way of encapsulating business rule(s) and testing it against a candidate object to see if that object satisfies all requirements expressed in a specification. This pattern fits very good with the Single-Responsibility-Principle (SRP), which states that one class should have only one reason to change. Furthermore, this specification object can be easily unit tested and reused.&lt;/p&gt;
&lt;p&gt;Here, you can see how it is used:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	var spec = new UniqueCompanySpecification(_companyRepository);
	if (spec.IsSatisfiedBy(newCompany) == false)
		throw new CompanyAlreadyExistsException();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the implementation details:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	public class UniqueCompanySpecification : ISpecification&amp;lt;Company&amp;gt;
	{
		readonly ICompanyRepository _companyRepository;

		public UniqueCompanySpecification(ICompanyRepository companyRepository)
		{
			_companyRepository = companyRepository;
		}

		public bool IsSatisfiedBy(Company candidate)
		{
			var numberOfSameCompanies = _companyRepository.Query()
				.Where(x =&amp;gt; x.Name == newCompany.Name &amp;amp;&amp;amp; x.CountryId == newCompany.CountryId)
				.Count();
			bool isUnique = numberOfSameCompanies == 0;
			return isUnique;
		}
	}

	public interface ISpecification&amp;lt;T&amp;gt;
	{
		bool IsSatisfiedBy(T candidate);
	} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After all re-factoring steps, the final code is as following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	//..

	var newCompany = new Company(message.Name, message.CountryId);
	
	var spec = new UniqueCompanySpecification(_companyRepository);
	if (spec.IsSatisfiedBy(newCompany) == false)
		throw new CompanyAlreadyExistsException();

	session.Save(newCompany);
	//..
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;summary&quot; tabindex=&quot;-1&quot;&gt;Summary &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this article, I&#39;ve shown a re-factoring process and usage of the Specification Pattern in order to satisfy an explicit business rule.&lt;br&gt;
The re-factoring steps we took:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Solve the query performance issues&lt;/li&gt;
&lt;li&gt;Make the &lt;code&gt;if&lt;/code&gt; condition check explicit&lt;/li&gt;
&lt;li&gt;Make the business rule violation explicit&lt;/li&gt;
&lt;li&gt;Encapsulate the business rule check by employing the Specification Pattern&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Specification Pattern lets you decouple the design of requirements, fulfillment, and validation. It also allows you to make your system definitions more clear and declarative, but be careful not to fall into temptation to over-use it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://martinfowler.com/apsupp/spec.pdf&quot;&gt;Specification Pattern by Eric Evans and Martin Fowler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Specification_pattern&quot;&gt;https://en.wikipedia.org/wiki/Specification_pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot;&gt;Book: Domain Driven Design, Tackling Complexity In The Hearth of Software - by Eric Evans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Rhino Security and StructureMap Integration Guide</title>
		<link href="https://bojanveljanovski.com/posts/getting-started-with-rhino-security-structuremap/"/>
		<updated>2015-01-11T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/getting-started-with-rhino-security-structuremap/</id>
		<content type="html">&lt;p&gt;In this posting I will show you how to configure Rhino Security infrastructure to work with StructureMap IoC container and provide to you database schema (for MSSQL and &lt;a href=&quot;http://bojanv91.github.io/2014/12/database-development-guidance/&quot;&gt;FluentMigrator&lt;/a&gt;) that you will need in order Rhino Security to get working. I&#39;ve struggled some time before I got everything working, so here are my results. :) &lt;!--excerpt--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ayende/rhino-security&quot;&gt;Rhino Security&lt;/a&gt; is a security framework to provide row level security for NHibernate. Rhino Security is perfect for people who want to set up user and group security in their NHibernate domain models.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ayende/rhino-security&quot;&gt;Rhino Security GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;More details about the architecture and how Rhino Security works behind the scenes can be found &lt;a href=&quot;http://ayende.com/blog/2958/a-vision-of-enterprise-platform-security-infrastructure&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://ayende.com/blog/3109/rhino-security-overview-part-i&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://ayende.com/blog/3113/rhino-security-part-ii-discussing-the-implementation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;action-plan&quot; tabindex=&quot;-1&quot;&gt;Action Plan &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/getting-started-with-rhino-security-structuremap/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Installing NuGet packages&lt;/li&gt;
&lt;li&gt;Configuring StructureMap container and registering Rhino.Security into NHibernate&lt;/li&gt;
&lt;li&gt;Implementing CommonServiceLocator provider for StructureMap&lt;/li&gt;
&lt;li&gt;User entity that implements Rhino.Security.IUser interface&lt;/li&gt;
&lt;li&gt;Preparing the database schema&lt;/li&gt;
&lt;li&gt;Usage DEMO (code samples &lt;a href=&quot;https://github.com/bojanv91/RhinoSecurityWithStructureMap&quot;&gt;https://github.com/bojanv91/RhinoSecurityWithStructureMap&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2015-01-11-getting-started-with-rhino-security-structuremap/rhino-01.png&quot; alt=&quot;Getting started with Rhino Security and StructureMap&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;installing-nuget-packages&quot; tabindex=&quot;-1&quot;&gt;Installing NuGet packages &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/getting-started-with-rhino-security-structuremap/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Install-Package Rhino.Security			
Install-Package NHibernate
Install-Package FluentNHibernate
Install-Package StructureMap
Install-Package CommonServiceLocator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;FluentNHibernate provides fluent mapping interface for mapping our domain model entities to table structures via NHibernate.&lt;br&gt;
CommonServiceLocator provides abstraction over IoC containers and service locators and contains a shared interface for service location. Rhino Security makes use of it, that is why can be used with any IoC container.&lt;/p&gt;
&lt;h2 id=&quot;configuring-structuremap-container-and-registering-rhino-security-into-nhibernate&quot; tabindex=&quot;-1&quot;&gt;Configuring StructureMap container and registering Rhino.Security into NHibernate &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/getting-started-with-rhino-security-structuremap/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the following code snippet I have all configuration stuff in one class, called the Bootstrapper. It&#39;s purpose is to provide functionality for booting up our application, the starting point. Explanations about what does what are put in comments. If something is still unclear do write me a comment, I&#39;ll happily update that part.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	using FluentNHibernate.Cfg;
	using FluentNHibernate.Cfg.Db;
	using NHibernate;
	using NHibernate.Cfg;
	using NHibernate.Context;
	using Rhino.Security.Interfaces;
	using Rhino.Security.Services;

	namespace RhinoSecurityWithStructureMap
	{
	    public class Bootstrapper
	    {
	        public static void Bootstrap(string connectionString)
	        {
	            var container = new StructureMap.Container();
	            container.Configure(cfg =&amp;gt;
	                {
	                    //NHibernate configurations 
	                    cfg.For&amp;lt;ISessionFactory&amp;gt;().Singleton().Use(() =&amp;gt; CreateSessionFactory(connectionString));
	                    cfg.For&amp;lt;ISession&amp;gt;().Use(context =&amp;gt; GetSession(context));
	
	                    //Rhino Security configurations 
	                    cfg.For&amp;lt;IAuthorizationService&amp;gt;().Use&amp;lt;AuthorizationService&amp;gt;();
	                    cfg.For&amp;lt;IAuthorizationRepository&amp;gt;().Use&amp;lt;AuthorizationRepository&amp;gt;();
	                    cfg.For&amp;lt;IPermissionsBuilderService&amp;gt;().Use&amp;lt;PermissionsBuilderService&amp;gt;();
	                    cfg.For&amp;lt;IPermissionsService&amp;gt;().Use&amp;lt;PermissionsService&amp;gt;();
	                });
	
	            //Setting up StuctureMapServiceLocator as a CommonServiceLocator that Rhino.Security will use for DI
	            Microsoft.Practices.ServiceLocation.ServiceLocator
	                .SetLocatorProvider(() =&amp;gt; new StructureMapServiceLocator(container));
	        }
	
	        private static ISessionFactory CreateSessionFactory(string connectionString)
	        {
	            FluentConfiguration fluentConfig = Fluently.Configure()
	                .Database(MsSqlConfiguration.MsSql2012.ConnectionString(connectionString))          //specifying connection string for Microsoft SQL Server 2012 
	                .Mappings(m =&amp;gt; m.FluentMappings.AddFromAssemblyOf&amp;lt;Bootstrapper&amp;gt;())                  //specifying in which assembly NHibernate should look for entity mappings
	                .CurrentSessionContext(typeof(ThreadStaticSessionContext).AssemblyQualifiedName)    //specifying the session context lifecycle to be initialized per thread
	                .ExposeConfiguration(cfg =&amp;gt;
	                {
	                    Rhino.Security.Security.Configure&amp;lt;User&amp;gt;(cfg, Rhino.Security.SecurityTableStructure.Prefix);
	                });
	
	            return fluentConfig.BuildSessionFactory();
	        }
	
	        private static ISession GetSession(StructureMap.IContext context)
	        {
	            var sessionFactory = context.GetInstance&amp;lt;ISessionFactory&amp;gt;();
	            return sessionFactory.GetCurrentSession();
	        }
	    }
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;implementing-commonservicelocator-provider-for-structuremap&quot; tabindex=&quot;-1&quot;&gt;Implementing CommonServiceLocator provider for StructureMap &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/getting-started-with-rhino-security-structuremap/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The code is pretty much straightforward. We just implement Microsoft.Practices.ServiceLocation.IServiceLocator interface with the common code that is provided to us by StructureMap IContainer interface, basically this class acts as a wrapper.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public class StructureMapServiceLocator : Microsoft.Practices.ServiceLocation.IServiceLocator
    {
        private readonly IContainer _container;

        public StructureMapServiceLocator(IContainer container)
        {
            _container = container;
        }

        public IEnumerable&amp;lt;TService&amp;gt; GetAllInstances&amp;lt;TService&amp;gt;()
        {
            return _container.GetAllInstances&amp;lt;TService&amp;gt;();
        }

        public IEnumerable&amp;lt;object&amp;gt; GetAllInstances(Type serviceType)
        {
            return (IEnumerable&amp;lt;object&amp;gt;)_container.GetAllInstances(serviceType);
        }

        public TService GetInstance&amp;lt;TService&amp;gt;(string key)
        {
            return _container.GetInstance&amp;lt;TService&amp;gt;(key);
        }

        public TService GetInstance&amp;lt;TService&amp;gt;()
        {
            return _container.GetInstance&amp;lt;TService&amp;gt;();
        }

        public object GetInstance(Type serviceType, string key)
        {
            return _container.GetInstance(serviceType, key);
        }

        public object GetInstance(Type serviceType)
        {
            return _container.GetInstance(serviceType);
        }

        public object GetService(Type serviceType)
        {
            return _container.GetInstance(serviceType);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;user-entity-implements-rhino-security-iuser-interface&quot; tabindex=&quot;-1&quot;&gt;User entity implements Rhino.Security.IUser interface &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/getting-started-with-rhino-security-structuremap/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In our domain model we commonly have entity which represents the actual user. Rhino.Security must know which entity is the user entity in order to work. So our User entity must implement Rhino.Security.IUser interface, more precisely only SecurityInfo property from the interface must be implemented.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	public class User : Rhino.Security.IUser
	{
		public virtual int Id { get; protected set; }	    
		public virtual string Username { get; set; }
	    public virtual string PasswordHashed { get; set; }
	
	    public Rhino.Security.SecurityInfo SecurityInfo
	    {
	        get
	        {
	            return new Rhino.Security.SecurityInfo(Username, Id);
	        }
	    }
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;preparing-the-database-schema&quot; tabindex=&quot;-1&quot;&gt;Preparing the database schema &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/getting-started-with-rhino-security-structuremap/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Schema files can be found in the following links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bojanv91/RhinoSecurityWithStructureMap/blob/master/RhinoSecurityWithStructureMap/DatabaseScripts/rhino_security_and_basic_user.sql.sql&quot;&gt;SQL dump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bojanv91/RhinoSecurityWithStructureMap/blob/master/RhinoSecurityWithStructureMap/DatabaseScripts/rhino_security_and_basic_user.cs&quot;&gt;Fluent Migrator schema&lt;/a&gt; (&lt;a href=&quot;http://bojanv91.github.io/2014/12/database-development-guidance/&quot;&gt;blogpost about how to use Fluent Migrator&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2015-01-11-getting-started-with-rhino-security-structuremap/rhino-02.png&quot; alt=&quot;Rhino database schema&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;usage-demo&quot; tabindex=&quot;-1&quot;&gt;Usage DEMO &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/getting-started-with-rhino-security-structuremap/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The full code sample can be found in following github repository: &lt;a href=&quot;https://github.com/bojanv91/RhinoSecurityWithStructureMap&quot;&gt;https://github.com/bojanv91/RhinoSecurityWithStructureMap&lt;/a&gt;. Here I provide excerpt code snippets from the actual test code.&lt;/p&gt;
&lt;p&gt;Setting up user groups, operations and permissions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	var _authorizationRepository = ServiceLocator.Current.GetInstance&amp;lt;IAuthorizationRepository&amp;gt;();
	var _authorizationService = ServiceLocator.Current.GetInstance&amp;lt;IAuthorizationService&amp;gt;();
	var _permissionsBuilderService = ServiceLocator.Current.GetInstance&amp;lt;IPermissionsBuilderService&amp;gt;();
	var _permissionService = ServiceLocator.Current.GetInstance&amp;lt;IPermissionsService&amp;gt;();

    using (var transaction = _session.BeginTransaction())
    {
        //creating user group &#39;Admin&#39;
        _authorizationRepository.CreateUsersGroup(&amp;quot;Admin&amp;quot;);

        //creating operations
        _authorizationRepository.CreateOperation(&amp;quot;/Content&amp;quot;);
        _authorizationRepository.CreateOperation(&amp;quot;/Content/Create&amp;quot;);
        _authorizationRepository.CreateOperation(&amp;quot;/Content/View&amp;quot;);
        _authorizationRepository.CreateOperation(&amp;quot;/Content/Delete&amp;quot;);

        transaction.Commit();
    }

    using (var transaction = _session.BeginTransaction())
    {
        //adding the LoggedInUser to the &#39;Admin&#39; users group
        _authorizationRepository.AssociateUserWith(_loggedInUser, &amp;quot;Admin&amp;quot;);

        //Building &#39;Allow&#39; permissions for the LoggedInUser, 
        //by default if not defined as allowed, the operation is denied
        //For the sake of this example, we say the the users that are in &#39;Admin&#39; users group can
        //create and view content, but cannot delete content. 
        _permissionsBuilderService.Allow(&amp;quot;/Content/Create&amp;quot;).For(&amp;quot;Admin&amp;quot;).OnEverything().DefaultLevel().Save();
        _permissionsBuilderService.Allow(&amp;quot;/Content/View&amp;quot;).For(&amp;quot;Admin&amp;quot;).OnEverything().DefaultLevel().Save();

        //We can explicitly define &#39;Deny&#39; permission, but as the default behaviour denies everything 
        //that is not defined as &#39;Allow&#39;, I am not going to define it. You don&#39;t trust me? 
        //That&#39;s why we have tests ;) 
        //_permissionsBuilderService.Deny(&amp;quot;/Content/Delete&amp;quot;).For(&amp;quot;Admin&amp;quot;).OnEverything().DefaultLevel().Save();

        transaction.Commit();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test code demonstrating the usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    public class RhinoTests : IUseFixture&amp;lt;TestFixture&amp;gt;
    {
        private readonly IAuthorizationService _authorizationService;
        private readonly User _loggedInUser;

        public RhinoTests() 
        {
            _authorizationService = ServiceLocator.Current.GetInstance&amp;lt;IAuthorizationService&amp;gt;();
            _loggedInUser = TestFixture._loggedInUser;
        }

        [Fact]
        public void it_should_allow_content_creation()
        {
            bool result = _authorizationService.IsAllowed(_loggedInUser, &amp;quot;/Content/Create&amp;quot;);
            Assert.True(result);
        }

        [Fact]
        public void it_should_allow_content_viewing()
        {
            bool result = _authorizationService.IsAllowed(_loggedInUser, &amp;quot;/Content/View&amp;quot;);
            Assert.True(result);
        }

        [Fact]
        public void it_should_deny_content_deletition()
        {
            bool result = _authorizationService.IsAllowed(_loggedInUser, &amp;quot;/Content/Delete&amp;quot;);
            Assert.False(result);
        }

        public void SetFixture(TestFixture data) { }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy coding folks! Having questions or concerns? Shoot me a tweet -&amp;gt; @bojanv91&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>.NET Database Development with FluentMigrator (2014 Edition)</title>
		<link href="https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/"/>
		<updated>2014-12-12T00:00:00Z</updated>
		<id>https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/</id>
		<content type="html">&lt;p&gt;I have been thinking a lot lately about how properly and simply to implement database versioning strategy. These years I&#39;ve experienced working with different types of database setup and furthermore researched and analyzed some more approaches and tools regarding this topic. In this posting I write about my findings and why I like Fluent Migrator as a help tool in order to get the job done. But first, let&#39;s talk about the &lt;em&gt;goals&lt;/em&gt; we try to achieve. &lt;!--excerpt--&gt;&lt;/p&gt;
&lt;h1 id=&quot;goals&quot; tabindex=&quot;-1&quot;&gt;Goals &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Auditing schema changes&lt;/li&gt;
&lt;li&gt;Auditing test data changes&lt;/li&gt;
&lt;li&gt;Keeping schema and test data integrity across machines&lt;/li&gt;
&lt;li&gt;Versioning via source version control systems&lt;/li&gt;
&lt;li&gt;DB-provider agnostic migration (MSSQL, PostgreSql, MySql, Oracle)&lt;/li&gt;
&lt;li&gt;Simple and automated migration strategy (local and in production)&lt;/li&gt;
&lt;li&gt;New developers on project should not sweat while making the database work on their machines, neither the CI server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Links to &lt;a href=&quot;https://github.com/schambers/fluentmigrator/wiki&quot;&gt;Fluent Migrator&lt;/a&gt; and &lt;a href=&quot;https://github.com/bojanv91/DatabaseMigrationsExample&quot;&gt;this guide&#39;s project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the end - all you just need to do is run MSBuildMigrator.Migrate.bat file and watch your database being deployed, upgraded, downgraded...it will figure out ;) .&lt;/p&gt;
&lt;h1 id=&quot;step-by-step-guide&quot; tabindex=&quot;-1&quot;&gt;Step by step guide &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;1-open-visual-studio-and-create-new-class-library-project&quot; tabindex=&quot;-1&quot;&gt;1. Open Visual Studio and create New Class Library Project &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2014-12-12-database-development-guidance/img01.png&quot; alt=&quot;Open Visual Studio and create New Class Library Project&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-install-package-fluentmigrator&quot; tabindex=&quot;-1&quot;&gt;2. Install-Package FluentMigrator &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2014-12-12-database-development-guidance/img02.png&quot; alt=&quot;Install-Package FluentMigrator&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-create-new-folder-migrations-to-project-here-we-are-going-to-store-migration-files&quot; tabindex=&quot;-1&quot;&gt;3. Create new folder &amp;quot;Migrations&amp;quot; to project - here we are going to store migration files &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2014-12-12-database-development-guidance/img03.png&quot; alt=&quot;Create new folder &amp;quot;Migrations&amp;quot; to project - here we are going to store migration files&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-now-let-s-create-database-tables-with-migration-files&quot; tabindex=&quot;-1&quot;&gt;4. Now, let&#39;s create database tables with migration files &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[FluentMigrator.Migration(0)]
public class Baseline : FluentMigrator.Migration
{
    public override void Up()
    {
        Create.Table(&amp;quot;Category&amp;quot;)
            .WithColumn(&amp;quot;Id&amp;quot;).AsGuid().NotNullable().PrimaryKey()
            .WithColumn(&amp;quot;Name&amp;quot;).AsString(255);

        Create.Table(&amp;quot;Product&amp;quot;)
            .WithColumn(&amp;quot;Id&amp;quot;).AsGuid().NotNullable().PrimaryKey()
            .WithColumn(&amp;quot;CategoryId&amp;quot;).AsGuid().ForeignKey(&amp;quot;Category&amp;quot;, &amp;quot;Id&amp;quot;)
            .WithColumn(&amp;quot;Name&amp;quot;).AsString(255)
            .WithColumn(&amp;quot;Price&amp;quot;).AsDecimal();
    }

    public override void Down()
    {
        Delete.Table(&amp;quot;Product&amp;quot;);
        Delete.Table(&amp;quot;Category&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is all what is needed. In essence a migration is a class which drives from &lt;strong&gt;Migration abstract class&lt;/strong&gt;  and implements &lt;strong&gt;&#39;Up&#39;&lt;/strong&gt; and &lt;strong&gt;&#39;Down&#39;&lt;/strong&gt; methods. Additionally you will also need to define &lt;strong&gt;Migration Attribute&lt;/strong&gt; with unique identifier in order the migration runner to know the order of migration files. I like it how FM API is designed, it really follows the SQL language and how I would write this script in plain SQL.
Read further &lt;a href=&quot;https://github.com/schambers/fluentmigrator/wiki/Migration&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just for providing more examples I have added one more migration file for adding one more column to Product table for storing image URL.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Migration(201411131100)]
public class M201411131100_Product_added_column_for_storing_image_url : Migration
{
    public override void Up()
    {
        Alter.Table(&amp;quot;Product&amp;quot;)
            .AddColumn(&amp;quot;ImageUrl&amp;quot;).AsString(255);
    }

    public override void Down()
    {
        Delete.Column(&amp;quot;ImageUrl&amp;quot;).FromTable(&amp;quot;Product&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now this is how everything looks in my solution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2014-12-12-database-development-guidance/img04.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, let&#39;s initialize the database with our script.&lt;/p&gt;
&lt;h2 id=&quot;5-creating-migration-runner-msbuild-migrator-bat-and-connectionstrings-config&quot; tabindex=&quot;-1&quot;&gt;5. Creating Migration Runner (MSBuild), Migrator (.BAT) and ConnectionStrings (.CONFIG) &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2014-12-12-database-development-guidance/img05.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-msbuildmigrationrunner-proj&quot; tabindex=&quot;-1&quot;&gt;1. MSBuildMigrationRunner.proj &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;Project xmlns=&amp;quot;http://schemas.microsoft.com/developer/msbuild/2003&amp;quot; DefaultTargets=&amp;quot;Migrate&amp;quot;&amp;gt;
	&amp;lt;PropertyGroup&amp;gt;
		&amp;lt;DatabaseProvider&amp;gt;&amp;lt;/DatabaseProvider&amp;gt;
		&amp;lt;ConnectionStringConfigPath&amp;gt;&amp;lt;/ConnectionStringConfigPath&amp;gt;
		&amp;lt;ConnectionStringName&amp;gt;&amp;lt;/ConnectionStringName&amp;gt;
		&amp;lt;DataMigrationProjectName&amp;gt;DatabaseMigrationsExample&amp;lt;/DataMigrationProjectName&amp;gt;
		&amp;lt;DataMigrationProjectRootPath&amp;gt;$(MSBuildProjectDirectory)&amp;lt;/DataMigrationProjectRootPath&amp;gt;
		&amp;lt;MigratorTasksDirectory&amp;gt;&amp;lt;/MigratorTasksDirectory&amp;gt;
				
		&amp;lt;DataMigrationProjectBuildDLL&amp;gt;$(DataMigrationProjectRootPath)&#92;bin&#92;Debug&#92;$(DataMigrationProjectName).dll&amp;lt;/DataMigrationProjectBuildDLL&amp;gt;
		&amp;lt;DataMigrationProjectCsproj&amp;gt;$(DataMigrationProjectRootPath)&#92;$(DataMigrationProjectName).csproj&amp;lt;/DataMigrationProjectCsproj&amp;gt;
	&amp;lt;/PropertyGroup&amp;gt;
		
	&amp;lt;UsingTask TaskName=&amp;quot;FluentMigrator.MSBuild.Migrate&amp;quot; AssemblyFile=&amp;quot;$(MigratorTasksDirectory)FluentMigrator.MSBuild.dll&amp;quot;/&amp;gt;
			
	&amp;lt;Target Name=&amp;quot;Build&amp;quot;&amp;gt;
		&amp;lt;MSBuild Projects=&amp;quot;$(DataMigrationProjectCsproj)&amp;quot; Properties=&amp;quot;Configuration=Debug&amp;quot;/&amp;gt;
	&amp;lt;/Target&amp;gt;
			
	&amp;lt;Target Name=&amp;quot;Migrate&amp;quot; DependsOnTargets=&amp;quot;Build&amp;quot;&amp;gt;
		&amp;lt;Message Text=&amp;quot;Starting FluentMigrator Migration&amp;quot;/&amp;gt;
		&amp;lt;Migrate Database=&amp;quot;$(DatabaseProvider)&amp;quot;
					Connection=&amp;quot;$(ConnectionStringName)&amp;quot;
					ConnectionStringConfigPath=&amp;quot;$(ConnectionStringConfigPath)&amp;quot;
					Target=&amp;quot;$(DataMigrationProjectBuildDLL)&amp;quot;
					Output=&amp;quot;True&amp;quot;
					Verbose=&amp;quot;True&amp;quot;&amp;gt;
		&amp;lt;/Migrate&amp;gt;
	&amp;lt;/Target&amp;gt;
		
	&amp;lt;Target Name=&amp;quot;MigratePreview&amp;quot; DependsOnTargets=&amp;quot;Build&amp;quot;&amp;gt;
		&amp;lt;Message Text=&amp;quot;Previewing FluentMigrator Migration&amp;quot;/&amp;gt;
		&amp;lt;Migrate Database=&amp;quot;$(DatabaseProvider)&amp;quot;
					Connection=&amp;quot;$(ConnectionStringName)&amp;quot;
					ConnectionStringConfigPath=&amp;quot;$(ConnectionStringConfigPath)&amp;quot;
					Target=&amp;quot;$(DataMigrationProjectBuildDLL)&amp;quot;
					Output=&amp;quot;True&amp;quot;
					Verbose=&amp;quot;True&amp;quot;
					PreviewOnly=&amp;quot;True&amp;quot;&amp;gt;
		&amp;lt;/Migrate&amp;gt;
	&amp;lt;/Target&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;2-connectionstrings-config&quot; tabindex=&quot;-1&quot;&gt;2. ConnectionStrings.config &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot; ?&amp;gt;
&amp;lt;configuration&amp;gt;
	&amp;lt;connectionStrings&amp;gt;
		&amp;lt;clear /&amp;gt;
		&amp;lt;add name=&amp;quot;Default&amp;quot; connectionString=&amp;quot;Server=###;User ID=###;Password=###;Database=###;&amp;quot;/&amp;gt;
	&amp;lt;/connectionStrings&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;3-msbuildmigrator-migrate-bat&quot; tabindex=&quot;-1&quot;&gt;3. MSBuildMigrator.Migrate.bat &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;C:&#92;Windows&#92;Microsoft.NET&#92;Framework&#92;v4.0.30319&#92;MSBuild.exe MSBuildMigrationRunner.proj /t:Migrate /p:DatabaseProvider=SqlServer2012 /p:ConnectionStringConfigPath=ConnectionStrings.config /p:ConnectionStringName=Default /p:DataMigrationProjectName=DatabaseMigrationsExample /p:DataMigrationProjectRootPath=. /p:MigratorTasksDirectory=..&#92;packages&#92;FluentMigrator.1.3.1.0&#92;tools&#92;
pause
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;/t:Migrate - performs Migration&lt;/li&gt;
&lt;li&gt;/t:MigratePreview - performs previewing of what would happen when migration is called&lt;/li&gt;
&lt;li&gt;/p:DatabaseProvider=? - specify your database providers name (SqlServer2012, postgres, mysql, oracle, sqlite and other can be found in FluentMigrator documentation)&lt;/li&gt;
&lt;li&gt;/p:ConnectionStringConfigPath=? - path to connection strings file&lt;/li&gt;
&lt;li&gt;/p:ConnectionStringName=? - name of the connection string to use from the configuration file&lt;/li&gt;
&lt;li&gt;/p:DataMigrationProjectName=? - Visual Studio project name where your migration files reside&lt;/li&gt;
&lt;li&gt;/p:DataMigrationProjectRootPath=? - path to where your Visual Studio migration project resides&lt;/li&gt;
&lt;li&gt;/p:MigratorTasksDirectory=? - path to FluentMigrator tools folder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Viola, this is all you need to do. For your project you will need to put the connection string to your database and make changes where needed in the .BAT file, such as database provider and project name as an essential changes. Other config stuff should be pretty common, but if you have different structure than mine, you have full power and control with the flexibility provided here.&lt;/p&gt;
&lt;h2 id=&quot;5-run-your-msbuildmigrator-migrate-bat-file&quot; tabindex=&quot;-1&quot;&gt;5. Run your MSBuildMigrator.Migrate.bat file &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2014-12-12-database-development-guidance/img06.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Table VersionInfo is used for storing migration metadata.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2014-12-12-database-development-guidance/img07.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;All of our tables are created.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2014-12-12-database-development-guidance/img08.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;In VersionInfo table you can see the &amp;quot;commits&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bojanveljanovski.com/img/2014-12-12-database-development-guidance/img09.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;rules-of-thumb&quot; tabindex=&quot;-1&quot;&gt;Rules of Thumb &lt;a class=&quot;header-anchor&quot; href=&quot;https://bojanveljanovski.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;First migration is always called &amp;quot;BaseLine&amp;quot; with migration ID: 0. Everything starts from there.&lt;/li&gt;
&lt;li&gt;Migration unique identification number is composed of current datetime when the migration is being created in format #yyyyMMddhhmm#&lt;br&gt;
(example: now is 2014-11-13 10:15, so migration ID would be 201411131015)&lt;/li&gt;
&lt;li&gt;Migration filename should explain what is being changed - just like how you would write a commit message - in format &#39;M#yyyyMMddhhmm#_Message.cs&#39;&lt;br&gt;
(example: M201411131015_created_all_initial_tables)&lt;/li&gt;
&lt;li&gt;Class name should follow the exact convention like the filename&lt;br&gt;
(example: class M201411131015_created_all_initial_tables { .. }&lt;/li&gt;
&lt;li&gt;MSBuildMigrationRunner.proj, ConnectionStrings.config, MSBuildMigrator.Migrate.bat are stored in Migration project root folder&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Happy coding folks! Having questions or concerns? Shoot me a tweet -&amp;gt; @bojanv91&lt;/p&gt;
</content>
	</entry>
</feed>
