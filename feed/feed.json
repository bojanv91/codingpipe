{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "CodingPipe.com",
	"language": "en",
	"home_page_url": "https://codingpipe.com/",
	"feed_url": "https://codingpipe.com/feed/feed.json",
	"description": "Random thoughts about programming and software development",
	"author": {
		"name": "Bojan Veljanovski",
		"url": "https://codingpipe.com/about/"
	},
	"items": [
		{
			"id": "https://codingpipe.com/posts/ef-core-migrations-quick-reference/",
			"url": "https://codingpipe.com/posts/ef-core-migrations-quick-reference/",
			"title": "EF Core Migrations Quick Reference",
			"content_html": "<p>EF Core migration commands that I find myself looking up constantly.</p>\n<p>Run these from the project directory containing your DbContext. Add <code>--project &lt;ProjectName&gt;</code> if running from solution root. Use <code>--output-dir Data/Migrations</code> to organize migrations in a specific folder.</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token comment\"># Install EF Core CLI globally</span>\ndotnet tool install <span class=\"token operator\">--</span>global dotnet-ef\n\n<span class=\"token comment\"># Check migration status and list all migrations</span>\ndotnet ef migrations list\n\n<span class=\"token comment\"># Apply pending migrations to database</span>\ndotnet ef database update\n\n<span class=\"token comment\"># Generate new migration with descriptive name</span>\ndotnet ef migrations add &lt;MigrationName>\ndotnet ef migrations add &lt;MigrationName> <span class=\"token operator\">--</span>output-<span class=\"token function\">dir</span> <span class=\"token keyword\">Data</span><span class=\"token operator\">/</span>Migrations\n\n<span class=\"token comment\"># Drop database</span>\ndotnet ef database drop\n\n<span class=\"token comment\"># Remove all migrations</span>\ndotnet ef migrations remove <span class=\"token operator\">--</span>force\n\n<span class=\"token comment\"># View DbContext information and connection details</span>\ndotnet ef dbcontext info</code></pre>\n",
			"date_published": "2025-07-11T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/what-makes-code-unmaintainable/",
			"url": "https://codingpipe.com/posts/what-makes-code-unmaintainable/",
			"title": "8 factors that make code unmaintainable",
			"content_html": "<p>Software systems inevitably change. The challenge is we rarely know when or where changes will be needed. Experience in a domain helps make better design decisions, especially for systems in production where you need frequent updates without breaking functionality.</p>\n<h2 id=\"1-excessive-coupling\" tabindex=\"-1\">1. Excessive coupling <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/what-makes-code-unmaintainable/#1-excessive-coupling\">#</a></h2>\n<p>Code coupled with many dependencies creates a chain reaction of changes. Modifying one class requires changes in other dependent classes, which triggers more changes elsewhere. This &quot;dependency hell&quot; is why simple changes often take days instead of minutes.</p>\n<p>I've seen teams spend entire sprints on what should have been simple configuration changes because they required updates across dozens of tightly coupled components. When you can't change anything without changing everything, maintenance becomes a nightmare.</p>\n<h2 id=\"2-solving-imaginary-future-problems\" tabindex=\"-1\">2. Solving imaginary future problems <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/what-makes-code-unmaintainable/#2-solving-imaginary-future-problems\">#</a></h2>\n<p>Code that tries to solve future or speculative problems that haven't happened yet quickly becomes unmaintainable. We often don't know what tomorrow's problems will be, yet many developers build &quot;just in case&quot; features.</p>\n<p>The key is making things right for today while enabling tomorrow's changes without implementing them. Follow YAGNI: don't add functionality until you need it.</p>\n<h2 id=\"3-side-effects-and-unclear-intentions\" tabindex=\"-1\">3. Side effects and unclear intentions <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/what-makes-code-unmaintainable/#3-side-effects-and-unclear-intentions\">#</a></h2>\n<p>Consider this example:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DepositAmount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span> account<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> amount<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    account<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span>\n    account<span class=\"token punctuation\">.</span>LastActivityDate <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">;</span>\n    account<span class=\"token punctuation\">.</span><span class=\"token function\">UpgradeAccountTier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Side effect!</span>\n    <span class=\"token function\">SendPromotionalEmails</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Another unexpected side effect!</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>From the method name &quot;DepositAmount&quot;, would you expect it to upgrade the account tier and send emails? Methods should do what their name suggests, nothing more. When code does unexpected things, debugging becomes a puzzle where every method call might trigger hidden behavior across the system.</p>\n<h2 id=\"4-knowledge-duplication\" tabindex=\"-1\">4. Knowledge duplication <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/what-makes-code-unmaintainable/#4-knowledge-duplication\">#</a></h2>\n<p>When code is duplicated, changing requirements means updating multiple places. Miss one, and you create bugs. Business rules duplicated across the codebase often drift apart over time.</p>\n<p>I follow the Rule of Three: tolerate duplication twice, but refactor on the third occurrence. Just ensure the duplicated code truly represents the same concept. Sometimes similar-looking code serves different purposes and should remain separate.</p>\n<h2 id=\"5-inconsistent-coding-style\" tabindex=\"-1\">5. Inconsistent coding style <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/what-makes-code-unmaintainable/#5-inconsistent-coding-style\">#</a></h2>\n<p>When code follows different conventions and patterns, developers waste mental energy switching contexts. Inconsistency goes beyond formatting: it includes naming, error handling, and how concepts are represented. The codebase should look like it was written by one person.</p>\n<h2 id=\"6-poor-structure\" tabindex=\"-1\">6. Poor structure <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/what-makes-code-unmaintainable/#6-poor-structure\">#</a></h2>\n<p>Code becomes unmaintainable when it's difficult to find where to make changes. Since developers spend about 10 times more time reading code than writing it, structure matters. The fundamental rule: code that changes together should be placed together. When related functionality is scattered across the codebase, even simple additions require modifying many files, increasing the risk of overlooked side effects.&quot;</p>\n<h2 id=\"7-over-engineering\" tabindex=\"-1\">7. Over-engineering <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/what-makes-code-unmaintainable/#7-over-engineering\">#</a></h2>\n<p>The worst over-engineering happens in the name of extensibility. Code designed to handle every possible future scenario often can't handle the actual changes that occur.</p>\n<p>Design for changes you've already seen. If configuration values changed three times last year, make them configurable. If the core algorithm has been stable for two years, leave it alone. The paradox: 'flexible' code often becomes inflexible for real-world changes.</p>\n<h2 id=\"8-under-engineering\" tabindex=\"-1\">8. Under-engineering <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/what-makes-code-unmaintainable/#8-under-engineering\">#</a></h2>\n<p>Under-engineering creates technical debt through copy-paste coding, magic numbers, missing error handling, and functions doing too much. What seems faster initially slows all future development.</p>\n<h2 id=\"focus-on-what-changes-most-often\" tabindex=\"-1\">Focus on what changes most often <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/what-makes-code-unmaintainable/#focus-on-what-changes-most-often\">#</a></h2>\n<p>Git can identify your most frequently changed files with:</p>\n<pre class=\"language-shell\" tabindex=\"0\"><code class=\"language-shell\"><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--format</span><span class=\"token operator\">=</span>format: --name-only <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token string\">'^$'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> <span class=\"token parameter variable\">-c</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-nr</span> <span class=\"token operator\">|</span> <span class=\"token function\">head</span> -20. </code></pre>\n<p>Files appearing in more than 25% of commits deserve extra attention for maintainability.</p>\n<h2 id=\"final-thoughts\" tabindex=\"-1\">Final thoughts <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/what-makes-code-unmaintainable/#final-thoughts\">#</a></h2>\n<p>The true test of maintainable code isn't whether it works today, but whether a new team member can understand and modify it six months from now. As Joel Spolsky noted, &quot;It's harder to read code than to write it&quot; -- which is why our job isn't just writing code that works, but code that others can easily understand and change.</p>\n<p>Every decision that makes code harder to understand compounds over time, eventually creating what Michael Feathers calls &quot;legacy code&quot;: code we're afraid to change. When reviewing or writing code, ask yourself if you're introducing any of these maintainability problems. Awareness alone can help you avoid the most common pitfalls.</p>\n<p>*<strong>EDIT (2025):</strong> Even AI tools work better when the codebase is maintainable. AI assistants can more accurately suggest improvements and detect bugs when code follows consistent patterns, has clear naming, and maintains proper separation of concerns. Conversely, the maintainability issues described above often confuse AI tools just as they confuse human developers.</p>\n",
			"date_published": "2025-04-24T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/system-as-etl-pipeline/",
			"url": "https://codingpipe.com/posts/system-as-etl-pipeline/",
			"title": "The hidden ETL pipeline in your system",
			"content_html": "<p>I worked on a connected devices project where mobile app communicated with hardware devices via Bluetooth, processed raw data sent from different device manufacturers and sent it to cloud services in a standardized format. During development, I realized one part of the system was functioning as an ETL pipeline, but it was not originally designed as one.</p>\n<p>This reminded me of a security system I had worked on years earlier. Edge controllers collected data from card readers and door locks (also from different manufacturers), then sent it to the cloud for storage and real-time reporting. These controllers extracted data from different hardware types, transformed multiple formats into one standard format, and loaded everything to cloud services. We had deliberately designed this sub-system as an ETL pipeline.</p>\n<p>Both systems followed the same pattern: extract, transform, load. The mobile app in our connected device project was performing the exact same role as those edge controllers.</p>\n<p>Recognizing this pattern opened up opportunities to improve the existing system. The mobile app was our transformation engine. Local storage existed for reliability, not offline functionality. The data transformation rules were our most valuable code. This let us improve each part separately: extract data from devices reliably, transform it more efficiently, and optimize the load to servers.</p>\n<p>It also clarified architectural decisions. Reporting belonged at the backend where data was already processed and aggregated, not on devices or mobile app.</p>\n<p>While both systems sent data back down (settings and configurations), this was separate from the ETL process. Keeping these concerns apart made the design cleaner.</p>\n<p>Seeing this as ETL opened up standard optimizations: batching data before sending, cleaning up glitches, removing duplicates, and compressing data for efficient transfer.</p>\n<p>What looked like a unique technical challenge was actually a familiar problem in disguise. The key was recognizing the pattern and applying proven solutions.</p>\n",
			"date_published": "2025-04-23T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/google-sheets-as-a-backend/",
			"url": "https://codingpipe.com/posts/google-sheets-as-a-backend/",
			"title": "Google sheets as your backend: Preserving business logic instead of rebuilding it",
			"content_html": "<p>Years ago, I worked on a project with interconnected pricing spreadsheets and a tight deadline. The team had spent years perfecting complex calculations across these sheets, updating formulas monthly based on market conditions. The client needed their sales team to access these calculations via a web application to run calculations and generate quotes, but rebuilding all that Excel logic in code would take months.</p>\n<p>Instead of rewriting their spreadsheet calculations, we kept them exactly where they were and built around them. This approach revealed a key insight: <strong>sometimes the fastest path to a working system is preserving existing expertise rather than rebuilding it</strong>.</p>\n<h2 id=\"the-core-insight-preserve-business-logic-where-it-lives\" tabindex=\"-1\">The core insight: Preserve business logic where it lives <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/google-sheets-as-a-backend/#the-core-insight-preserve-business-logic-where-it-lives\">#</a></h2>\n<p>When business experts have already built and validated complex calculations in spreadsheets, you have two choices: spend weeks translating their work into code, or build a system that uses their existing work directly. The Google Sheets API makes the second option surprisingly practical.</p>\n<p>This approach works because it separates concerns cleanly. Business experts continue managing calculations using tools they know. Developers focus on building user interfaces and data flow. Both teams work in their area of expertise without stepping on each other.</p>\n<h2 id=\"how-the-architecture-works\" tabindex=\"-1\">How the architecture works <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/google-sheets-as-a-backend/#how-the-architecture-works\">#</a></h2>\n<p>To implement this insight, the solution connects four components. A template spreadsheet contains all calculations and reporting layouts that business users control. A web interface provides user inputs and displays results. An integration service communicates with the Google Sheets API to create template copies for each session, update cells with user data, retrieve calculated results, and clean up temporary spreadsheets. A security layer handles authentication and permissions.</p>\n<p>Each user session gets its own copy of the template, preventing conflicts while preserving the original formulas. The system passes user inputs to the copy, lets the spreadsheet calculate results, then retrieves the output for display or reporting.</p>\n<h2 id=\"real-world-implementation-sales-quoting-tool\" tabindex=\"-1\">Real-world implementation: Sales quoting tool <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/google-sheets-as-a-backend/#real-world-implementation-sales-quoting-tool\">#</a></h2>\n<p>Our client's pricing spreadsheets contained years of business expertise. Traditional development would have required translating this domain knowledge into code, then building a change management process for future updates.</p>\n<p>Instead, we preserved their existing workflow. The team continued refining pricing rules directly in the template spreadsheet. Sales agents used a streamlined web interface to input deal parameters. The system generated quotes using the same calculations the team had been perfecting for years, with reporting layouts also built in the spreadsheet. The web application exported these reports to PDF, displayed them to users, and sent them via email.</p>\n<p>The key benefit wasn't just faster delivery, it was keeping the calculation maintenance in the hands of the people who understood it best. When market conditions changed, the team could update pricing rules immediately without waiting for development cycles. Sales agents saw changes instantly through the same web interface.</p>\n<h2 id=\"when-this-approach-makes-sense\" tabindex=\"-1\">When this approach makes sense <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/google-sheets-as-a-backend/#when-this-approach-makes-sense\">#</a></h2>\n<p>This method works best when business experts already own complex calculations that change frequently. If your stakeholders spend significant time maintaining spreadsheet formulas and you need to make those calculations available to more users quickly, this approach can save months of development time.</p>\n<p>Consider this route when the traditional change-request-to-deployment cycle creates unacceptable delays for business teams, when calculations span multiple interconnected sheets, or when domain experts need direct control over business rules.</p>\n<p>Keep in mind the limitations: Google imposes API rate limits, each call adds latency, and this works best for moderate user volumes. You'll also need proper template permissions and authentication.</p>\n<h2 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/google-sheets-as-a-backend/#summary\">#</a></h2>\n<p>If your business experts already own the calculations and need to keep iterating them, building around their existing work often delivers faster than rebuilding it. The question isn't whether spreadsheets make good databases, it's whether preserving existing expertise makes more sense than recreating it.</p>\n<p>Sometimes the most elegant architecture is the one that works with human expertise instead of replacing it.</p>\n",
			"date_published": "2025-04-22T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/power-of-prototyping/",
			"url": "https://codingpipe.com/posts/power-of-prototyping/",
			"title": "Prototype first, production second",
			"content_html": "<p>When working with unfamiliar or complex codebases, building a quick prototype in a separate project can save you time and reduce risks before making production changes. With modern AI tools, you can create prototypes much faster than before.</p>\n<h2 id=\"why-build-a-prototype\" tabindex=\"-1\">Why Build a Prototype? <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/power-of-prototyping/#why-build-a-prototype\">#</a></h2>\n<p>A prototype gives you a safe space to experiment without breaking existing code:</p>\n<ul>\n<li><strong>Better understanding</strong> - Test your approach in isolation to fully grasp how it works</li>\n<li><strong>Lower risk</strong> - Find technical limitations and issues early, before touching production code</li>\n<li><strong>Accurate planning</strong> - Give better time estimates based on actual experience</li>\n<li><strong>Clearer communication</strong> - Show stakeholders something concrete instead of just explaining ideas</li>\n</ul>\n<h2 id=\"how-to-create-effective-prototypes\" tabindex=\"-1\">How to Create Effective Prototypes <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/power-of-prototyping/#how-to-create-effective-prototypes\">#</a></h2>\n<p>Create a dedicated prototype project structure:</p>\n<pre class=\"language-plaintext\" tabindex=\"0\"><code class=\"language-plaintext\">YourSolution/\n└── Prototypes/\n    ├── NewIntegration.Tests/\n    ├── EmailApiTrial/\n    ├── UIPlayground/\n    ├── RefactoringProposal02/\n    └── PerformanceBenchmarks/</code></pre>\n<p>Keep prototypes minimal, disposable, self-contained, and documented. Test only what you need to understand, don't worry about code quality, avoid production dependencies, and capture what you learned.</p>\n<p><strong>After prototyping, bring the concepts to production code, not the prototype code itself.</strong></p>\n<h2 id=\"just-start-prototyping\" tabindex=\"-1\">Just Start Prototyping <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/power-of-prototyping/#just-start-prototyping\">#</a></h2>\n<p>You don't need special approval to create a prototype. A few hours of prototyping can prevent weeks of problems. When stakeholders want fast delivery, prototyping actually saves time.</p>\n<p>The most effective developers make prototyping a regular practice. When faced with unfamiliar code, complex design decisions, or integration uncertainties, create a quick prototype first, then make production changes with confidence.</p>\n<h2 id=\"example-testing-a-new-sdk\" tabindex=\"-1\">Example: Testing a New SDK <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/power-of-prototyping/#example-testing-a-new-sdk\">#</a></h2>\n<p>Instead of immediately creating abstractions for an SDK you don't understand:</p>\n<ol>\n<li>Create a prototype project</li>\n<li>Use AI to generate scaffolding: &quot;Generate a C# test project that explores the key features of [SDK], including authentication, main API calls, and error handling&quot;</li>\n<li>Try different SDK features directly</li>\n<li>Test error cases and limits</li>\n<li>Understand how the SDK actually works</li>\n<li>Then design your production integration based on what you learned</li>\n</ol>\n<p>This lets you experiment freely before committing to a design in your production codebase.</p>\n<h2 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/power-of-prototyping/#summary\">#</a></h2>\n<p>Hours or days of prototyping can prevent weeks of production issues. Create separate projects where you can safely explore unfamiliar code and accelerate learning without risk.</p>\n",
			"date_published": "2025-04-21T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/complex-loops-to-transformation-pipelines/",
			"url": "https://codingpipe.com/posts/complex-loops-to-transformation-pipelines/",
			"title": "Refactoring complex loops with transformation pipelines",
			"content_html": "<p>Complex loops that validate data, apply business rules, and generate statistics in one place become increasingly difficult to maintain. Each new requirement risks breaking existing logic, and testing these interdependent operations becomes challenging.</p>\n<h2 id=\"the-problem-complex-loops\" tabindex=\"-1\">The problem: complex loops <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/complex-loops-to-transformation-pipelines/#the-problem-complex-loops\">#</a></h2>\n<p>Complex loops typically start simple but grow organically as developers add &quot;just one more condition&quot; rather than refactoring. The example below started as basic GPS point processing but expanded with additional steps for elevation tracking, speed calculation, and terrain classification. With each new feature, the code became harder to maintain:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token return-type class-name\">ActivitySummary</span> <span class=\"token function\">ProcessGpxData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>GpxPoint<span class=\"token punctuation\">></span></span> gpxPoints<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// State variables</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> totalDistance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> totalElevationGain <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>GpxPoint<span class=\"token punctuation\">></span></span> processedPoints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>GpxPoint<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> gpxPoints<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> point <span class=\"token operator\">=</span> gpxPoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> prevPoint <span class=\"token operator\">=</span> gpxPoints<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// Calculate distance and speed</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> segmentDistance <span class=\"token operator\">=</span> <span class=\"token function\">CalculateHaversineDistance</span><span class=\"token punctuation\">(</span>prevPoint<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> speed <span class=\"token operator\">=</span> <span class=\"token function\">CalculateSpeed</span><span class=\"token punctuation\">(</span>segmentDistance<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span>Timestamp <span class=\"token operator\">-</span> prevPoint<span class=\"token punctuation\">.</span>Timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n            <span class=\"token comment\">// Skip GPS errors</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>speed <span class=\"token operator\">></span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// Track elevation changes</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> elevationDelta <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span>Elevation <span class=\"token operator\">-</span> prevPoint<span class=\"token punctuation\">.</span>Elevation<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elevationDelta <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n                totalElevationGain <span class=\"token operator\">+=</span> elevationDelta<span class=\"token punctuation\">;</span>\n                \n            <span class=\"token comment\">// Update accumulated values</span>\n            totalDistance <span class=\"token operator\">+=</span> segmentDistance<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// Update point with calculated metrics</span>\n            point<span class=\"token punctuation\">.</span>SegmentDistance <span class=\"token operator\">=</span> segmentDistance<span class=\"token punctuation\">;</span>\n            point<span class=\"token punctuation\">.</span>Speed <span class=\"token operator\">=</span> speed<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// Apply elevation smoothing (simplified)</span>\n            point<span class=\"token punctuation\">.</span>SmoothedElevation <span class=\"token operator\">=</span> <span class=\"token function\">CalculateSmoothedElevation</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> gpxPoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// Classify terrain (multiple concerns mixed together)</span>\n            point<span class=\"token punctuation\">.</span>TerrainType <span class=\"token operator\">=</span> <span class=\"token function\">DetermineTerrainType</span><span class=\"token punctuation\">(</span>elevationDelta<span class=\"token punctuation\">,</span> speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Initialize first point</span>\n            point<span class=\"token punctuation\">.</span>SegmentDistance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            point<span class=\"token punctuation\">.</span>Speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            point<span class=\"token punctuation\">.</span>SmoothedElevation <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span>Elevation<span class=\"token punctuation\">;</span>\n            point<span class=\"token punctuation\">.</span>TerrainType <span class=\"token operator\">=</span> <span class=\"token string\">\"flat\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        processedPoints<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ActivitySummary</span> \n    <span class=\"token punctuation\">{</span>\n        ProcessedPoints <span class=\"token operator\">=</span> processedPoints<span class=\"token punctuation\">,</span>\n        TotalDistance <span class=\"token operator\">=</span> totalDistance<span class=\"token punctuation\">,</span>\n        TotalElevationGain <span class=\"token operator\">=</span> totalElevationGain\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>These loops:</p>\n<ul>\n<li>Do too many things at once instead of separating concerns</li>\n<li>Resist changes as dependencies are hidden and unclear</li>\n<li>Make unit testing difficult by coupling unrelated operations together</li>\n<li>Create excessive mental load for developers trying to understand them</li>\n</ul>\n<h2 id=\"the-solution-transformation-pipelines\" tabindex=\"-1\">The solution: transformation pipelines <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/complex-loops-to-transformation-pipelines/#the-solution-transformation-pipelines\">#</a></h2>\n<p>The solution is to break down complex processing into a transformation pipeline where each step has a single responsibility:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ActivitySummary</span> <span class=\"token function\">ProcessGpxData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>GpxPoint<span class=\"token punctuation\">></span></span> gpxPoints<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Convert raw GPS points to our working structure</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> intermediateData <span class=\"token operator\">=</span> <span class=\"token function\">MapToIntermediateData</span><span class=\"token punctuation\">(</span>gpxPoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> withSegmentMetrics <span class=\"token operator\">=</span> <span class=\"token function\">CalculateSegmentMetrics</span><span class=\"token punctuation\">(</span>intermediateData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> filteredPoints <span class=\"token operator\">=</span> <span class=\"token function\">FilterGpsGlitches</span><span class=\"token punctuation\">(</span>withSegmentMetrics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         \n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> withElevationData <span class=\"token operator\">=</span> <span class=\"token function\">ProcessElevationData</span><span class=\"token punctuation\">(</span>filteredPoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       \n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> smoothedData <span class=\"token operator\">=</span> <span class=\"token function\">ApplyDataSmoothing</span><span class=\"token punctuation\">(</span>withElevationData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           \n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> enrichedData <span class=\"token operator\">=</span> <span class=\"token function\">ClassifyTerrainTypes</span><span class=\"token punctuation\">(</span>smoothedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              \n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> processedPoints <span class=\"token operator\">=</span> <span class=\"token function\">CalculateAccumulatedTotals</span><span class=\"token punctuation\">(</span>enrichedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n    \n    <span class=\"token comment\">// Create final output with statistics</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">GenerateActivitySummary</span><span class=\"token punctuation\">(</span>processedPoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    \n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Each step has a single responsibility and can be implemented, tested, and modified independently.</strong> The key to making this work is an intermediate data structure that carries accumulated state between processing steps:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GpxIntermediateData</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Original data</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> Latitude <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> Longitude <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> Elevation <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> Timestamp <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// Derived/accumulated data</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> SegmentDistance <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> Speed <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> ElevationDelta <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsGpsGlitch <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> SmoothedElevation <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> TerrainType <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> AccumulatedDistance <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> AccumulatedElevationGain <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> AccumulatedElevationLoss <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"implementation-details\" tabindex=\"-1\">Implementation details <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/complex-loops-to-transformation-pipelines/#implementation-details\">#</a></h2>\n<p>Let's see how some of the pipeline steps would be implemented:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// Step 1: Map input to intermediate structure</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>GpxIntermediateData<span class=\"token punctuation\">></span></span> <span class=\"token function\">MapToIntermediateData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>GpxPoint<span class=\"token punctuation\">></span></span> gpxPoints<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> gpxPoints<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GpxIntermediateData</span>\n    <span class=\"token punctuation\">{</span>\n        Latitude <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>Latitude<span class=\"token punctuation\">,</span>\n        Longitude <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>Longitude<span class=\"token punctuation\">,</span>\n        Elevation <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>Elevation<span class=\"token punctuation\">,</span>\n        Timestamp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>Timestamp\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Step 2: Calculate metrics between adjacent points</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>GpxIntermediateData<span class=\"token punctuation\">></span></span> <span class=\"token function\">CalculateSegmentMetrics</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>GpxIntermediateData<span class=\"token punctuation\">></span></span> points<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> points<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> current <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> previous <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \n        current<span class=\"token punctuation\">.</span>SegmentDistance <span class=\"token operator\">=</span> <span class=\"token function\">CalculateHaversineDistance</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        current<span class=\"token punctuation\">.</span>Speed <span class=\"token operator\">=</span> <span class=\"token function\">CalculateSpeed</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>SegmentDistance<span class=\"token punctuation\">,</span> \n                                     current<span class=\"token punctuation\">.</span>Timestamp <span class=\"token operator\">-</span> previous<span class=\"token punctuation\">.</span>Timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        current<span class=\"token punctuation\">.</span>ElevationDelta <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>Elevation <span class=\"token operator\">-</span> previous<span class=\"token punctuation\">.</span>Elevation<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> points<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Step 3: Filter out GPS glitches based on unreasonable speeds</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>GpxIntermediateData<span class=\"token punctuation\">></span></span> <span class=\"token function\">FilterGpsGlitches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>GpxIntermediateData<span class=\"token punctuation\">></span></span> points<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Mark points with unreasonable speed as glitches</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> point <span class=\"token keyword\">in</span> points<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        point<span class=\"token punctuation\">.</span>IsGpsGlitch <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span>Speed <span class=\"token operator\">></span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 30 m/s threshold</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// Filter out glitches</span>\n    <span class=\"token keyword\">return</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>p<span class=\"token punctuation\">.</span>IsGpsGlitch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"benefits-of-the-pipeline-approach\" tabindex=\"-1\">Benefits of the pipeline approach <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/complex-loops-to-transformation-pipelines/#benefits-of-the-pipeline-approach\">#</a></h2>\n<ul>\n<li>Each step can be tested independently</li>\n<li>Changes affect only single functions, not the entire process</li>\n<li>Pipeline steps clearly document the transformation sequence</li>\n<li>Issues can be isolated to specific steps</li>\n<li>Functions can be reused in other systems</li>\n<li>New steps can be added without changing existing code</li>\n</ul>\n<p>Creating intermediate data structures improves code clarity, which is often worth the small performance cost in most applications. This same approach works for booking systems, commerce workflows, reporting pipelines, hardware sensor processing, or any multi-step data processing.</p>\n<h2 id=\"related-patterns-and-principles\" tabindex=\"-1\">Related patterns and principles <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/complex-loops-to-transformation-pipelines/#related-patterns-and-principles\">#</a></h2>\n<p>This approach leverages several established patterns:</p>\n<ul>\n<li><strong>Pipes and Filters.</strong> Connected processing steps with data flowing between them</li>\n<li><strong>Single Responsibility Principle.</strong> Each step has one reason to change</li>\n<li><strong>Map-Reduce.</strong> Map raw data to workable form, transform it, reduce to output</li>\n</ul>\n<p>Unlike distributed implementations of these patterns, our approach applies them at method level for everyday code.</p>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/complex-loops-to-transformation-pipelines/#conclusion\">#</a></h2>\n<p>When you spot a loop doing too much (tracking state, applying business rules, and formatting output simultaneously), consider refactoring it to a data transformation pipeline.</p>\n<p>Break problems into subproblems, solve them independently, then merge them in the final solution. This approach improves code quality and makes future maintenance easier.</p>\n",
			"date_published": "2025-04-20T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/serilog-correlationid-background-task/",
			"url": "https://codingpipe.com/posts/serilog-correlationid-background-task/",
			"title": "Serilog Correlation IDs for background tasks in .NET Core",
			"content_html": "<p>Background tasks that log without correlation IDs create debugging nightmares. When multiple execution cycles run concurrently, their logs interleave and become impossible to trace.</p>\n<p>Here's how to correlate each execution cycle with a unique ID:</p>\n<h2 id=\"solution\" tabindex=\"-1\">Solution <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/serilog-correlationid-background-task/#solution\">#</a></h2>\n<p>Create a logger extension for correlation context:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggerExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ILogger</span> <span class=\"token function\">ForExecutionContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">ILogger</span> baseLogger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> baseLogger<span class=\"token punctuation\">.</span><span class=\"token function\">ForContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CorrelationId\"</span><span class=\"token punctuation\">,</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"N\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Update your background service:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBackgroundTask</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BackgroundService</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger</span> _serviceLogger <span class=\"token operator\">=</span> Log<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ForContext</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MyBackgroundTask<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> stoppingToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _serviceLogger<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Background service started\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stoppingToken<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> logger <span class=\"token operator\">=</span> _serviceLogger<span class=\"token punctuation\">.</span><span class=\"token function\">ForExecutionContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting background task cycle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">await</span> <span class=\"token function\">DoWorkAsync</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Completed background task cycle successfully\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                logger<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error executing background task\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> stoppingToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">DoWorkAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger</span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting to process items\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Processed {ItemCount} items successfully\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">Debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Finalizing processing cycle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Configure your output template to include correlation IDs:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Serilog\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"WriteTo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Console\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"Args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"outputTemplate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[{Timestamp:HH:mm:ss} {Level:u3}] {CorrelationId} {Message:lj}{NewLine}{Exception}\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"result\" tabindex=\"-1\">Result <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/serilog-correlationid-background-task/#result\">#</a></h2>\n<p>Instead of interleaved chaos:</p>\n<pre class=\"language-plain\" tabindex=\"0\"><code class=\"language-plain\">[10:20:00 INF] Starting background task cycle\n[10:20:00 INF] Starting to process items\n[10:20:00 INF] Processed 5 items successfully\n[10:20:00 INF] Starting background task cycle\n[10:20:00 INF] Starting to process items\n[10:20:00 INF] Completed background task cycle successfully</code></pre>\n<p>You get traceable execution cycles:</p>\n<pre class=\"language-plain\" tabindex=\"0\"><code class=\"language-plain\">[10:20:00 INF] a42f1e3a Starting background task cycle\n[10:20:00 INF] a42f1e3a Starting to process items\n[10:20:00 INF] a42f1e3a Processed 5 items successfully\n[10:20:00 INF] 7b2c1e3b Starting background task cycle\n[10:20:00 INF] 7b2c1e3b Starting to process items\n[10:20:00 INF] a42f1e3a Completed background task cycle successfully</code></pre>\n<h2 id=\"why-this-works\" tabindex=\"-1\">Why This Works <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/serilog-correlationid-background-task/#why-this-works\">#</a></h2>\n<p>Creating the correlation context at the cycle level (not per method) maintains the trace through the entire execution, including exceptions that bubble up. Short correlation IDs keep logs readable while providing unique identification for each run.</p>\n",
			"date_published": "2025-03-23T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/use-enums-over-booleans/",
			"url": "https://codingpipe.com/posts/use-enums-over-booleans/",
			"title": "Use enums over booleans for status fields",
			"content_html": "<p>In business applications, we often need to track the state of entities - users, orders, payments, etc. I've encountered this maintenance issue across multiple projects: boolean status fields create ambiguity and become difficult to extend. Here's why enums provide better long-term maintainability.</p>\n<h2 id=\"the-meaning-of-false-is-not-always-clear\" tabindex=\"-1\">The meaning of FALSE is not always clear <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/use-enums-over-booleans/#the-meaning-of-false-is-not-always-clear\">#</a></h2>\n<p>The meaning of <strong>false</strong> is not always clear when using booleans for status fields.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsActive <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>What does it mean when <strong>IsActive</strong> is <strong>false</strong>? Does that mean the user has been banned? Or is the email not yet verified? Or an admin disabled the login for that user? Enums provide better clarity and flexibility.</p>\n<p>Here's the refactored version:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">UserStatus</span>\n<span class=\"token punctuation\">{</span>\n  Active<span class=\"token punctuation\">,</span>\n  PendingVerification\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">UserStatus</span> Status <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now you know that the user can be in active or pending verification state. This approach makes the meaning of the user's states obvious.</p>\n<h2 id=\"adding-states-becomes-complex-with-booleans\" tabindex=\"-1\">Adding states becomes complex with booleans <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/use-enums-over-booleans/#adding-states-becomes-complex-with-booleans\">#</a></h2>\n<p>This ambiguity problem gets worse when you need to expand beyond two states. Adding a third state like &quot;Banned&quot; with booleans becomes problematic:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsActive <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>  <span class=\"token comment\">// from the original example</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsBanned <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>  <span class=\"token comment\">// newly added state for handling banned users</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This approach creates four possible combinations, but only two are valid. Managing these relationships becomes complicated quickly. Can an active user be banned? What happens then - what field takes precedence?</p>\n<p>Additionally, what about existing data? You need to change the DB schema and migrate data to the new schema, which may create downtime or technical hurdles, especially at scale.</p>\n<p>With enums, adding a new state is simple:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">UserStatus</span>\n<span class=\"token punctuation\">{</span>\n  Active<span class=\"token punctuation\">,</span>\n  PendingVerification<span class=\"token punctuation\">,</span>\n  Banned  <span class=\"token comment\">// new state</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"rules-of-thumb\" tabindex=\"-1\">Rules of thumb <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/use-enums-over-booleans/#rules-of-thumb\">#</a></h2>\n<p>Here are some guidelines I follow:</p>\n<ol>\n<li>Start with an enum if there's any chance you'll need more than two states in the future.</li>\n<li>Use boolean flags only for clear yes/no scenarios that are unlikely to change.</li>\n<li>Before adding a boolean flag, ask yourself: &quot;Could this need more states down the road?&quot;</li>\n</ol>\n<p>This pattern works well for order statuses (Draft, Pending, Shipped, Delivered), payment states, and any workflow where entities progress through multiple stages. Using enums early for potentially expandable status fields saves significant refactoring effort later.</p>\n",
			"date_published": "2024-10-30T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/testing-problemdetails-in-aspnetcore-integration-tests/",
			"url": "https://codingpipe.com/posts/testing-problemdetails-in-aspnetcore-integration-tests/",
			"title": "Testing ProblemDetails responses in ASP.NET Core",
			"content_html": "<p>When building APIs that return structured error responses using ProblemDetails, you need integration tests that validate both the HTTP status codes and the error response structure. I've found that testing only status codes misses important validation errors and business rule violations that clients depend on.</p>\n<p>To read more on <strong>ProblemDetails</strong>, check <a href=\"https://www.rfc-editor.org/rfc/rfc9457\">RFC9457</a> and <a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-8.0#problem-details\">ProblemDetails in ASP.NET Core</a>.</p>\n<h2 id=\"setting-up-the-test-dependencies\" tabindex=\"-1\">Setting up the test dependencies <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/testing-problemdetails-in-aspnetcore-integration-tests/#setting-up-the-test-dependencies\">#</a></h2>\n<p>First, ensure you have the necessary NuGet packages installed in your test project:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Microsoft.AspNetCore.Mvc.Testing\ndotnet <span class=\"token function\">add</span> package xunit\ndotnet <span class=\"token function\">add</span> package Shouldly\ndotnet <span class=\"token function\">add</span> package Flurl.Http</code></pre>\n<h2 id=\"creating-the-test-fixture\" tabindex=\"-1\">Creating the test fixture <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/testing-problemdetails-in-aspnetcore-integration-tests/#creating-the-test-fixture\">#</a></h2>\n<p>Implement the test fixture that starts the API project in memory within the integration tests:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Mvc<span class=\"token punctuation\">.</span>Testing</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Flurl<span class=\"token punctuation\">.</span>Http</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Playground<span class=\"token punctuation\">.</span>WebApi</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Playground<span class=\"token punctuation\">.</span>IntegrationTests</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiTestFixture</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">WebApplicationFactory<span class=\"token punctuation\">&lt;</span>Program<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IAsyncLifetime</span></span> \n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">FlurlClient</span> _client<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ApiTestFixture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n      _client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FlurlClient</span><span class=\"token punctuation\">(</span><span class=\"token function\">CreateClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">FlurlClient</span> Client <span class=\"token operator\">=></span> _client<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">InitializeAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Perform any initialization here if needed</span>\n      <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">DisposeAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n      _client<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">await</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">DisposeAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"writing-the-test-cases\" tabindex=\"-1\">Writing the test cases <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/testing-problemdetails-in-aspnetcore-integration-tests/#writing-the-test-cases\">#</a></h2>\n<p>Now you can write test cases that validate both successful responses and ProblemDetails error responses:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Flurl<span class=\"token punctuation\">.</span>Http</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Mvc</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Shouldly</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Playground<span class=\"token punctuation\">.</span>IntegrationTests<span class=\"token punctuation\">.</span>ApiTests</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentTests</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IClassFixture<span class=\"token punctuation\">&lt;</span>ApiTestFixture<span class=\"token punctuation\">></span></span></span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">FlurlClient</span> _client<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> BaseUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost/api\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">StudentTests</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApiTestFixture</span> fixture<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      _client <span class=\"token operator\">=</span> fixture<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IFlurlRequest</span> <span class=\"token function\">Request</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> url<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _client<span class=\"token punctuation\">.</span><span class=\"token function\">Request</span><span class=\"token punctuation\">(</span>BaseUrl <span class=\"token operator\">+</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Create_student_with_valid_input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Arrange</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> studentData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> \n      <span class=\"token punctuation\">{</span>\n        FirstName <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n        LastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span>\n        EnrollmentDate <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Act</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/students\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PostJsonAsync</span><span class=\"token punctuation\">(</span>studentData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Assert</span>\n      response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> HttpStatusCode<span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Create_student_fails_when_first_name_is_not_provided</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Arrange</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> studentWithEmptyFirstName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> \n      <span class=\"token punctuation\">{</span>\n        FirstName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        LastName <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span>\n        EnrollmentDate <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Act</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exception <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Should<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ThrowAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FlurlHttpException<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/students\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PostJsonAsync</span><span class=\"token punctuation\">(</span>studentWithEmptyFirstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Assert</span>\n      exception<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> HttpStatusCode<span class=\"token punctuation\">.</span>BadRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> errorResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> exception<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetResponseJsonAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ValidationProblemDetails<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      errorResponse<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldNotBeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      errorResponse<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>HttpStatusCode<span class=\"token punctuation\">.</span>BadRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      errorResponse<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One or more validation errors occurred.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      errorResponse<span class=\"token punctuation\">.</span>Errors<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldContainKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FirstName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      errorResponse<span class=\"token punctuation\">.</span>Errors<span class=\"token punctuation\">[</span><span class=\"token string\">\"FirstName\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ShouldContain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The FirstName field is required.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Create_student_fails_with_submitted_reserved_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Arrange</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> studentWithReservedName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> \n      <span class=\"token punctuation\">{</span>\n        FirstName <span class=\"token operator\">=</span> <span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span>\n        LastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Bond\"</span><span class=\"token punctuation\">,</span>\n        EnrollmentDate <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Act</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exception <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Should<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ThrowAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FlurlHttpException<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/students\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PostJsonAsync</span><span class=\"token punctuation\">(</span>studentWithReservedName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Assert</span>\n      exception<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> HttpStatusCode<span class=\"token punctuation\">.</span>BadRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> problemDetails <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> exception<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetResponseJsonAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ValidationProblemDetails<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      problemDetails<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldNotBeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      problemDetails<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>HttpStatusCode<span class=\"token punctuation\">.</span>BadRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      problemDetails<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot create a student named James Bond because it's a reserved name.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Create_student_fails_when_EnrollmentDate_is_too_far_in_the_past</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Arrange</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tooOldDate <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">.</span><span class=\"token function\">AddYears</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 years ago</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> studentWithTooOldEnrollmentDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> \n      <span class=\"token punctuation\">{</span>\n        FirstName <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n        LastName <span class=\"token operator\">=</span> <span class=\"token string\">\"Doe\"</span><span class=\"token punctuation\">,</span>\n        EnrollmentDate <span class=\"token operator\">=</span> tooOldDate\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Act</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exception <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Should<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ThrowAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FlurlHttpException<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/students\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PostJsonAsync</span><span class=\"token punctuation\">(</span>studentWithTooOldEnrollmentDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Assert</span>\n      exception<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> HttpStatusCode<span class=\"token punctuation\">.</span>BadRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> problemDetails <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> exception<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetResponseJsonAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ValidationProblemDetails<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      problemDetails<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldNotBeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      problemDetails<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>HttpStatusCode<span class=\"token punctuation\">.</span>BadRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      problemDetails<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One or more validation errors occurred.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      problemDetails<span class=\"token punctuation\">.</span>Errors<span class=\"token punctuation\">.</span><span class=\"token function\">ShouldContainKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EnrollmentDate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      problemDetails<span class=\"token punctuation\">.</span>Errors<span class=\"token punctuation\">[</span><span class=\"token string\">\"EnrollmentDate\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ShouldContain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enrollment date cannot be more than 500 days in the past.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>This approach validates both the HTTP status codes and the structure of ProblemDetails error responses. Testing the complete error response structure helps catch issues where your API returns the wrong status code or malformed error details that break client error handling.</p>\n",
			"date_published": "2024-08-10T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/ssh-windows-snippets/",
			"url": "https://codingpipe.com/posts/ssh-windows-snippets/",
			"title": "SSH tips on Windows",
			"content_html": "<p>Windows 11 includes an OpenSSH client b default. You can use it directly from the PowerShell or command prompt terminal.</p>\n<h2 id=\"connecting-to-a-linux-server\" tabindex=\"-1\">Connecting to a Linux server <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#connecting-to-a-linux-server\">#</a></h2>\n<p>Open a terminal and run the following command:</p>\n<pre class=\"language-plaintext\" tabindex=\"0\"><code class=\"language-plaintext\">ssh username@12.34.56.78</code></pre>\n<p>Replace <code>username</code> with your Linux server username and <code>12.34.56.78</code> with the server’s IP address.\nThe first time you connect, you’ll be prompted to accept the host key. After that, enter your password to log in.\nTo log out, run the <code>exit</code> command or press <code>Ctrl+D</code>.</p>\n<p>If your Linux server has a different SSH port, let's say 10322, use the <code>-p</code> flag:</p>\n<pre class=\"language-plaintext\" tabindex=\"0\"><code class=\"language-plaintext\">ssh username@12.34.56.78 -p 10322</code></pre>\n<h2 id=\"downloading-uploading-files-between-your-windows-client-and-a-linux-server\" tabindex=\"-1\">Downloading/uploading files between your Windows client and a Linux server <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#downloading-uploading-files-between-your-windows-client-and-a-linux-server\">#</a></h2>\n<p>Use <a href=\"https://winscp.net/eng/download.php\">WinSCP</a> for that.</p>\n<h2 id=\"tools\" tabindex=\"-1\">Tools <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#tools\">#</a></h2>\n<ul>\n<li><a href=\"https://www.putty.org/\">PuTTY</a></li>\n<li><a href=\"https://winscp.net/eng/download.php\">WinSCP</a></li>\n<li><a href=\"https://www.puttygen.com/\">PuTTYgen</a></li>\n</ul>\n<h2 id=\"additional-resources\" tabindex=\"-1\">Additional Resources <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#additional-resources\">#</a></h2>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui\">https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui</a></li>\n<li><a href=\"https://docs.bitnami.com/aws/faq/get-started/access-ssh-tunnel/\">https://docs.bitnami.com/aws/faq/get-started/access-ssh-tunnel/</a></li>\n<li><a href=\"https://docs.vultr.com/port-forwarding-and-proxying-using-openssh\">https://docs.vultr.com/port-forwarding-and-proxying-using-openssh</a></li>\n</ul>\n<h2 id=\"managing-ssh-keys-with-openssh-and-bitwarden\" tabindex=\"-1\">Managing SSH Keys with OpenSSH and Bitwarden <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#managing-ssh-keys-with-openssh-and-bitwarden\">#</a></h2>\n<h3 id=\"1-set-up-your-environment\" tabindex=\"-1\">1. Set up your environment <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#1-set-up-your-environment\">#</a></h3>\n<p>Create the SSH directory if it doesn't exist:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">mkdir <span class=\"token operator\">-</span>p <span class=\"token variable\">$env</span>:USERPROFILE\\<span class=\"token punctuation\">.</span>ssh</code></pre>\n<h3 id=\"2-generate-ssh-key-pair\" tabindex=\"-1\">2. Generate SSH Key Pair <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#2-generate-ssh-key-pair\">#</a></h3>\n<ol>\n<li>Open PowerShell and generate an Ed25519 key (recommended):</li>\n</ol>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">ssh-keygen <span class=\"token operator\">-</span>t ed25519 <span class=\"token operator\">-</span>C <span class=\"token string\">\"your_email@example.com\"</span></code></pre>\n<p>Or RSA if required:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">ssh-keygen <span class=\"token operator\">-</span>t rsa <span class=\"token operator\">-</span>b 4096 <span class=\"token operator\">-</span>C <span class=\"token string\">\"your_email@example.com\"</span></code></pre>\n<ol start=\"2\">\n<li>When prompted:\n<ul>\n<li>Save to default location (<code>%USERPROFILE%\\.ssh\\id_ed25519</code> or <code>id_rsa</code>)</li>\n<li>Set a strong passphrase</li>\n</ul>\n</li>\n</ol>\n<p>This creates two files:</p>\n<ul>\n<li>Private key: <code>id_ed25519</code> (no extension)</li>\n<li>Public key: <code>id_ed25519.pub</code></li>\n</ul>\n<h3 id=\"3-store-in-bitwarden\" tabindex=\"-1\">3. Store in Bitwarden <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#3-store-in-bitwarden\">#</a></h3>\n<ol>\n<li>Open Bitwarden and create a new Secure Note</li>\n<li>Title: &quot;SSH Key - [Purpose]&quot; (e.g., &quot;SSH Key - Work Laptop 2024&quot;)</li>\n<li>Add attachments:\n<ul>\n<li>Browse to <code>%USERPROFILE%\\.ssh\\</code></li>\n<li>Attach both <code>id_ed25519</code> and <code>id_ed25519.pub</code></li>\n</ul>\n</li>\n<li>Add to notes:</li>\n</ol>\n<pre class=\"language-plaintext\" tabindex=\"0\"><code class=\"language-plaintext\">Server: example.com\nUsername: myuser\nKey Type: Ed25519\nCreated: [Date]\nPassphrase: [your-passphrase]\n\nPublic Key:\n[paste contents of id_ed25519.pub here]\n\nUsage:\n1. Download private key\n2. Save to ~/.ssh/id_ed25519\n3. Set permissions: chmod 600 ~/.ssh/id_ed25519</code></pre>\n<ol start=\"5\">\n<li>Add tags: &quot;ssh&quot;, &quot;credentials&quot;, &quot;work&quot;</li>\n<li>Save</li>\n</ol>\n<h3 id=\"4-deploy-to-server\" tabindex=\"-1\">4. Deploy to Server <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#4-deploy-to-server\">#</a></h3>\n<ol>\n<li>Copy your public key to the server:</li>\n</ol>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token comment\"># Method 1: Using ssh-copy-id (if available)</span>\nssh-<span class=\"token function\">copy-id</span> <span class=\"token operator\">-</span>i ~<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>ssh/id_ed25519<span class=\"token punctuation\">.</span>pub username@example<span class=\"token punctuation\">.</span>com\n\n<span class=\"token comment\"># Method 2: Manual copy</span>\n<span class=\"token function\">type</span> <span class=\"token variable\">$env</span>:USERPROFILE\\<span class=\"token punctuation\">.</span>ssh\\id_ed25519<span class=\"token punctuation\">.</span>pub <span class=\"token punctuation\">|</span> ssh username@example<span class=\"token punctuation\">.</span>com <span class=\"token string\">\"mkdir -p ~/.ssh &amp;&amp; cat >> ~/.ssh/authorized_keys\"</span></code></pre>\n<ol start=\"2\">\n<li>Verify the connection:</li>\n</ol>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">ssh <span class=\"token operator\">-</span>i <span class=\"token variable\">$env</span>:USERPROFILE\\<span class=\"token punctuation\">.</span>ssh\\id_ed25519 username@example<span class=\"token punctuation\">.</span>com</code></pre>\n<h3 id=\"5-recovery-process\" tabindex=\"-1\">5. Recovery Process <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#5-recovery-process\">#</a></h3>\n<p>If you need to recover access from a new device:</p>\n<ol>\n<li>Install OpenSSH client if not present:</li>\n</ol>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token function\">Add-WindowsCapability</span> <span class=\"token operator\">-</span>Online <span class=\"token operator\">-</span>Name OpenSSH<span class=\"token punctuation\">.</span>Client~~~~0<span class=\"token punctuation\">.</span>0<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>0</code></pre>\n<ol start=\"2\">\n<li>Create SSH directory:</li>\n</ol>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">mkdir <span class=\"token operator\">-</span>p <span class=\"token variable\">$env</span>:USERPROFILE\\<span class=\"token punctuation\">.</span>ssh</code></pre>\n<ol start=\"3\">\n<li>Download private key from Bitwarden</li>\n<li>Save as <code>%USERPROFILE%\\.ssh\\id_ed25519</code></li>\n<li>Set correct permissions:</li>\n</ol>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">icacls <span class=\"token string\">\"%USERPROFILE%\\.ssh\\id_ed25519\"</span> <span class=\"token operator\">/</span>inheritance:r <span class=\"token operator\">/</span>grant:r <span class=\"token string\">\"%USERNAME%\"</span>:<span class=\"token string\">\"F\"</span></code></pre>\n<ol start=\"6\">\n<li>Test connection:</li>\n</ol>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">ssh <span class=\"token operator\">-</span>i <span class=\"token variable\">$env</span>:USERPROFILE\\<span class=\"token punctuation\">.</span>ssh\\id_ed25519 username@example<span class=\"token punctuation\">.</span>com</code></pre>\n<ol start=\"7\">\n<li>After recovery, generate new keys and update servers</li>\n</ol>\n<h3 id=\"connecting-to-servers-with-ssh-keys\" tabindex=\"-1\">Connecting to Servers with SSH Keys <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/ssh-windows-snippets/#connecting-to-servers-with-ssh-keys\">#</a></h3>\n<ol>\n<li>Basic connection with default key location:</li>\n</ol>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">ssh username@192<span class=\"token punctuation\">.</span>168<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>100</code></pre>\n<ol start=\"2\">\n<li>Specify a different port (e.g., 10322):</li>\n</ol>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">ssh <span class=\"token operator\">-</span>p 10322 username@192<span class=\"token punctuation\">.</span>168<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>100</code></pre>\n<ol start=\"3\">\n<li>Explicitly specify which key to use:</li>\n</ol>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">ssh <span class=\"token operator\">-</span>i <span class=\"token variable\">$env</span>:USERPROFILE\\<span class=\"token punctuation\">.</span>ssh\\id_ed25519 username@192<span class=\"token punctuation\">.</span>168<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">.</span>100</code></pre>\n<ol start=\"4\">\n<li>For multiple servers/keys, create a config file at <code>%USERPROFILE%\\.ssh\\config</code>:</li>\n</ol>\n<pre class=\"language-plaintext\" tabindex=\"0\"><code class=\"language-plaintext\">Host myserver1\n    HostName 192.168.1.100\n    User username\n    Port 22\n    IdentityFile ~/.ssh/id_ed25519\n\nHost myserver2\n    HostName 192.168.1.200\n    User otheruser\n    Port 10322\n    IdentityFile ~/.ssh/id_rsa</code></pre>\n<p>Then connect using the alias:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">ssh myserver1</code></pre>\n<blockquote>\n<p>💡 Tip: After adding your key to a server, you won't need to enter a password. You'll only need the key's passphrase (if you set one).</p>\n</blockquote>\n",
			"date_published": "2024-03-31T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/rabbitmq-cheatsheet/",
			"url": "https://codingpipe.com/posts/rabbitmq-cheatsheet/",
			"title": "RabbitMQ Command Snippets",
			"content_html": "<h2 id=\"installing-rabbitmq-in-windows-using-chocolatey\" tabindex=\"-1\">Installing RabbitMQ in Windows using Chocolatey <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/rabbitmq-cheatsheet/#installing-rabbitmq-in-windows-using-chocolatey\">#</a></h2>\n<p>Start PowerShell as Administrator and run this command, which installs RabbitMQ including the management plugin at port 15672:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">choco install rabbitmq <span class=\"token operator\">--</span>version 3<span class=\"token punctuation\">.</span>12<span class=\"token punctuation\">.</span>10</code></pre>\n<p><em>If you have issues using the RabbitMQ CLI, please refer to the &quot;Troubleshooting common issues&quot; section of this post.</em></p>\n<h2 id=\"using-rabbitmqctl\" tabindex=\"-1\">Using rabbitmqctl <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/rabbitmq-cheatsheet/#using-rabbitmqctl\">#</a></h2>\n<p>Enable the management plugin:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">rabbitmq-plugins enable rabbitmq_management</code></pre>\n<p>Create user as administrator with permissions to all virtual hosts:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token comment\"># Create new user</span>\nrabbitmqctl add_user username password123\n\n<span class=\"token comment\"># Make user an administrator</span>\nrabbitmqctl set_user_tags username administrator\n\n<span class=\"token comment\"># Grant permissions for all vhosts</span>\nrabbitmqctl set_permissions <span class=\"token operator\">-</span>p <span class=\"token operator\">/</span> username <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span></code></pre>\n<p>List users:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">rabbitmqctl list_users</code></pre>\n<p>Grants permissions for a user in a virtual host:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">rabbitmqctl set_permissions <span class=\"token operator\">-</span>p <span class=\"token string\">\"custom-vhost\"</span> <span class=\"token string\">\"username\"</span> <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span></code></pre>\n<p>Revoke permissions of a user in a virtual host:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">rabbitmqctl clear_permissions <span class=\"token operator\">-</span>p <span class=\"token string\">\"custom-vhost\"</span> <span class=\"token string\">\"username\"</span></code></pre>\n<p>List all virtual hosts:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">rabbitmqctl list_vhosts</code></pre>\n<p>Create a vhost:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">rabbitmqctl add_vhost <span class=\"token string\">\"custom-vhost\"</span></code></pre>\n<p>Delete a vhost:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">rabbitmqctl delete_vhost <span class=\"token string\">\"custom-vhost\"</span></code></pre>\n<h2 id=\"troubleshooting-common-issues-with-rabbitmq-cli\" tabindex=\"-1\">Troubleshooting common issues with RabbitMQ CLI <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/rabbitmq-cheatsheet/#troubleshooting-common-issues-with-rabbitmq-cli\">#</a></h2>\n<p>If RabbitMQ CLI tools are not accessible in your command prompt, add it to PATH and refresh the session:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token comment\"># First, check if rabbitmq CLI tools are accessible</span>\nrabbitmqctl version\n\n<span class=\"token comment\"># If rabbitmqctl is not found, then add it to PATH and refresh the session</span>\n<span class=\"token keyword\">Function</span> <span class=\"token function\">Set-PathVariable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">param</span><span class=\"token punctuation\">(</span>\n        <span class=\"token namespace\">[string]</span><span class=\"token variable\">$AddPath</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Test-Path</span> <span class=\"token variable\">$AddPath</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$regexAddPath</span> = <span class=\"token namespace\">[regex]</span>::Escape<span class=\"token punctuation\">(</span><span class=\"token variable\">$AddPath</span><span class=\"token punctuation\">)</span>\n        <span class=\"token variable\">$arrPath</span> = <span class=\"token variable\">$env</span>:Path <span class=\"token operator\">-</span>split <span class=\"token string\">';'</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Where-Object</span> <span class=\"token punctuation\">{</span><span class=\"token variable\">$_</span> <span class=\"token operator\">-notMatch</span> <span class=\"token string\">\"^<span class=\"token variable\">$regexAddPath</span>\\\\?\"</span><span class=\"token punctuation\">}</span>\n        <span class=\"token variable\">$envPathToSet</span> = <span class=\"token punctuation\">(</span><span class=\"token variable\">$arrPath</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$AddPath</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-join</span> <span class=\"token string\">';'</span>\n\t\t<span class=\"token namespace\">[Environment]</span>::SetEnvironmentVariable<span class=\"token punctuation\">(</span><span class=\"token string\">\"Path\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$envPathToSet</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Machine\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">Throw</span> <span class=\"token string\">\"'<span class=\"token variable\">$AddPath</span>' is not a valid path.\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Set-PathVariable</span> <span class=\"token operator\">-</span>AddPath <span class=\"token string\">\"C:\\Program Files\\RabbitMQ Server\\rabbitmq_server-3.12.10\\sbin\"</span>\n\nrefreshenv\n\n<span class=\"token comment\"># Now this should work</span>\nrabbitmqctl version</code></pre>\n<p>Fix the RabbitMQ Erland cookie mismatch (https://www.rabbitmq.com/cli.html#erlang-cookie):</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token function\">Copy-Item</span> <span class=\"token operator\">-</span>Path C:\\Windows\\System32\\config\\systemprofile\\<span class=\"token punctuation\">.</span>erlang<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">-</span>Destination C:\\Users\\<span class=\"token variable\">$Env</span>:UserName <span class=\"token operator\">-</span>force</code></pre>\n<p>Troubleshooting commands:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">rabbitmqctl report\nrabbitmqctl status</code></pre>\n<p>Test RabbitMQ aliveness with the default local user 'guest/guest':</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token function\">iwr</span> <span class=\"token operator\">-</span>Uri <span class=\"token string\">'http://localhost:15672/api/aliveness-test/%2F'</span> <span class=\"token operator\">-</span>Headers @<span class=\"token punctuation\">{</span> Authorization = <span class=\"token string\">\"Basic \"</span><span class=\"token operator\">+</span> <span class=\"token namespace\">[System.Convert]</span>::ToBase64String<span class=\"token punctuation\">(</span><span class=\"token namespace\">[System.Text.Encoding]</span>::ASCII<span class=\"token punctuation\">.</span>GetBytes<span class=\"token punctuation\">(</span><span class=\"token string\">\"guest:guest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span>UseBasicParsing</code></pre>\n<h2 id=\"additional-resources\" tabindex=\"-1\">Additional Resources <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/rabbitmq-cheatsheet/#additional-resources\">#</a></h2>\n<ul>\n<li>https://www.rabbitmq.com/docs/cli</li>\n</ul>\n",
			"date_published": "2024-02-29T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/postgresql-cheatsheet/",
			"url": "https://codingpipe.com/posts/postgresql-cheatsheet/",
			"title": "PostgreSQL Query and Command Snippets",
			"content_html": "<p>Set the PostgreSQL environment variables in your PowerShell session, so you won't need to add them to every single CLI command in that same session:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token comment\"># Export PostgreSQL variables</span>\n<span class=\"token variable\">$env</span>:PGHOST = <span class=\"token string\">\"localhost\"</span>\n<span class=\"token variable\">$env</span>:PGPORT = 5432\n<span class=\"token variable\">$env</span>:PGUSER = <span class=\"token string\">\"postgres\"</span>\n<span class=\"token variable\">$env</span>:PGPASSWORD = <span class=\"token string\">\"postgres\"</span>\n\n<span class=\"token comment\"># So now, you won't need to add this part in the commands:</span>\n<span class=\"token comment\"># --host localhost --port 5432 --username \"postgres\"</span></code></pre>\n<h2 id=\"backup-command\" tabindex=\"-1\">Backup command <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/postgresql-cheatsheet/#backup-command\">#</a></h2>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">pg_dump <span class=\"token operator\">--</span>format custom <span class=\"token operator\">--</span>no-owner <span class=\"token operator\">--</span>no-privileges <span class=\"token operator\">--</span>no-acl <span class=\"token operator\">--</span>host localhost <span class=\"token operator\">--</span>port 5432 <span class=\"token operator\">--</span>username <span class=\"token string\">\"postgres\"</span> <span class=\"token operator\">--</span>dbname mydb <span class=\"token operator\">--</span>file <span class=\"token string\">\"C:/backups/mydb.backup\"</span></code></pre>\n<h2 id=\"restore-command\" tabindex=\"-1\">Restore command <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/postgresql-cheatsheet/#restore-command\">#</a></h2>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token comment\"># Step 1: Create the database if it doesn't exist</span>\npsql <span class=\"token operator\">--</span>host localhost <span class=\"token operator\">--</span>port 5432 <span class=\"token operator\">--</span>username <span class=\"token string\">\"postgres\"</span> <span class=\"token operator\">--</span>dbname postgres <span class=\"token operator\">-</span>c <span class=\"token string\">\"CREATE DATABASE mydb WITH OWNER postgres ENCODING 'UTF8';\"</span>\n\n<span class=\"token comment\"># Step 2: Drop the public schema in the target database</span>\npsql <span class=\"token operator\">--</span>host localhost <span class=\"token operator\">--</span>port 5432 <span class=\"token operator\">--</span>username <span class=\"token string\">\"postgres\"</span> <span class=\"token operator\">--</span>dbname mydb <span class=\"token operator\">-</span>c <span class=\"token string\">\"DROP SCHEMA IF EXISTS public CASCADE;\"</span>\n\n<span class=\"token comment\"># Step 3: Restore the backup file</span>\npg_restore <span class=\"token operator\">--</span>format custom <span class=\"token operator\">--</span>no-owner <span class=\"token operator\">--</span>no-privileges <span class=\"token operator\">--</span>no-acl <span class=\"token operator\">--</span>clean <span class=\"token operator\">--</span><span class=\"token keyword\">if</span><span class=\"token operator\">-</span>exists <span class=\"token operator\">--</span><span class=\"token function\">exit-on</span><span class=\"token operator\">-</span>error <span class=\"token operator\">--</span>single-transaction <span class=\"token operator\">--</span>host localhost <span class=\"token operator\">--</span>port 5432 <span class=\"token operator\">--</span>username <span class=\"token string\">\"postgres\"</span> <span class=\"token operator\">--</span>dbname mydb <span class=\"token string\">\"D:/backups/mydb-2024-09-01-1150.backup\"</span></code></pre>\n<h2 id=\"other\" tabindex=\"-1\">Other <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/postgresql-cheatsheet/#other\">#</a></h2>\n<p>List all databases</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">psql <span class=\"token operator\">--</span>command \\l</code></pre>\n<p>Restore backup only in a specific schema:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">pg_restore <span class=\"token operator\">--</span>schema <span class=\"token string\">\"schema_name_1\"</span> <span class=\"token operator\">--</span>format custom <span class=\"token operator\">--</span>no-owner <span class=\"token operator\">--</span>no-privileges <span class=\"token operator\">--</span>single-transaction <span class=\"token operator\">--</span>dbname mydb <span class=\"token string\">\"C:/backups/mydb.backup\"</span></code></pre>\n<p>Create user:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">psql <span class=\"token operator\">--</span>command <span class=\"token string\">\"CREATE ROLE testuser NOSUPERUSER NOCREATEDB NOCREATEROLE NOINHERIT LOGIN NOREPLICATION NOBYPASSRLS PASSWORD 'testpsw';\"</span></code></pre>\n<p>List users:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">psql <span class=\"token operator\">--</span>command \\du</code></pre>\n<p>Create database:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">psql <span class=\"token operator\">--</span>command <span class=\"token string\">\"CREATE DATABASE mydb;\"</span>\n\npsql <span class=\"token operator\">--</span>command <span class=\"token string\">\"CREATE DATABASE mydb OWNER testuser ENCODING 'UTF8';\"</span></code></pre>\n<p>Create schema in database with authorization to another user</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">psql <span class=\"token operator\">--</span>command <span class=\"token string\">\"CREATE SCHEMA IF NOT EXISTS schema3 AUTHORIZATION testuser2;\"</span> mydb</code></pre>\n<p>List all schemas in database:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">psql <span class=\"token operator\">--</span>command \\dn mydb</code></pre>\n<p>Iterate over all databases in PowerShell:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token variable\">$databases</span> = psql <span class=\"token operator\">--</span>tuples-only <span class=\"token operator\">--</span>no-align <span class=\"token operator\">--</span>command <span class=\"token string\">\"SELECT datname FROM pg_database WHERE datistemplate = false\"</span>\n\n<span class=\"token comment\"># Iterate over all databases</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$db</span> in <span class=\"token variable\">$databases</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$db</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Write-Host</span> <span class=\"token string\">\"Processing database: <span class=\"token variable\">$db</span>\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"additional-references\" tabindex=\"-1\">Additional References <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/postgresql-cheatsheet/#additional-references\">#</a></h2>\n<ul>\n<li><a href=\"https://wiki.postgresql.org/wiki/Operations_cheat_sheet\">https://wiki.postgresql.org/wiki/Operations_cheat_sheet</a></li>\n<li><a href=\"https://www.commandprompt.com/education/postgresql-basic-psql-commands/\">https://www.commandprompt.com/education/postgresql-basic-psql-commands/</a></li>\n<li><a href=\"https://www.postgresqltutorial.com/postgresql-cheat-sheet/\">https://www.postgresqltutorial.com/postgresql-cheat-sheet/</a></li>\n<li><a href=\"https://severalnines.com/blog/performance-cheat-sheet-postgresql\">https://severalnines.com/blog/performance-cheat-sheet-postgresql</a></li>\n</ul>\n",
			"date_published": "2024-02-29T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/npm-nvm-cheatsheet/",
			"url": "https://codingpipe.com/posts/npm-nvm-cheatsheet/",
			"title": "NPM and NVM Command Snippets",
			"content_html": "<h2 id=\"installing-node-js-and-npm-in-windows-via-nvm-using-chocolatey\" tabindex=\"-1\">Installing node.js and npm in Windows via NVM using Chocolatey <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/npm-nvm-cheatsheet/#installing-node-js-and-npm-in-windows-via-nvm-using-chocolatey\">#</a></h2>\n<p>Start Command Prompt as Administrator and run this command:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">choco install nvm\n\nnvm install latest  <span class=\"token comment\"># or you can replace 'latest' with a specific node.js version </span></code></pre>\n<h2 id=\"using-nvm\" tabindex=\"-1\">Using NVM <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/npm-nvm-cheatsheet/#using-nvm\">#</a></h2>\n<p>Display the currently active version:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">nvm current</code></pre>\n<p>Install node.js in specific version or in 'latest':</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">nvm install &lt;version></code></pre>\n<p>List the node.js installations you can choose in <code>nvm use</code>:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">nvm list</code></pre>\n<p>Switch to use the specified version:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">nvm use &lt;version></code></pre>\n<p>Examples: switch to use different versions:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">nvm use 21<span class=\"token punctuation\">.</span>6<span class=\"token punctuation\">.</span>2\nnpm install     <span class=\"token comment\"># uses the 21.6.2 version</span>\nnvm use 18<span class=\"token punctuation\">.</span>16<span class=\"token punctuation\">.</span>0\nnpm install     <span class=\"token comment\"># uses the 18.16.0 version</span>\nnvm use latest\nnpm install     <span class=\"token comment\"># uses the latest version</span></code></pre>\n<h2 id=\"using-npm\" tabindex=\"-1\">Using NPM <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/npm-nvm-cheatsheet/#using-npm\">#</a></h2>\n<p>Install everything in project's <code>package.json</code>:</p>\n<pre><code>npm install \n</code></pre>\n<p>List the installed versions of all dependencies in this project:</p>\n<pre><code>npm list\n</code></pre>\n<p>List only the outdated depedencies in this project:</p>\n<pre><code>npm outdated\n</code></pre>\n<h2 id=\"additional-resources\" tabindex=\"-1\">Additional Resources <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/npm-nvm-cheatsheet/#additional-resources\">#</a></h2>\n<ul>\n<li><a href=\"https://github.com/coreybutler/nvm-windows\">https://github.com/coreybutler/nvm-windows</a></li>\n<li><a href=\"https://community.chocolatey.org/packages/nvm\">https://community.chocolatey.org/packages/nvm</a></li>\n<li><a href=\"https://github.com/nvm-sh/nvm\">https://github.com/nvm-sh/nvm</a></li>\n</ul>\n",
			"date_published": "2024-02-29T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/chocolatey-cheatsheet/",
			"url": "https://codingpipe.com/posts/chocolatey-cheatsheet/",
			"title": "Chocolatey Package Manager Snippets",
			"content_html": "<h2 id=\"installing-chocolatey-windows-package-manager\" tabindex=\"-1\">Installing Chocolatey Windows Package Manager <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/chocolatey-cheatsheet/#installing-chocolatey-windows-package-manager\">#</a></h2>\n<p>Start PowerShell as Administrator and run this command:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token function\">Set-ExecutionPolicy</span> Bypass <span class=\"token operator\">-</span>Scope <span class=\"token keyword\">Process</span> <span class=\"token operator\">-</span>Force<span class=\"token punctuation\">;</span> <span class=\"token namespace\">[System.Net.ServicePointManager]</span>::SecurityProtocol = <span class=\"token namespace\">[System.Net.ServicePointManager]</span>::SecurityProtocol <span class=\"token operator\">-bor</span> 3072<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">iex</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>WebClient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>DownloadString<span class=\"token punctuation\">(</span><span class=\"token string\">'https://community.chocolatey.org/install.powershell'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nchoco feature enable <span class=\"token operator\">-</span>n=allowGlobalConfirmation\n\n<span class=\"token comment\"># Make `refreshenv` available right away, by defining the $env:ChocolateyInstall</span>\n<span class=\"token comment\"># variable and importing the Chocolatey profile module.</span>\n<span class=\"token comment\"># Note: Using `. $PROFILE` instead *may* work, but isn't guaranteed to.</span>\n<span class=\"token comment\"># See: https://stackoverflow.com/questions/46758437/how-to-refresh-the-environment-of-a-powershell-session-after-a-chocolatey-instal</span>\n<span class=\"token variable\">$env</span>:ChocolateyInstall = <span class=\"token function\">Convert-Path</span> <span class=\"token string\">\"<span class=\"token function\">$<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">Get-Command</span> choco<span class=\"token punctuation\">)</span></span>.Path)\\..\\..\"</span>   \n<span class=\"token function\">Import-Module</span> <span class=\"token string\">\"<span class=\"token variable\">$env</span>:ChocolateyInstall\\helpers\\chocolateyProfile.psm1\"</span>\n\n<span class=\"token comment\"># refreshenv is now an alias for Update-SessionEnvironment</span>\n<span class=\"token comment\"># (rather than invoking refreshenv.cmd, the *batch file* for use with cmd.exe)</span>\n<span class=\"token comment\"># This should make git.exe accessible via the refreshed $env:PATH, so that it</span>\n<span class=\"token comment\"># can be called by name only.</span>\n<span class=\"token comment\"># See: https://stackoverflow.com/questions/46758437/how-to-refresh-the-environment-of-a-powershell-session-after-a-chocolatey-instal</span>\nrefreshenv</code></pre>\n<h2 id=\"installing-common-chocolatey-packages\" tabindex=\"-1\">Installing common Chocolatey packages <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/chocolatey-cheatsheet/#installing-common-chocolatey-packages\">#</a></h2>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token comment\"># PostgreSQL unsupervised with en_US collation:</span>\nchoco install postgresql14 <span class=\"token operator\">--</span>params <span class=\"token string\">\"/Password:postgres /Port:5432\"</span> <span class=\"token operator\">--</span>ia <span class=\"token string\">\"--enable-components server,commandlinetools --superaccount postgres --locale us\"</span>\n\n<span class=\"token comment\"># RabbitMQ (for troubleshooting, see this: https://codingpipe.com/posts/rabbitmq-cheatsheet/)</span>\nchoco install rabbitmq\n\n<span class=\"token comment\"># AWS CLI (for usage, see this: https://codingpipe.com/posts/aws-cli-cheatsheet/)</span>\nchoco install awscli\n\n<span class=\"token comment\"># Node Version Manager for Windows (for usage, see this: https://codingpipe.com/posts/npm-nvm-cheatsheet/)</span>\nchoco install nvm             \n\n<span class=\"token comment\"># Let's Encrypt windows tool</span>\nchoco install win-acme\n\n<span class=\"token comment\"># IIS URL Rewrite extension</span>\nchoco install urlrewrite      \n\n<span class=\"token comment\"># .NET Core for Windows Hostinbg - various versions</span>\nchoco install dotnetcore-windowshosting <span class=\"token operator\">--</span>version=2<span class=\"token punctuation\">.</span>2<span class=\"token punctuation\">.</span>2\nchoco install dotnet-6<span class=\"token punctuation\">.</span>0-windowshosting\nchoco install dotnet-8<span class=\"token punctuation\">.</span>0-aspnetruntime\nchoco install dotnet-8<span class=\"token punctuation\">.</span>0-runtime\n\n<span class=\"token comment\"># .NET Full Framework</span>\nchoco install netfx-4<span class=\"token punctuation\">.</span>8\n\n<span class=\"token comment\"># Database management tool</span>\nchoco install dbeaver        \n\n<span class=\"token comment\"># Notepad++</span>\nchoco install notepadplusplus</code></pre>\n",
			"date_published": "2024-02-29T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/aws-cli-cheatsheet/",
			"url": "https://codingpipe.com/posts/aws-cli-cheatsheet/",
			"title": "AWS CLI Command Snippets",
			"content_html": "<h2 id=\"installing-aws-cli-in-windows-using-chocolatey\" tabindex=\"-1\">Installing AWS CLI in Windows using Chocolatey <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/aws-cli-cheatsheet/#installing-aws-cli-in-windows-using-chocolatey\">#</a></h2>\n<p>Start Command Prompt as Administrator and run this command:</p>\n<pre><code>choco install awscli\n</code></pre>\n<h2 id=\"using-aws-cli\" tabindex=\"-1\">Using AWS CLI <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/aws-cli-cheatsheet/#using-aws-cli\">#</a></h2>\n<p>Always use profiles, and leave the default profile not configured in order to prevent mistakes.</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token comment\"># Create profiles</span>\naws configure <span class=\"token operator\">--</span>profile profilename\n\n<span class=\"token comment\"># TODO: wip</span></code></pre>\n<h2 id=\"using-aws-s3-cli-to-upload-files-to-backblaze-b2-storage\" tabindex=\"-1\">Using AWS S3 CLI to upload files to Backblaze B2 storage <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/aws-cli-cheatsheet/#using-aws-s3-cli-to-upload-files-to-backblaze-b2-storage\">#</a></h2>\n<p>Prerequisites you need to have (<a href=\"https://www.backblaze.com/docs/cloud-storage-use-the-aws-cli-with-backblaze-b2\">see here more</a>):</p>\n<ul>\n<li>Backblaze Key ID</li>\n<li>Backblaze App Key</li>\n<li>Backblaze S3 endpoint URL</li>\n</ul>\n<p>Configure the <code>backblaze</code> profile like this:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token variable\">$FolderPathToBackup</span> = <span class=\"token variable\">$Config</span><span class=\"token punctuation\">.</span>FolderPathToBackup\n<span class=\"token variable\">$BackblazeBucketName</span> = <span class=\"token variable\">$Config</span><span class=\"token punctuation\">.</span>BackblazeBucketName\n<span class=\"token variable\">$BackblazeS3EndpointUrl</span> = <span class=\"token variable\">$Config</span><span class=\"token punctuation\">.</span>BackblazeS3EndpointUrl\n\n<span class=\"token comment\"># Configure AWS CLI with Backblaze</span>\n<span class=\"token variable\">$AWS_ACCESS_KEY_ID</span> = <span class=\"token string\">\"&lt;BackblazeKeyID>\"</span>\n<span class=\"token variable\">$AWS_SECRET_ACCESS_KEY</span> = <span class=\"token string\">\"&lt;BackblazeAppKey>\"</span>\n\naws configure <span class=\"token function\">set</span> aws_access_key_id <span class=\"token variable\">$AWS_ACCESS_KEY_ID</span> <span class=\"token operator\">--</span>profile backblaze<span class=\"token punctuation\">;</span> `\n    aws configure <span class=\"token function\">set</span> aws_secret_access_key <span class=\"token variable\">$AWS_SECRET_ACCESS_KEY</span> <span class=\"token operator\">--</span>profile backblaze</code></pre>\n<p>Test the integration:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">aws s3 <span class=\"token function\">ls</span> <span class=\"token operator\">--</span>endpoint-url=<span class=\"token variable\">$BackblazeS3EndpointUrl</span> <span class=\"token operator\">--</span>profile backblaze</code></pre>\n<p>Upload the file to the S3-compatible bucket in Backblaze B2:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">aws s3 <span class=\"token function\">cp</span> <span class=\"token string\">\"C:/path/to/backup/\"</span> s3:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>custom-bucket-name-in-backblaze/ <span class=\"token operator\">--</span>recursive <span class=\"token operator\">--</span>profile backblaze <span class=\"token operator\">--</span>endpoint-url=<span class=\"token variable\">$BackblazeS3EndpointUrl</span></code></pre>\n<h2 id=\"additional-resources\" tabindex=\"-1\">Additional Resources <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/aws-cli-cheatsheet/#additional-resources\">#</a></h2>\n<ul>\n<li>https://aws.amazon.com/cli/</li>\n<li>https://www.backblaze.com/docs/cloud-storage-use-the-aws-cli-with-backblaze-b2</li>\n</ul>\n",
			"date_published": "2024-02-29T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/problem-solving-guide-for-developers/",
			"url": "https://codingpipe.com/posts/problem-solving-guide-for-developers/",
			"title": "Problem-solving guide for developers",
			"content_html": "<p>Jumping straight into writing code without understanding the problem clearly often leads to wasted time and effort. A structured approach helps avoid this common pitfall.</p>\n<p>A couple of years ago I discovered George Pólya's &quot;How to Solve It.&quot; The ideas from his book helped me categorize and describe a similar process I was already using. Here's the four-step process:</p>\n<ol>\n<li><strong>Analyze</strong> - Understand the problem</li>\n<li><strong>Plan</strong> - Determine how to resolve the problem</li>\n<li><strong>Implement</strong> and test your solution incrementally</li>\n<li><strong>Review</strong> and refine your solution</li>\n</ol>\n<h2 id=\"step-1-analyze-understand-the-problem\" tabindex=\"-1\">Step 1: Analyze - understand the problem <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/problem-solving-guide-for-developers/#step-1-analyze-understand-the-problem\">#</a></h2>\n<p>I start by defining the problem clearly, often rewriting the problem statement until I truly understand it. For complex problems, I break them down into smaller, manageable pieces.</p>\n<p>When dealing with bugs, I focus on reproduction first. Can I reproduce it locally? Is it environment-specific or tied to particular data state? For third-party library issues, I create prototypes and PoCs to reproduce problems in isolation, dive into official documentation and GitHub issues using specific error messages, and leverage Google searches and LLM tools for additional context.</p>\n<p>For new features, I read all related specs and explore the existing codebase in that area. This helps me understand the problem better and ask informed questions.</p>\n<p>The key is knowing when to stop analyzing and avoid analysis paralysis.</p>\n<h2 id=\"step-2-plan-determine-how-to-resolve-the-problem\" tabindex=\"-1\">Step 2: Plan - determine how to resolve the problem <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/problem-solving-guide-for-developers/#step-2-plan-determine-how-to-resolve-the-problem\">#</a></h2>\n<p>I use prototyping (or you may call it spiking, PoC-ing, experimenting, investigating, etc.) as a key tool for learning and determining multiple approaches to find the best solution. I brainstorm possible solutions and involve my team in evaluating each option's pros, cons, and trade-offs within our business context.</p>\n<p>After prototyping and evaluation, I create solution designs (tech specs) or brief implementation plans depending on team maturity and system complexity. Sometimes that's two paragraphs, sometimes a diagram, and sometimes a dozen pages with various diagrams and references.</p>\n<h2 id=\"step-3-implement-and-test-incrementally\" tabindex=\"-1\">Step 3: Implement and test incrementally <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/problem-solving-guide-for-developers/#step-3-implement-and-test-incrementally\">#</a></h2>\n<p>I start with the simplest or most critical piece and write working code. Small, testable changes work better than big rewrites. I test each iteration and use debugging tools, logging, and automated tests to catch issues before QA or users do.</p>\n<p>Communication with the team and adjusting the plan as needed keeps the implementation on track.</p>\n<h2 id=\"step-4-review-and-refine\" tabindex=\"-1\">Step 4: Review and refine <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/problem-solving-guide-for-developers/#step-4-review-and-refine\">#</a></h2>\n<p>I ensure the solution actually solves the original problem, then review the code as if someone else wrote it. I refactor for readability and performance, but stay pragmatic about what needs optimization.</p>\n<p>This process has saved me countless hours of debugging poorly planned solutions. The time invested upfront in understanding and planning pays dividends when the implementation goes smoothly.</p>\n",
			"date_published": "2024-02-11T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/powershell-snippets/",
			"url": "https://codingpipe.com/posts/powershell-snippets/",
			"title": "PowerShell Command Snippets",
			"content_html": "<p>Add a Windows user and grant remote desktop access:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token variable\">$Password</span> = <span class=\"token function\">Read-Host</span> <span class=\"token operator\">-</span>AsSecureString   \n<span class=\"token comment\">#&lt;enter your new password></span>\n<span class=\"token function\">New-LocalUser</span> <span class=\"token string\">\"MyRDPUser\"</span> <span class=\"token operator\">-</span>Password <span class=\"token variable\">$Password</span>\n\n<span class=\"token function\">Add-LocalGroupMember</span> <span class=\"token operator\">-</span><span class=\"token function\">Group</span> <span class=\"token string\">\"Remote Desktop Users\"</span> <span class=\"token operator\">-</span>Member <span class=\"token string\">\"MyRDPUser\"</span></code></pre>\n<p>Change RDP user password, and set account to never expire:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token variable\">$Password</span> = <span class=\"token function\">Read-Host</span> <span class=\"token operator\">-</span>AsSecureString\n<span class=\"token comment\">#&lt;enter your new password></span>\n\n<span class=\"token variable\">$UserAccount</span> = <span class=\"token function\">Get-LocalUser</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"MyRDPUser\"</span>\n<span class=\"token variable\">$UserAccount</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Set-LocalUser</span> <span class=\"token operator\">-</span>Password <span class=\"token variable\">$Password</span> <span class=\"token operator\">-</span>AccountNeverExpires <span class=\"token operator\">-</span>PasswordNeverExpires 1</code></pre>\n<p>Grant admin rights to a Windows user:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token function\">Add-LocalGroupMember</span> <span class=\"token operator\">-</span><span class=\"token function\">Group</span> <span class=\"token string\">\"Administrators\"</span> <span class=\"token operator\">-</span>Member <span class=\"token string\">\"MyNewUser\"</span></code></pre>\n<p>Add firewall rules - allow inbound ports:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token function\">New-NetFirewallRule</span> <span class=\"token operator\">-</span>DisplayName <span class=\"token string\">\"Port 80\"</span> <span class=\"token operator\">-</span>Direction Inbound <span class=\"token operator\">-</span>LocalPort 80 <span class=\"token operator\">-</span>Protocol TCP <span class=\"token operator\">-</span>Action Allow\n\n<span class=\"token function\">New-NetFirewallRule</span> <span class=\"token operator\">-</span>DisplayName <span class=\"token string\">\"Port 443\"</span> <span class=\"token operator\">-</span>Direction Inbound <span class=\"token operator\">-</span>LocalPort 443 <span class=\"token operator\">-</span>Protocol TCP <span class=\"token operator\">-</span>Action Allow</code></pre>\n<p>Install IIS and dependencies:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token function\">Install-WindowsFeature</span> <span class=\"token operator\">-</span>name Web-Server <span class=\"token operator\">-</span>IncludeManagementTools\n<span class=\"token function\">Install-WindowsFeature</span> web-scripting-tools</code></pre>\n<p>Restart an IIS website:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token function\">Stop-IISSite</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"YourWebSite\"</span>\n<span class=\"token function\">Start-IISSite</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"YourWebSite\"</span></code></pre>\n<p>Create/manage IIS website binding with AppPool:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token comment\"># Create new IIS site</span>\n<span class=\"token function\">New-IISSite</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"mywebsite\"</span> <span class=\"token operator\">-</span>BindingInformation <span class=\"token string\">\"*:80:localhost\"</span> <span class=\"token operator\">-</span>PhysicalPath <span class=\"token string\">\"C:\\inetpub\\wwwroot\\mywebsite\"</span>\n\n<span class=\"token comment\"># Add HTTPS binding</span>\n<span class=\"token function\">New-IISSiteBinding</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"mywebsite\"</span> <span class=\"token operator\">-</span>BindingInformation <span class=\"token string\">\"*:443:localhost\"</span> <span class=\"token operator\">-</span>CertificateThumbPrint <span class=\"token string\">\"&lt;YOUR_CERT_THUMBPRINT>\"</span> <span class=\"token operator\">-</span>CertStoreLocation <span class=\"token string\">\"Cert:\\LocalMachine\\My\"</span> <span class=\"token operator\">-</span>Protocol https <span class=\"token operator\">-</span>SslFlag 1\n\n<span class=\"token comment\"># Create AppPool</span>\n<span class=\"token function\">New-Item</span> <span class=\"token operator\">-</span>Path <span class=\"token string\">\"IIS:\\AppPools\"</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"mywebsite\"</span> <span class=\"token operator\">-</span><span class=\"token function\">Type</span> AppPool\n\n<span class=\"token comment\"># \"v2.0\", \"v4.0\" and \"\" (for no managed code)</span>\n<span class=\"token function\">Set-ItemProperty</span> <span class=\"token operator\">-</span>Path <span class=\"token string\">\"IIS:\\AppPools\\mywebsite\"</span> <span class=\"token operator\">-</span>name <span class=\"token string\">\"managedRuntimeVersion\"</span> <span class=\"token operator\">-</span>value <span class=\"token string\">\"\"</span>\n<span class=\"token function\">Set-ItemProperty</span> <span class=\"token operator\">-</span>Path <span class=\"token string\">\"IIS:\\AppPools\\mywebsite\"</span> <span class=\"token operator\">-</span>name <span class=\"token string\">\"autoStart\"</span> <span class=\"token operator\">-</span>value <span class=\"token boolean\">$true</span>\n<span class=\"token function\">Set-ItemProperty</span> <span class=\"token operator\">-</span>Path <span class=\"token string\">\"IIS:\\AppPools\\mywebsite\"</span> <span class=\"token operator\">-</span>name <span class=\"token string\">\"processModel\"</span> <span class=\"token operator\">-</span>value @<span class=\"token punctuation\">{</span>identitytype=<span class=\"token string\">\"ApplicationPoolIdentity\"</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Assign the application pool to a website</span>\n<span class=\"token function\">Set-ItemProperty</span> <span class=\"token operator\">-</span>Path <span class=\"token string\">\"IIS:\\Sites\\mywebsite\"</span> <span class=\"token operator\">-</span>name <span class=\"token string\">\"applicationPool\"</span> <span class=\"token operator\">-</span>value <span class=\"token string\">\"mywebsite\"</span></code></pre>\n<p>Remove app pool:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token function\">Remove-Item</span> <span class=\"token operator\">-</span>Path <span class=\"token string\">\"IIS:\\AppPools\\mywebsite\"</span> <span class=\"token operator\">-</span>Recurse <span class=\"token operator\">-</span>Force <span class=\"token operator\">-</span>ErrorAction SilentlyContinue</code></pre>\n<p>Grant access to the &quot;/logs&quot; folder for an IIS AppPool:</p>\n<ul>\n<li>This script assumes that the AppPool name has the same name as the Website name. In order for a given ASP.NET website to be able to write logs to the &quot;/logs&quot; folder, the AppPool needs to have access to that folder.</li>\n</ul>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token keyword\">function</span> GrantWebsiteFolderPermissions <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">param</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$websiteName</span><span class=\"token punctuation\">)</span> \n                  \n    <span class=\"token variable\">$Path</span> = <span class=\"token string\">\"C:/inetpub/wwwroot/<span class=\"token variable\">$websiteName</span>/logs\"</span>\n    <span class=\"token variable\">$Acl</span> = <span class=\"token function\">Get-Acl</span> <span class=\"token variable\">$Path</span>\n    <span class=\"token variable\">$Ar</span> = <span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>AccessControl<span class=\"token punctuation\">.</span>FileSystemAccessRule<span class=\"token punctuation\">(</span><span class=\"token string\">\"IIS AppPool\\<span class=\"token variable\">$websiteName</span>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FullControl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ContainerInherit,ObjectInherit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"None\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token variable\">$Acl</span><span class=\"token punctuation\">.</span>SetAccessRule<span class=\"token punctuation\">(</span><span class=\"token variable\">$Ar</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">Set-Acl</span> <span class=\"token variable\">$Path</span> <span class=\"token variable\">$Acl</span>\n<span class=\"token punctuation\">}</span>\n\nGrantWebsiteFolderPermissions <span class=\"token operator\">-</span>websiteName <span class=\"token string\">\"mywebsite\"</span></code></pre>\n<p>Install Chocolatey Windows Package Manager:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token function\">Set-ExecutionPolicy</span> Bypass <span class=\"token operator\">-</span>Scope <span class=\"token keyword\">Process</span> <span class=\"token operator\">-</span>Force<span class=\"token punctuation\">;</span> <span class=\"token namespace\">[System.Net.ServicePointManager]</span>::SecurityProtocol = <span class=\"token namespace\">[System.Net.ServicePointManager]</span>::SecurityProtocol <span class=\"token operator\">-bor</span> 3072<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">iex</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">New-Object</span> System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>WebClient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>DownloadString<span class=\"token punctuation\">(</span><span class=\"token string\">'https://community.chocolatey.org/install.powershell'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nchoco feature enable <span class=\"token operator\">-</span>n=allowGlobalConfirmation</code></pre>\n<p>Create scheduled tasks using Windows Task Scheduler:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\"><span class=\"token variable\">$Action</span> = <span class=\"token function\">New-ScheduledTaskAction</span> <span class=\"token operator\">-</span>Execute <span class=\"token string\">\".\\runBackupProcedure.bat\"</span> <span class=\"token operator\">-</span>WorkingDirectory <span class=\"token string\">\"C:\\YourStartInPath\"</span>\n<span class=\"token variable\">$Triggers</span> = @<span class=\"token punctuation\">(</span>      <span class=\"token comment\"># Add two daily triggers at different times</span>\n    $<span class=\"token punctuation\">(</span><span class=\"token function\">New-ScheduledTaskTrigger</span> <span class=\"token operator\">-</span>Daily <span class=\"token operator\">-</span>At 3PM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    $<span class=\"token punctuation\">(</span><span class=\"token function\">New-ScheduledTaskTrigger</span> <span class=\"token operator\">-</span>Daily <span class=\"token operator\">-</span>At 6AM<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token variable\">$Settings</span> = <span class=\"token function\">New-ScheduledTaskSettingsSet</span> <span class=\"token operator\">-</span>HistoryEnabled <span class=\"token boolean\">$true</span>\n<span class=\"token variable\">$Principal</span> = <span class=\"token function\">New-ScheduledTaskPrincipal</span> <span class=\"token operator\">-</span>UserId <span class=\"token string\">\"NT AUTHORITY\\SYSTEM\"</span> <span class=\"token operator\">-</span>LogonType ServiceAccount\n\n<span class=\"token comment\"># Register the task</span>\n<span class=\"token function\">Register-ScheduledTask</span> <span class=\"token operator\">-</span>Action <span class=\"token variable\">$Action</span> <span class=\"token operator\">-</span>Trigger <span class=\"token variable\">$Triggers</span> <span class=\"token operator\">-</span>TaskName <span class=\"token string\">\"BackupDatabaseToS3\"</span> <span class=\"token operator\">-</span>Description <span class=\"token string\">\"Runs BackupDatabaseToS3 daily\"</span> <span class=\"token operator\">-</span>Settings <span class=\"token variable\">$Settings</span> <span class=\"token operator\">-</span>Principal <span class=\"token variable\">$Principal</span>\n\n<span class=\"token comment\"># Get task info</span>\n<span class=\"token function\">Get-ScheduledTask</span> <span class=\"token operator\">-</span>TaskName <span class=\"token string\">\"BackupDatabaseToS3\"</span> <span class=\"token punctuation\">|</span> <span class=\"token function\">Get-ScheduledTaskInfo</span></code></pre>\n<pre class=\"language-batch\" tabindex=\"0\"><code class=\"language-batch\"><span class=\"token comment\">:: runBackupProcedure.bat</span>\n<span class=\"token command\"><span class=\"token keyword\">powershell</span>.exe -ExecutionPolicy Bypass -File <span class=\"token string\">\".\\backupDatabase.ps1\"</span></span>\n<span class=\"token command\"><span class=\"token keyword\">powershell</span>.exe -ExecutionPolicy Bypass -File <span class=\"token string\">\".\\uploadBackupToS3.ps1\"</span></span></code></pre>\n",
			"date_published": "2023-12-05T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/configuring-serilog-in-net-core-worker-and-windows-service-applications/",
			"url": "https://codingpipe.com/posts/configuring-serilog-in-net-core-worker-and-windows-service-applications/",
			"title": "Serilog setup for .NET Core worker services",
			"content_html": "<p>Worker services that fail during startup often fail silently. The default .NET logging doesn't capture bootstrap errors, leaving you debugging blind when services won't start in production.</p>\n<p>This Serilog setup provides bootstrap logging that captures startup failures and structured logging for runtime operations.</p>\n<p>Install the essential packages:</p>\n<pre class=\"language-powershell\" tabindex=\"0\"><code class=\"language-powershell\">dotnet add package Serilog\ndotnet add package Serilog<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Hosting\ndotnet add package Serilog<span class=\"token punctuation\">.</span>Settings<span class=\"token punctuation\">.</span>Configuration\ndotnet add package Serilog<span class=\"token punctuation\">.</span>Sinks<span class=\"token punctuation\">.</span>Console</code></pre>\n<p>Replace Program.cs with bootstrap logging:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Serilog</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">WorkerService1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Bootstrap logger captures startup errors before full configuration loads</span>\nLog<span class=\"token punctuation\">.</span>Logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LoggerConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>WriteTo<span class=\"token punctuation\">.</span><span class=\"token function\">Console</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">CreateBootstrapLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nLog<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting up\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> Host<span class=\"token punctuation\">.</span><span class=\"token function\">CreateApplicationBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    builder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSerilog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>services<span class=\"token punctuation\">,</span> loggerConfiguration<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> loggerConfiguration\n        <span class=\"token punctuation\">.</span>ReadFrom<span class=\"token punctuation\">.</span><span class=\"token function\">Configuration</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    builder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddHostedService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Worker<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> host <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    host<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Log<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stopped cleanly\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Log<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"An unhandled exception occurred during bootstrapping\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">finally</span>\n<span class=\"token punctuation\">{</span>\n    Log<span class=\"token punctuation\">.</span><span class=\"token function\">CloseAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Configure appsettings.json:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Serilog\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"MinimumLevel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Information\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Override\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"Microsoft\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Warning\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"System\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Warning\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"WriteTo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Console\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"Args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"outputTemplate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"[{Timestamp:yyyy-MM-dd HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Enrich\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"FromLogContext\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"usage\" tabindex=\"-1\">Usage <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/configuring-serilog-in-net-core-worker-and-windows-service-applications/#usage\">#</a></h2>\n<p>Update your worker to use structured logging:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Serilog</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">ILogger</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Serilog<span class=\"token punctuation\">.</span>ILogger</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">WorkerService1</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BackgroundService</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger</span> _logger <span class=\"token operator\">=</span> Log<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ForContext</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Worker<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> stoppingToken<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stoppingToken<span class=\"token punctuation\">.</span>IsCancellationRequested<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                _logger<span class=\"token punctuation\">.</span><span class=\"token function\">Information</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Worker running at: {Time}\"</span><span class=\"token punctuation\">,</span> DateTimeOffset<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span> stoppingToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"why-this-works\" tabindex=\"-1\">Why this works <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/configuring-serilog-in-net-core-worker-and-windows-service-applications/#why-this-works\">#</a></h2>\n<p>Bootstrap logging captures startup failures that would otherwise be invisible. The two-phase approach creates a simple console logger first, then switches to full configuration once the host builds.</p>\n<p>Microsoft and System logs at Warning level reduce framework noise. <code>Log.ForContext&lt;Worker&gt;()</code> provides scoped loggers. Structured logging with {Time} creates searchable properties instead of string interpolation.</p>\n",
			"date_published": "2023-08-18T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/a-step-by-step-example-in-pseudocode-driven-programming/",
			"url": "https://codingpipe.com/posts/a-step-by-step-example-in-pseudocode-driven-programming/",
			"title": "How to Use Pseudocode to Design Better Software - Working Example",
			"content_html": "<p>Pseudocode is a plain language text that describes the steps of a computer program.</p>\n<p>Let's look at the following example. We have a program that takes user's input, parses it, then generates a QR code image from the parsed input, and finally it saves the image to the filesystem.</p>\n<p>Here is the first iteration of the pseudocode for it:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// read user's input value</span>\n<span class=\"token comment\">// parse the input</span>\n<span class=\"token comment\">// generate QR code image from the parsed input</span>\n<span class=\"token comment\">// save the image to filesystem</span>\n<span class=\"token comment\">// print the image filepath so the user can know where to look for the image</span></code></pre>\n<p>Here is the final iteration of the pseudocode:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// input = read user's input value</span>\n<span class=\"token comment\">// parsedValue = parseInput(input)</span>\n<span class=\"token comment\">// image = generateQrCodeImage(parsedValue)</span>\n<span class=\"token comment\">// saveImage(image, filepath)</span>\n<span class=\"token comment\">// print(filepath) </span></code></pre>\n<p>Most of the time this is the very first step I take before I start writing computer code. I breakdown the problem into smaller chunks to get better sense of it. Then I write the solution down using pseudocode.\nNote that the above pseudocode was written and rewritten a couple of times until I was satisfied with the program's workflow and the naming.</p>\n<p>From here I start writing actual code like this:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// input = read user's input value</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter an input value:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> input <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// parsedValue = parseInput(input)</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> parsedInput <span class=\"token operator\">=</span> <span class=\"token function\">ParseInput</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// image = generateQrCodeImage(parsedValue)</span>\n<span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> image <span class=\"token operator\">=</span> <span class=\"token function\">GenerateQrCodeImage</span><span class=\"token punctuation\">(</span>parsedInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// saveImage(image, filepath)</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> imageFilepath <span class=\"token operator\">=</span> <span class=\"token function\">SaveImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C:\\\\qrcode-images\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// print(filepath) </span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>imageFilepath<span class=\"token punctuation\">)</span></code></pre>\n<p>Then, I can remove the comments:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter an input value:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> input <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> parsedInput <span class=\"token operator\">=</span> <span class=\"token function\">ParseInput</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> image <span class=\"token operator\">=</span> <span class=\"token function\">GenerateQrCodeImage</span><span class=\"token punctuation\">(</span>parsedInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> imageFilepath <span class=\"token operator\">=</span> <span class=\"token function\">SaveImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token string\">\"C:\\\\qrcode-images\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>imageFilepath<span class=\"token punctuation\">)</span></code></pre>\n<p>Also, I can write some tests for the parser like this:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode=a;value=787878;\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ParseInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.2222787878\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nAssert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mode=d;value=112233;\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ParseInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d asdf112233\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nAssert<span class=\"token punctuation\">.</span><span class=\"token function\">ThrowsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">ParseInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qwex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Finally, I can implement the remaining methods using the same approach. Sometimes the implementation is straightforward, sometimes is not. The important thing is to unblock yourself, don't rush to write actual &quot;final&quot; code, make a good design/flow/structure in pseudocode, then implement stuff.</p>\n<p>Rules of thumb:</p>\n<ul>\n<li>First breakdown solutions in pseudocode, then in computer code</li>\n<li>Pseudocode can be written closer to a plain language or closer to a computer code</li>\n<li>Keep the pseudocode high-level, but not too generic</li>\n<li>Solve problems using an &quot;outside-in&quot; way - start from the main program flow (outside), and then focus on the details (inside)</li>\n</ul>\n",
			"date_published": "2023-08-13T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/exporting-c-objects-to-excel-with-closedxml/",
			"url": "https://codingpipe.com/posts/exporting-c-objects-to-excel-with-closedxml/",
			"title": "Excel exports in .NET Core using ClosedXML",
			"content_html": "<p><a href=\"https://github.com/ClosedXML/ClosedXML\">ClosedXML</a> makes Excel exports straightforward in .NET without requiring Excel installation. Perfect for generating reports from any IEnumerable collection.</p>\n<h2 id=\"install-package\" tabindex=\"-1\">Install package <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/exporting-c-objects-to-excel-with-closedxml/#install-package\">#</a></h2>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package ClosedXML</code></pre>\n<h2 id=\"basic-export-to-file\" tabindex=\"-1\">Basic export to file <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/exporting-c-objects-to-excel-with-closedxml/#basic-export-to-file\">#</a></h2>\n<p>The simplest way to export any objects to Excel using ClosedXML's <code>InsertTable&lt;T&gt;()</code> method:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>AuthorDto<span class=\"token punctuation\">></span></span> items <span class=\"token operator\">=</span> <span class=\"token function\">GetAuthors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> wb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XLWorkbook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ws <span class=\"token operator\">=</span> wb<span class=\"token punctuation\">.</span><span class=\"token function\">AddWorksheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Inserts the collection to Excel as a table with a header row.</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function\">Cell</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">InsertTable</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Adjust column size to contents.</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function\">Columns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AdjustToContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Save to local file system.</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> filename <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Export - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>UtcNow</span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>yyyyMMddHHmmss</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.xlsx\"</span></span><span class=\"token punctuation\">;</span>\nwb<span class=\"token punctuation\">.</span><span class=\"token function\">SaveAs</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"asp-net-core-minimal-api-endpoint\" tabindex=\"-1\">ASP.NET Core minimal API endpoint <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/exporting-c-objects-to-excel-with-closedxml/#asp-net-core-minimal-api-endpoint\">#</a></h2>\n<p>Complete minimal API endpoint that returns a downloadable Excel file:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/export/authors\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IAuthorService</span> authorService<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> authors <span class=\"token operator\">=</span> authorService<span class=\"token punctuation\">.</span><span class=\"token function\">GetAuthors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> wb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">XLWorkbook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ws <span class=\"token operator\">=</span> wb<span class=\"token punctuation\">.</span><span class=\"token function\">AddWorksheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ws<span class=\"token punctuation\">.</span><span class=\"token function\">Cell</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">InsertTable</span><span class=\"token punctuation\">(</span>authors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ws<span class=\"token punctuation\">.</span><span class=\"token function\">Columns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AdjustToContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    wb<span class=\"token punctuation\">.</span><span class=\"token function\">SaveAs</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> content <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> contentType <span class=\"token operator\">=</span> <span class=\"token string\">\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> filename <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"Authors - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">DateTime<span class=\"token punctuation\">.</span>UtcNow</span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>yyyyMMddHHmmss</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">.xlsx\"</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> Results<span class=\"token punctuation\">.</span><span class=\"token function\">File</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> contentType<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"example-class\" tabindex=\"-1\">Example class <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/exporting-c-objects-to-excel-with-closedxml/#example-class\">#</a></h2>\n<p>The <code>AuthorDto</code> can be any C# class object:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorDto</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> FirstName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> LastName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> ContactEmail <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This approach works well for simple exports. For advanced table customization, check the <a href=\"https://docs.closedxml.io/en/latest/features/tables.html\">tables feature</a> in the official docs.</p>\n",
			"date_published": "2023-08-12T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/overriding-services-in-aspnet-core-integration-tests/",
			"url": "https://codingpipe.com/posts/overriding-services-in-aspnet-core-integration-tests/",
			"title": "Overriding services ASP.NET Core integration tests using ConfigureTestServices",
			"content_html": "<p>Let's say you have the following ASP.NET Core project.</p>\n<pre class=\"language-cs\" tabindex=\"0\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PlaygroundApi</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            builder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IPaymentService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StripePaymentService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            app<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IConfiguration</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> projectKey <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetValue</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProjectKey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"ProjectKey is: '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">projectKey</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'\"</span></span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            app<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>It has a <code>IPaymentService</code> scoped service injected with a <code>StripePaymentService</code> implementation.</p>\n<p>For the needs of integration testing we want to mock the payment service, and not use the real <code>StripePaymentService</code> implementation. To do that, we can use the <code>ConfigureTestServices</code> method extension in the TestServer to override the <code>IPaymentService</code> implementation with a <code>MockPaymentService</code>.</p>\n<pre class=\"language-cs\" tabindex=\"0\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Mvc<span class=\"token punctuation\">.</span>Testing</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>TestHost</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>DependencyInjection</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PlaygroundApi<span class=\"token punctuation\">.</span>Tests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnitTest1</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">WebApplicationFactory<span class=\"token punctuation\">&lt;</span>PlaygroundApi<span class=\"token punctuation\">.</span>Program<span class=\"token punctuation\">></span></span> _webAppFactory<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">UnitTest1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _webAppFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebApplicationFactory<span class=\"token punctuation\">&lt;</span>PlaygroundApi<span class=\"token punctuation\">.</span>Program<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">WithWebHostBuilder</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">{</span>\n                    builder<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureTestServices</span><span class=\"token punctuation\">(</span>services <span class=\"token operator\">=></span>\n                    <span class=\"token punctuation\">{</span>\n                        services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddScoped</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IPaymentService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MockPaymentService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Test_payment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> scope <span class=\"token operator\">=</span> _webAppFactory<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">CreateScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> paymentService <span class=\"token operator\">=</span> scope<span class=\"token punctuation\">.</span>ServiceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IPaymentService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// Test proof that the payment service type now is the mock.</span>\n            Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MockPaymentService</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> paymentService<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-08-11T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/test-specific-appsettings-in-aspnet-core-integration-tests/",
			"url": "https://codingpipe.com/posts/test-specific-appsettings-in-aspnet-core-integration-tests/",
			"title": "Test-specific AppSettings configuration in ASP.NET Core integration tests",
			"content_html": "<p>Integration tests that use production configuration values are accidents waiting to happen. The TestServer defaults to your main application's <code>appsettings.json</code>, which means tests might hit production databases or external APIs.</p>\n<p>Here's how to configure tests to use their own configuration files.</p>\n<h2 id=\"setup\" tabindex=\"-1\">Setup <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/test-specific-appsettings-in-aspnet-core-integration-tests/#setup\">#</a></h2>\n<p>Create a test-specific <code>appsettings.json</code> in your test project:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"ConnectionStrings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"DefaultConnection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Host=localhost;Port=5432;Database=TestDb;Username=postgres;Password=test123\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ApiToken\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test-api-key-456\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Set the file properties to <strong>Build Action: Content</strong> and <strong>Copy to Output Directory: Copy if newer</strong>.</p>\n<p>Add this minimal API endpoint to your main app for testing:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api-token\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IConfiguration</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> config<span class=\"token punctuation\">[</span><span class=\"token string\">\"ApiToken\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Configure your <code>WebApplicationFactory</code> to use the test configuration:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Mvc<span class=\"token punctuation\">.</span>Testing</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>Extensions<span class=\"token punctuation\">.</span>Configuration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PlaygroundApi<span class=\"token punctuation\">.</span>Tests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntegrationTests</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">WebApplicationFactory<span class=\"token punctuation\">&lt;</span>Program<span class=\"token punctuation\">></span></span> _webAppFactory<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">IntegrationTests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _webAppFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebApplicationFactory<span class=\"token punctuation\">&lt;</span>Program<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">WithWebHostBuilder</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">{</span>\n                    builder<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAppConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                    <span class=\"token punctuation\">{</span>\n                        config<span class=\"token punctuation\">.</span>Sources<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        config<span class=\"token punctuation\">.</span><span class=\"token function\">SetBasePath</span><span class=\"token punctuation\">(</span>Directory<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        config<span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"appsettings.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">ShouldUseTestConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> _webAppFactory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetStringAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api-token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test-api-key-456\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"dynamic-configuration-override\" tabindex=\"-1\">Dynamic Configuration Override <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/test-specific-appsettings-in-aspnet-core-integration-tests/#dynamic-configuration-override\">#</a></h2>\n<p>For Testcontainers or other runtime configuration needs:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContainerizedTests</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IAsyncLifetime</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">PostgreSqlContainer</span> _postgreSqlContainer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PostgreSqlBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">WebApplicationFactory<span class=\"token punctuation\">&lt;</span>Program<span class=\"token punctuation\">></span></span> _webAppFactory<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">InitializeAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> _postgreSqlContainer<span class=\"token punctuation\">.</span><span class=\"token function\">StartAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        _webAppFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WebApplicationFactory<span class=\"token punctuation\">&lt;</span>Program<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithWebHostBuilder</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">{</span>\n                builder<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAppConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">{</span>\n                    config<span class=\"token punctuation\">.</span>Sources<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    config<span class=\"token punctuation\">.</span><span class=\"token function\">SetBasePath</span><span class=\"token punctuation\">(</span>Directory<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    config<span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"appsettings.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    \n                    <span class=\"token comment\">// Override with container connection string</span>\n                    config<span class=\"token punctuation\">.</span><span class=\"token function\">AddInMemoryCollection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token punctuation\">[</span><span class=\"token string\">\"ConnectionStrings:DefaultConnection\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _postgreSqlContainer<span class=\"token punctuation\">.</span><span class=\"token function\">GetConnectionString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">ShouldConnectToTestContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> httpClient <span class=\"token operator\">=</span> _webAppFactory<span class=\"token punctuation\">.</span><span class=\"token function\">CreateClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// Your test logic here using the containerized database</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">DisposeAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> _postgreSqlContainer<span class=\"token punctuation\">.</span><span class=\"token function\">DisposeAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _webAppFactory<span class=\"token punctuation\">?.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"why-this-works\" tabindex=\"-1\">Why This Works <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/test-specific-appsettings-in-aspnet-core-integration-tests/#why-this-works\">#</a></h2>\n<p><code>config.Sources.Clear()</code> prevents inheriting production configuration. <code>SetBasePath(Directory.GetCurrentDirectory())</code> points to the test output directory where your test <code>appsettings.json</code> gets copied. This approach keeps test configuration explicit and version-controlled rather than relying on environment variables or hardcoded values.</p>\n",
			"date_published": "2023-08-10T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/setting-up-postgresql-with-docker-compose/",
			"url": "https://codingpipe.com/posts/setting-up-postgresql-with-docker-compose/",
			"title": "PostgreSQL development setup with Docker Compose",
			"content_html": "<p>I needed a shared PostgreSQL instance that's always available for demos, prototypes, and trial projects. Installing Postgres directly means dealing with Windows services, path configurations, and version management across system updates.</p>\n<p>This Docker Compose setup gives me a persistent development database that's isolated from my system but accessible to any project. Perfect for when you want to quickly spin up a demo without setting up project-specific database infrastructure.</p>\n<h2 id=\"setup\" tabindex=\"-1\">Setup <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/setting-up-postgresql-with-docker-compose/#setup\">#</a></h2>\n<p>Choose a permanent folder for your PostgreSQL setup (e.g., <code>D:\\devops\\docker\\local_postgres</code> or <code>C:\\docker\\postgres</code>). Create a <code>docker-compose.yml</code> file there:</p>\n<pre class=\"language-yml\" tabindex=\"0\"><code class=\"language-yml\"><span class=\"token comment\"># docker-compose.yml</span>\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> postgres\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"15432:5432\"</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">POSTGRES_USER</span><span class=\"token punctuation\">:</span> postgres\n      <span class=\"token key atrule\">POSTGRES_PASSWORD</span><span class=\"token punctuation\">:</span> postgres\n      <span class=\"token key atrule\">POSTGRES_DB</span><span class=\"token punctuation\">:</span> postgres\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n       <span class=\"token punctuation\">-</span> ./postgresql<span class=\"token punctuation\">-</span>data<span class=\"token punctuation\">:</span>/var/lib/postgresql/data</code></pre>\n<p>The <code>postgresql-data</code> folder will be created automatically in the same directory as your <code>docker-compose.yml</code> file when you first run the container.</p>\n<p>Run with:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up</code></pre>\n<p>Connect using:</p>\n<pre class=\"language-plaintext\" tabindex=\"0\"><code class=\"language-plaintext\">Host: localhost\nPort: 15432\nUsername: postgres\nPassword: postgres</code></pre>\n<h2 id=\"why-this-works\" tabindex=\"-1\">Why This Works <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/setting-up-postgresql-with-docker-compose/#why-this-works\">#</a></h2>\n<p>Port 15432 avoids system Postgres conflicts, <code>./postgresql-data</code> keeps data persistent, and <code>restart: always</code> survives reboots. One shared development database that's always available.</p>\n",
			"date_published": "2023-08-09T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/retry-failed-http-requests-in-dotnet/",
			"url": "https://codingpipe.com/posts/retry-failed-http-requests-in-dotnet/",
			"title": "HTTP Retry with Flurl and Polly in .NET Core",
			"content_html": "<p>HTTP requests may fail to many reasons - the API server could be temporary offline, a network glitch might occur, a mid-request deploy might happen, the server may be overloaded with requests, etc.\nSome failures go away if you just re-run the requests, and sometimes you'll need to wait a bit before doing that.</p>\n<p>To overcome these type of glitches you can wrap your HTTP calls with a retry policy.</p>\n<h2 id=\"net-client-code-with-flurl-and-polly\" tabindex=\"-1\">.NET client code with Flurl and Polly <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/retry-failed-http-requests-in-dotnet/#net-client-code-with-flurl-and-polly\">#</a></h2>\n<pre class=\"language-cs\" tabindex=\"0\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Policy\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Handle</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FlurlHttpException<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span>  <span class=\"token comment\">// Activate only on this exception, with filter:</span>\n        x<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">>=</span> <span class=\"token number\">500</span>      <span class=\"token comment\">// on Server error</span>\n        <span class=\"token operator\">||</span> x<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">==</span> <span class=\"token number\">408</span>   <span class=\"token comment\">// on Request Timeout</span>\n        <span class=\"token operator\">||</span> x<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">==</span> <span class=\"token number\">429</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// on Too Many Requests</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WaitAndRetryAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>      <span class=\"token comment\">// Retry maximum 4 times, </span>\n    <span class=\"token punctuation\">{</span>                             <span class=\"token comment\">// but wait a specified duration between each retry.</span>\n        TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"https://api.example.com/todos\"</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetJsonAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TodosResponse<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Execute the request.</span></code></pre>\n<p>TIP: You can abstract parts of this code to reduce the verboseness when applying policies across your projects to something like this:</p>\n<pre class=\"language-cs\" tabindex=\"0\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">ExecuteRequestAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"https://api.example.com/todos\"</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetJsonAsync</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TodosResponse<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"references\" tabindex=\"-1\">References <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/retry-failed-http-requests-in-dotnet/#references\">#</a></h2>\n<ul>\n<li>https://github.com/App-vNext/Polly#wait-and-retry</li>\n<li>https://github.com/App-vNext/Polly/wiki/Retry</li>\n<li>https://learn.microsoft.com/en-us/azure/architecture/patterns/retry</li>\n<li>https://flurl.dev/docs/fluent-http/</li>\n</ul>\n",
			"date_published": "2023-08-08T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/",
			"url": "https://codingpipe.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/",
			"title": "Dynamic SQL queries: string concatenation vs SqlKata",
			"content_html": "<p>When building search features with multiple optional filters, you need dynamic SQL queries that adapt based on user input. I've encountered this requirement countless times - users want to search by name, filter by department, select multiple instructors, or combine any of these criteria.</p>\n<p>Two approaches are commonly used: string concatenation with libraries like <a href=\"https://github.com/DapperLib/Dapper/blob/main/Readme.md\">Dapper</a>, and expression-based builders like <a href=\"https://sqlkata.com/\">SqlKata</a>. Here's how both approaches handle a typical search scenario with pagination and filtering.</p>\n<h2 id=\"query-building-with-string-concatenation\" tabindex=\"-1\">Query building with string concatenation <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/#query-building-with-string-concatenation\">#</a></h2>\n<p>I'll start with the string concatenation approach using Dapper. We're building a search query that filters courses by optional parameters and returns paginated results with a total count:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// This is the filter request object that the user passes to the query</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueryRequest</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> SearchText <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">?</span></span> DepartmentId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> InstructorIds <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> SkipCount <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// for offset</span>\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> TakeCount <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// for limit</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">QueryResponse</span> <span class=\"token function\">QueryCoursesStringConcat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDbConnection</span> dbConnection<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Build the base query that tries to search by all optional parameters if provided,</span>\n  <span class=\"token comment\">// or returns all results. It's used in building the list and count queries bellow.</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  query<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"\nfrom Course\ninner join Department on Department.ID = Course.DepartmentID\nleft join CourseAssignment on CourseAssignment.CourseID = Course.ID\nleft join Instructor on Instructor.ID = CourseAssignment.InstructorID\nleft join Enrollment on Enrollment.CourseID = Course.ID\nWHERE 1 = 1\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>SearchText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    query<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" and (Course.Title ilike @SearchText or Instructor.FullName ilike @SearchText)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>DepartmentId<span class=\"token punctuation\">.</span>HasValue<span class=\"token punctuation\">)</span>\n    query<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" and Department.ID = @DepartmentID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>InstructorIds<span class=\"token punctuation\">?.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    query<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" and Instructor.ID = any(@InstructorIds)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Built the list query with pagination on top of the base query.</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> listQuery <span class=\"token operator\">=</span> <span class=\"token string\">@\"\nselect \nCourse.Title as CourseTitle,\nCourse.Credits as CourseCredits,\nDepartment.Name as DepartmentName,\nInstructor.LastName as InstructorName \"</span>\n<span class=\"token operator\">+</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" OFFSET @SkipCount LIMIT @TakeCount\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Execute the list query using Dapper</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> items <span class=\"token operator\">=</span> dbConnection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ResponseItem<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>listQuery<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span>\n  <span class=\"token punctuation\">{</span>\n    SearchText <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>SearchText<span class=\"token punctuation\">,</span>\n    DepartmentID <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>DepartmentId<span class=\"token punctuation\">,</span>\n    InstructorIds <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>InstructorIds<span class=\"token punctuation\">,</span>\n    SkipCount <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>SkipCount<span class=\"token punctuation\">,</span>\n    TakeCount <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>TakeCount\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Build the count query.</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> countQuery <span class=\"token operator\">=</span> <span class=\"token string\">\"select count(*) \"</span> <span class=\"token operator\">+</span> query<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Execute the count query using Dapper</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> totalCount <span class=\"token operator\">=</span> dbConnection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ExecuteScalar</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>countQuery<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span>\n  <span class=\"token punctuation\">{</span>\n    SearchText <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>SearchText<span class=\"token punctuation\">,</span>\n    DepartmentID <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>DepartmentId<span class=\"token punctuation\">,</span>\n    InstructorIds <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>InstructorIds\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">QueryResponse</span>\n  <span class=\"token punctuation\">{</span>\n    Items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">,</span>\n    TotalCount <span class=\"token operator\">=</span> totalCount\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>I've learned to watch for several things when building queries this way: proper whitespace placement around concatenated strings, using <code>WHERE 1 = 1</code> pattern for cleaner conditional logic, and always using parameterized queries instead of string interpolation to prevent SQL injection.</p>\n<h2 id=\"query-building-with-sqlkata\" tabindex=\"-1\">Query building with SqlKata <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/#query-building-with-sqlkata\">#</a></h2>\n<p><a href=\"https://sqlkata.com/\">SqlKata</a> provides a fluent, expression-based approach. I've used it successfully across many projects for everything from simple search queries to complex report builders:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">QueryResponse</span> <span class=\"token function\">QueryCoursesSqlKata</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">QueryFactory</span> dbQueryFactory<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Build the base query that tries to search by all optional parameters if provided,</span>\n  <span class=\"token comment\">// or returns all results. It's used in building the list and count queries bellow.</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span> dbQueryFactory<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Course\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Department\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Department.ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Course.DepartmentID\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">LeftJoin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CourseAssignment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CourseAssignment.CourseID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Course.ID\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">LeftJoin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Instructor\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Instructor.ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CourseAssignment.InstructorID\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">LeftJoin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enrollment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Enrollment.CourseID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Course.ID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>SearchText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    query<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x\n        <span class=\"token punctuation\">.</span><span class=\"token function\">WhereLike</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Course.Title\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>SearchText<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">OrWhereLike</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Instructor.FullName\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>SearchText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>DepartmentId<span class=\"token punctuation\">.</span>HasValue<span class=\"token punctuation\">)</span>\n    query<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Department.ID\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>DepartmentId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>InstructorIds<span class=\"token punctuation\">?.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    query<span class=\"token punctuation\">.</span><span class=\"token function\">WhereIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Instructor.ID\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>InstructorIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Build and execute the list query with pagination on top of the base query.</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> items <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Course.Title as CourseTitle\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Course.Credits as CourseCredits\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Department.Name as DepartmentName\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Instructor.LastName as InstructorName\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Offset</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>SkipCount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Limit</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>TakeCount<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ResponseItem<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Build and execute the count query.</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> totalCount <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Count</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">QueryResponse</span>\n  <span class=\"token punctuation\">{</span>\n    Items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">,</span>\n    TotalCount <span class=\"token operator\">=</span> totalCount\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Remember that SqlKata <code>Query</code> instances are mutable, so use <code>.Clone()</code> before modifying a query that you'll reuse for different purposes.</p>\n<h2 id=\"when-to-use-each-approach\" tabindex=\"-1\">When to use each approach <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/#when-to-use-each-approach\">#</a></h2>\n<p>The main advantage of SqlKata is eliminating string concatenation errors, providing better IntelliSense support, and making complex conditional logic more readable. String concatenation requires careful attention to whitespace placement and can become unwieldy with complex dynamic conditions.</p>\n<p>However, string concatenation gives you direct control over the generated SQL, which can be useful when you need to fine-tune specific query optimizations or use database-specific features that the query builder doesn't support.</p>\n<p>For most dynamic query scenarios, I prefer SqlKata because it reduces bugs and makes the code more maintainable, especially as query complexity grows.</p>\n<h2 id=\"sqlkata-usage-references\" tabindex=\"-1\">SqlKata usage references <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/#sqlkata-usage-references\">#</a></h2>\n<p>SqlKata's <a href=\"https://sqlkata.com/docs\">documentation</a> is rich with examples. There is also a <a href=\"https://sqlkata.com/playground\">SqlKata Playground</a> to quickly try out code samples and see their output for multiple database providers.</p>\n<h3 id=\"generating-a-sql-string-from-a-sqlkata-query\" tabindex=\"-1\">Generating a SQL string from a SqlKata query <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/#generating-a-sql-string-from-a-sqlkata-query\">#</a></h3>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Course\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Published\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Credits\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> compiler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PostgresCompiler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sql <span class=\"token operator\">=</span> compiler<span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Sql<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns: SELECT * FROM \"Course\" WHERE \"Published\" = @p0 AND \"Credits\" = @p1</span></code></pre>\n<p>See the <a href=\"https://sqlkata.com/docs/#compile-only-example\">compiler only examples</a> for more details.</p>\n<h3 id=\"using-selectraw-for-accessing-postgres-jsonb-columns\" tabindex=\"-1\">Using <a href=\"https://sqlkata.com/docs/select#raw\">SelectRaw</a> for accessing Postgres JSONB columns <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/#using-selectraw-for-accessing-postgres-jsonb-columns\">#</a></h3>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fullname as Fullname\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SelectRaw</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data->'BillingAddress'->>'City' as BillingCity\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>There are also similar accompanied methods: <code>WhereRaw</code>, <code>FromRaw</code>, etc.</p>\n<h3 id=\"nested-conditions-in-the-where-clause\" tabindex=\"-1\">Nested conditions in the Where clause <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/building-dynamic-sql-queries-in-dotnet-using-sqlkata/#nested-conditions-in-the-where-clause\">#</a></h3>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enabled\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>q <span class=\"token operator\">=></span> q<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Manager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">OrWhere</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Role\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Member\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// SELECT * FROM \"User\" </span>\n<span class=\"token comment\">// WHERE \"Enabled\" = true AND (\"Role\" = 'Manager' OR \"Role\" = 'Member')</span></code></pre>\n",
			"date_published": "2023-01-23T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/strongly-typed-appsettings-configuration-in-net-core-with-validation/",
			"url": "https://codingpipe.com/posts/strongly-typed-appsettings-configuration-in-net-core-with-validation/",
			"title": "Type-safe appsettings configuration in .NET Core",
			"content_html": "<p>Configuration errors have a special way of ruining your day. You deploy to production, everything looks fine, then a specific code path hits and boom - NullReferenceException because <code>appSettings[&quot;SomeKey&quot;]</code> returned null or you mistyped the configuration e.g. <code>appSettings[&quot;Somkey&quot;]</code>.</p>\n<p>I've been burned by this enough times that I now default to strongly-typed configuration classes with required properties. This catches missing configuration at startup rather than runtime, and gives you IntelliSense when accessing values.</p>\n<h2 id=\"setup\" tabindex=\"-1\">Setup <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/strongly-typed-appsettings-configuration-in-net-core-with-validation/#setup\">#</a></h2>\n<p>Create a configuration class that mirrors your appsettings.json structure:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppSettings</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\">ConnectionStringsConfig</span> ConnectionStrings <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\">LoggingConfig</span> Logging <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectionStringsConfig</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> DefaultConnection <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggingConfig</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> LogLevel <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Corresponding appsettings.json:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"ConnectionStrings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"DefaultConnection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Server=myserver;Database=mydb;\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Logging\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"LogLevel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Information\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Register both <code>IOptions&lt;AppSettings&gt;</code> and the settings object directly:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">builder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AppSettings<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSingleton</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetRequiredService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IOptions<span class=\"token punctuation\">&lt;</span>AppSettings<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The dual registration gives you clean injection in most cases, plus <code>IOptions&lt;T&gt;</code> when you need change notifications.</p>\n<h2 id=\"usage\" tabindex=\"-1\">Usage <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/strongly-typed-appsettings-configuration-in-net-core-with-validation/#usage\">#</a></h2>\n<p>Constructor injection:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppSettings</span> appSettings<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DoWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> connectionString <span class=\"token operator\">=</span> appSettings<span class=\"token punctuation\">.</span>ConnectionStrings<span class=\"token punctuation\">.</span>DefaultConnection<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// IntelliSense works, no magic strings, no null checks needed</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Blazor pages:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">@inject AppSettings appSettings</code></pre>\n<p>Minimal APIs:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/status\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AppSettings</span> settings<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> connectionString <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>ConnectionStrings<span class=\"token punctuation\">.</span>DefaultConnection<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Results<span class=\"token punctuation\">.</span><span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Status <span class=\"token operator\">=</span> <span class=\"token string\">\"Healthy\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"why-this-works\" tabindex=\"-1\">Why this works <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/strongly-typed-appsettings-configuration-in-net-core-with-validation/#why-this-works\">#</a></h2>\n<p>Required properties ensure missing configuration fails fast at startup with clear error messages. Nested classes as inner classes keep related settings grouped and make the hierarchy obvious. The compiler catches configuration problems immediately instead of NullReferenceExceptions deep in production code paths. IntelliSense is available, so no typos in magic strings.</p>\n",
			"date_published": "2023-01-08T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/select-n-plus-1-problem/",
			"url": "https://codingpipe.com/posts/select-n-plus-1-problem/",
			"title": "Solving the N+1 query problem",
			"content_html": "<p>Select N+1 is a data-access performance problem. Any code that iterates thru a collection of elements, and executes additional query for each element, has this problem. Thought, this behavior is avoidable.</p>\n<p>Let's look at this sample code:</p>\n<p><img src=\"https://codingpipe.com/img/select-n-plus-1-problem-diagram.jpg\" alt=\"diagram\"></p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> books <span class=\"token operator\">=</span> <span class=\"token function\">LoadBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 1st query</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> book <span class=\"token keyword\">in</span> books<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bookReviews <span class=\"token operator\">=</span> <span class=\"token function\">LoadBookReviews</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 2nd query, called N times</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code>LoadBooks()</code> makes a database query to load books. Then, for each book <code>LoadBookReviews(book.Id)</code> makes a query to load reviews for the given book. Loading books is one query, plus N additional queries for loading book reviews, results in N+1 database queries, where N is the number of books.</p>\n<p>If there are 100 loaded books, the above code will call 101 database queries, thus causing performance problems. Imagine if multiple users open the same page at the same time...</p>\n<p><strong>How does this look in SQL?</strong></p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token comment\">-- 1st query</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Book <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">-- 2nd query, N times</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> BookReview <span class=\"token keyword\">WHERE</span> BookId <span class=\"token operator\">=</span> <span class=\"token number\">1</span>    <span class=\"token comment\">-- BookId = @BookId</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> BookReview <span class=\"token keyword\">WHERE</span> BookId <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> BookReview <span class=\"token keyword\">WHERE</span> BookId <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<h2 id=\"solution-load-necessary-data-before-iterating-through-it\" tabindex=\"-1\">Solution: Load necessary data before iterating through it <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/select-n-plus-1-problem/#solution-load-necessary-data-before-iterating-through-it\">#</a></h2>\n<p>One solution to N+1 problem is to load all necessary data before iterating through it. This way we won't need to execute additional database queries to load child data in for-loops, since we will have that data loaded before.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> books <span class=\"token operator\">=</span> <span class=\"token function\">LoadBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 1st query</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reviews <span class=\"token operator\">=</span> <span class=\"token function\">LoadBookReviewsFor</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2nd query, called once</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> book <span class=\"token keyword\">in</span> books<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bookReviews <span class=\"token operator\">=</span> reviews<span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>BookId <span class=\"token operator\">==</span> book<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code>LoadBooks()</code> does the same thing as before, where <code>LoadBookReviewsFor(..book ids..)</code> queries the database to load all book reviews for a given list of books, instead for a single book.</p>\n<p>In this case, no matter how many books or reviews are there, the code will always call only 2 database queries; thus fixing the N+1 problem.</p>\n<p><strong>How does this look in SQL?</strong></p>\n<pre class=\"language-sql\" tabindex=\"0\"><code class=\"language-sql\"><span class=\"token comment\">-- 1st query</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Book <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">-- 2nd query</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> BookReview <span class=\"token keyword\">WHERE</span> BookId <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">-- BookId IN @BookIds</span></code></pre>\n<h2 id=\"example-in-entity-framework-with-navigation-properties-and-lazy-loading\" tabindex=\"-1\">Example in Entity Framework with navigation properties and lazy loading <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/select-n-plus-1-problem/#example-in-entity-framework-with-navigation-properties-and-lazy-loading\">#</a></h2>\n<p>Bad:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> books <span class=\"token operator\">=</span> dbContext<span class=\"token punctuation\">.</span>Books<span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1st query</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> book <span class=\"token keyword\">in</span> books<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bookReviews <span class=\"token operator\">=</span> book<span class=\"token punctuation\">.</span>Reviews<span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 2nd query, called N times via lazy loading</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Good: refactor to eager loading, using the <strong>Include</strong> feature.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> books <span class=\"token operator\">=</span> dbContext<span class=\"token punctuation\">.</span>Books<span class=\"token punctuation\">.</span><span class=\"token function\">Include</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Reviews<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1st query, batched</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> book <span class=\"token keyword\">in</span> books<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bookReviews <span class=\"token operator\">=</span> book<span class=\"token punctuation\">.</span>Reviews<span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// in-memory, no additional queries</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>By using <code>.Include(x =&gt; x.Reviews)</code> in Entity Framework (or <code>.Fetch(x =&gt; x.Reviews)</code> in NHibernate) we eagerly load related book reviews in a single database query. This approach solves the Select N+1 problem, but opens doors to loading too many objects in memory, especially when we need to load many related collections; in such cases, plain old SQL approach is preferred.</p>\n<h2 id=\"example-in-entity-framework-without-navigation-properties\" tabindex=\"-1\">Example in Entity Framework without navigation properties <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/select-n-plus-1-problem/#example-in-entity-framework-without-navigation-properties\">#</a></h2>\n<p>Bad:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> books <span class=\"token operator\">=</span> dbContext<span class=\"token punctuation\">.</span>Books<span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1st query</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> book <span class=\"token keyword\">in</span> books<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2nd query, called N times explicitelly </span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bookReviews <span class=\"token operator\">=</span> dbContext<span class=\"token punctuation\">.</span>BookReviews<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>BookId <span class=\"token operator\">==</span> book<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Good: <strong>load necessary data before iterating through it</strong></p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> books <span class=\"token operator\">=</span> dbContext<span class=\"token punctuation\">.</span>Books<span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 1st query</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bookIds <span class=\"token operator\">=</span> books<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> allReviews <span class=\"token operator\">=</span> dbContext<span class=\"token punctuation\">.</span>BookReviews           <span class=\"token comment\">// 2nd query</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> bookIds<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>BookId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> book <span class=\"token keyword\">in</span> books<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bookReviews <span class=\"token operator\">=</span> allReviews<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>BookId <span class=\"token operator\">==</span> book<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no additional query</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"example-in-marten-document-database\" tabindex=\"-1\">Example in Marten document database <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/select-n-plus-1-problem/#example-in-marten-document-database\">#</a></h2>\n<p>Bad:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> books <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Book<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1st query</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> book <span class=\"token keyword\">in</span> books<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2nd query, called N times explicitelly </span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bookReviews <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BookReview<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>BookId <span class=\"token operator\">==</span> book<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Good: same approach, <strong>load necessary data before iterating through it</strong></p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> books <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Book<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 1st query</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bookIds <span class=\"token operator\">=</span> books<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> allReviews <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Query</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BookReview<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 2nd query</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>BookId<span class=\"token punctuation\">.</span><span class=\"token function\">IsOneOf</span><span class=\"token punctuation\">(</span>bookIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> book <span class=\"token keyword\">in</span> books<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bookReviews <span class=\"token operator\">=</span> allReviews<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>BookId <span class=\"token operator\">==</span> book<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no additional query</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/select-n-plus-1-problem/#summary\">#</a></h2>\n<p>Select N+1 is a performance problem that can really slow down your application. The more &quot;N&quot; results the application has, the less performant it will be when this problem is not detected and fixed.</p>\n<p>Here we've seen how to detect such problem and how to fix it. The common approach follows a straightforward practice: <strong>load necessary data before iterating through it.</strong></p>\n",
			"date_published": "2018-06-10T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/extending-select2-with-adapters/",
			"url": "https://codingpipe.com/posts/extending-select2-with-adapters/",
			"title": "How to Extend Select2 with Adapters",
			"content_html": "<p>Starting from version 4.0, the Select2 jQuery plugin uses the adapter pattern as a way for developers to extend its features and behavior. Having implemented very custom select-based components, I can assure you that this is very powerful and useful feature.<!--excerpt--></p>\n<p>Unfortunately, the docs about this feature do not include concrete usage examples, so it's quite difficult to get started, to understand how to use it, and how to build on top of it - especially if you haven't worked with jQuery plugins for a while. So, this article offers usage examples and describes how to use Select2 <a href=\"https://select2.org/advanced/adapters-and-decorators\">adapters and decorators</a> feature.<!--excerpt--></p>\n<h2 id=\"what-are-adapters-and-decorators-in-select2\" tabindex=\"-1\">What are adapters and decorators in Select2? <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/extending-select2-with-adapters/#what-are-adapters-and-decorators-in-select2\">#</a></h2>\n<p>Adapter, adapts interface of an existing class to another interface. For example replacing the appearance of the selection input element with icon element.</p>\n<p>Decorator, attach additional responsibilities to an object dynamically. For example adding functional checkboxes in multiple select dropdown items, or dedicated search field in multiple selection dropdown.</p>\n<p>Select2 has several built-in adapters that can be used, overridden, and modified. You can find them explained in the <a href=\"https://select2.org/advanced/default-adapters\">advanced section in the docs</a>, and their source code in the <a href=\"https://github.com/select2/select2/tree/062c6c3af5f0f39794c34c0a343a3857e587cc97/src/js/select2\">GitHub repository</a>. For example, here is how <code>SelectionAdapter</code> is implemented (<a href=\"https://github.com/select2/select2/blob/062c6c3af5f0f39794c34c0a343a3857e587cc97/src/js/select2/selection/single.js\">link to source file</a>).</p>\n<p>From the internal use of the adapters in select2 source code you can actually re-use and adapt their code in your apps. This is the approach that helped me to better understand how to use this feature.</p>\n<p>You can take total control of the appearance and behavior of select2-based elements in your web apps by learning and exposing the full potential of this feature.</p>\n<h2 id=\"defining-and-using-custom-adapters\" tabindex=\"-1\">Defining and using custom adapters <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/extending-select2-with-adapters/#defining-and-using-custom-adapters\">#</a></h2>\n<p>A Select2 adapter is defined using an AMD module. Adapters can use other adapters or objects (to extend or decorate) by taking AMD module dependencies. Select2 automatically loads modules when the adapters are being constructed.</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\">$<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span>select2<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomSelectionAdapter\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"select2/utils\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"select2/selection/multiple\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"select2/selection/placeholder\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"select2/selection/eventRelay\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"select2/selection/single\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Utils<span class=\"token punctuation\">,</span> MultipleSelection<span class=\"token punctuation\">,</span> Placeholder<span class=\"token punctuation\">,</span> EventRelay<span class=\"token punctuation\">,</span> SingleSelection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Here goes the code of this custom adapter</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>This piece of code defines a custom <code>SelectionAdapter</code>. It should be executed only once. Usually it is called from application start, just after external libraries (like jQuery, Select2) are loaded, or just before it's first usage, in a lazy-execution way. For single-page applications, the lazy-execution is preferred approach.</p>\n<p>Custom adapters can be used when constructing select2 elements, by <em>requiring</em> the AMD module in which they are defined to the select2 configuration API. Bellow is an example where the already defined custom selection adapter is used.</p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>htmlElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    data<span class=\"token operator\">:</span> sampleDataAsArray<span class=\"token punctuation\">,</span>\n    selectionAdapter<span class=\"token operator\">:</span> $<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span>select2<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">.</span><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomSelectionAdapter\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now, the <code>htmlElement</code> will be transformed to a select2 element with customized <em>selection</em> interface and behavior, as defined in <code>CustomSelectionAdapter</code>. Besides customizing the <code>selectionAdapter</code>, you can customize also the <code>resultsAdapter</code>, <code>dataAdapter</code>, <code>ajaxAdapter</code>, <code>resultsAdapter</code>, and <code>dropdownAdapter</code>.</p>\n<h2 id=\"example-custom-multiple-select\" tabindex=\"-1\">Example: Custom multiple select <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/extending-select2-with-adapters/#example-custom-multiple-select\">#</a></h2>\n<p>This example demonstrates the full power of adapters and decorators feature. It extends<code>SelectionAdapter</code> and <code>DropdownAdapter</code> to fulfil the goals.</p>\n<p>Default behavior of the multiple select, to be modified is:</p>\n<ol>\n<li>Ability to search for items directly from the selection-box.</li>\n<li>Show selected items in the selection-box.</li>\n</ol>\n<p>Desired new behavior:</p>\n<ol>\n<li>Ability to search items from a dedicated search box, shown in the dropdown (same as in single select).</li>\n<li>Show number of selected items out of the total in the selection-box. Also, show arrow icon in the selection-box.</li>\n</ol>\n<p>At image bellow, the default and desired outcomes are visualized.</p>\n<p><img src=\"https://codingpipe.com/img/extending-select2-with-adapters.png\" alt=\"Custom multiple select\"></p>\n<p>To make select2 do the desired behavior, two custom adapters need to be written, a <code>SelectionAdapter</code> and a <code>DropdownAdapter</code>.</p>\n<blockquote>\n<p>Find the complete solution example on <a href=\"https://jsfiddle.net/bojanv91/ou7ohLd1/15\">jsFiddle</a>.</p>\n</blockquote>\n<p><strong>Step 1 - create custom selection adapter</strong></p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\">$<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span>select2<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomSelectionAdapter\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"select2/utils\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select2/selection/multiple\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select2/selection/placeholder\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select2/selection/eventRelay\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select2/selection/single\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>Utils<span class=\"token punctuation\">,</span> MultipleSelection<span class=\"token punctuation\">,</span> Placeholder<span class=\"token punctuation\">,</span> EventRelay<span class=\"token punctuation\">,</span> SingleSelection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Decorates MultipleSelection with Placeholder</span>\n    <span class=\"token keyword\">let</span> adapter <span class=\"token operator\">=</span> Utils<span class=\"token punctuation\">.</span><span class=\"token function\">Decorate</span><span class=\"token punctuation\">(</span>MultipleSelection<span class=\"token punctuation\">,</span> Placeholder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Decorates adapter with EventRelay - ensures events will continue to fire</span>\n    <span class=\"token comment\">// e.g. selected, changed</span>\n    adapter <span class=\"token operator\">=</span> Utils<span class=\"token punctuation\">.</span><span class=\"token function\">Decorate</span><span class=\"token punctuation\">(</span>adapter<span class=\"token punctuation\">,</span> EventRelay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    adapter<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Use selection-box from SingleSelection adapter</span>\n      <span class=\"token comment\">// This implementation overrides the default implementation</span>\n      <span class=\"token keyword\">let</span> $selection <span class=\"token operator\">=</span> SingleSelection<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $selection<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    adapter<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// copy and modify SingleSelection adapter</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">let</span> $rendered <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$selection<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.select2-selection__rendered'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> noItemsSelected <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> formatted <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>noItemsSelected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        formatted <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"placeholder\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> itemsData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          selected<span class=\"token operator\">:</span> data <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          all<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$element<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"option\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Pass selected and all items to display method</span>\n        <span class=\"token comment\">// which calls templateSelection</span>\n        formatted <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span>itemsData<span class=\"token punctuation\">,</span> $rendered<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      $rendered<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>formatted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      $rendered<span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> formatted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> adapter<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Step 2 - create custom dropdown adapter</strong></p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\">$<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span>select2<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomDropdownAdapter\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"select2/utils\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select2/dropdown\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select2/dropdown/attachBody\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select2/dropdown/attachContainer\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select2/dropdown/search\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"select2/dropdown/minimumResultsForSearch\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>Utils<span class=\"token punctuation\">,</span> Dropdown<span class=\"token punctuation\">,</span> AttachBody<span class=\"token punctuation\">,</span> AttachContainer<span class=\"token punctuation\">,</span> Search<span class=\"token punctuation\">,</span> MinimumResultsForSearch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Decorate Dropdown with Search functionalities</span>\n    <span class=\"token keyword\">let</span> dropdownWithSearch <span class=\"token operator\">=</span> Utils<span class=\"token punctuation\">.</span><span class=\"token function\">Decorate</span><span class=\"token punctuation\">(</span>Dropdown<span class=\"token punctuation\">,</span> Search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dropdownWithSearch<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Copy and modify default search render method</span>\n      <span class=\"token keyword\">var</span> $rendered <span class=\"token operator\">=</span> Dropdown<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Add ability for a placeholder in the search box</span>\n      <span class=\"token keyword\">let</span> placeholder <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"placeholderForSearch\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> $search <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'&lt;span class=\"select2-search select2-search--dropdown\">'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">'&lt;input class=\"select2-search__field\" placeholder=\"'</span> <span class=\"token operator\">+</span> placeholder <span class=\"token operator\">+</span> <span class=\"token string\">'\" type=\"search\"'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">' tabindex=\"-1\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\"'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">' spellcheck=\"false\" role=\"textbox\" />'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">'&lt;/span>'</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$searchContainer <span class=\"token operator\">=</span> $search<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$search <span class=\"token operator\">=</span> $search<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      $rendered<span class=\"token punctuation\">.</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span>$search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> $rendered<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Decorate the dropdown+search with necessary containers</span>\n    <span class=\"token keyword\">let</span> adapter <span class=\"token operator\">=</span> Utils<span class=\"token punctuation\">.</span><span class=\"token function\">Decorate</span><span class=\"token punctuation\">(</span>dropdownWithSearch<span class=\"token punctuation\">,</span> AttachContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    adapter <span class=\"token operator\">=</span> Utils<span class=\"token punctuation\">.</span><span class=\"token function\">Decorate</span><span class=\"token punctuation\">(</span>adapter<span class=\"token punctuation\">,</span> AttachBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> adapter<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Step 3 - use the defined adapters</strong></p>\n<pre class=\"language-typescript\" tabindex=\"0\"><code class=\"language-typescript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#multipleWithSearch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> testData<span class=\"token punctuation\">,</span>\n  placeholder<span class=\"token operator\">:</span> <span class=\"token string\">\"Select items\"</span><span class=\"token punctuation\">,</span>\n  placeholderForSearch<span class=\"token operator\">:</span> <span class=\"token string\">\"Filter items\"</span><span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">// additional placeholder for search box</span>\n  closeOnSelect<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Make selection-box similar to single select</span>\n  selectionAdapter<span class=\"token operator\">:</span> $<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span>select2<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">.</span><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomSelectionAdapter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">templateSelection</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Selected </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span>selected<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> out of </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>data<span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Add search box in dropdown</span>\n  dropdownAdapter<span class=\"token operator\">:</span> $<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span>select2<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">.</span><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomDropdownAdapter\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Find the complete solution example on <a href=\"https://jsfiddle.net/bojanv91/ou7ohLd1/15\">jsFiddle</a>.</p>\n<h2 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/extending-select2-with-adapters/#summary\">#</a></h2>\n<p>This article explains how you can extend Select2 plugin by utilizing its adapters and decorators feature.</p>\n<p>To create better custom adapters, try to re-use the built-in adapters, and modify them on the go. By doing that you will learn more about select2 internals, thus your custom adapters will be much cleaner and you will have less code to debug.</p>\n<p>Finally, observe the example code on <a href=\"https://jsfiddle.net/bojanv91/ou7ohLd1/15\">jsFiddle</a>, modify it and see how you can further customize select2 as per your needs.</p>\n<p>NOTE: I use the select2 plugin in my Aurelia apps by wrapping common behavior in custom elements. So far, so good. It's nice that we are able to easily re-use proven components/plugins from other major platforms.</p>\n",
			"date_published": "2017-10-24T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/refactoring-a-feature-envy-code/",
			"url": "https://codingpipe.com/posts/refactoring-a-feature-envy-code/",
			"title": "Feature envy refactoring - moving methods to their rightful home",
			"content_html": "<p>In a design review meeting a colleague asked: &quot;Why sometimes we directly manipulate dependent objects fields, and sometimes we put the manipulation logic behind methods in those objects? What are pros/cons in both approaches?&quot;<!--excerpt--> This was a great question, because it opened a productive discussion. Checking the <a href=\"https://blog.codinghorror.com/code-smells/\">code smells taxonomy</a>, and analyzing the code under review deeper, we identified it belongs to the feature envy code smells category. And this is how we refactored it.<!--excerpt--></p>\n<p><strong>What is feature envy code?</strong>\n<em>Feature envy</em> is a code smell describing when an object accesses fields of another object to execute some operation, instead of just telling the object what to do.</p>\n<p>Let's analyze the following code segment, and try to refactor it.\nFor better context, it addresses the requirement: <em>An active user can pay a pending order. For reporting purposes the order tracks when and who paid it.</em></p>\n<h2 id=\"original-code-segment-simplified\" tabindex=\"-1\">Original code segment (simplified) <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/refactoring-a-feature-envy-code/#original-code-segment-simplified\">#</a></h2>\n<p>Here you can see the original code segment greatly simplified, so it's easier to follow.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PayOrderRequest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Guid</span> OrderId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PayOrderHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BaseCommandHandler<span class=\"token punctuation\">&lt;</span>PayOrderRequest<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PayOrderRequest</span> request<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> currentUser <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>LoggedInUserId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> order <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Order<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>OrderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// checks if the order can be paid</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> OrderStatus<span class=\"token punctuation\">.</span>Pending <span class=\"token operator\">&amp;&amp;</span> currentUser<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> UserStatus<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// pay the order, and record related information</span>\n            order<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> OrderStatus<span class=\"token punctuation\">.</span>Completed<span class=\"token punctuation\">;</span>\n            order<span class=\"token punctuation\">.</span>PaidByUserId <span class=\"token operator\">=</span> currentUser<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">;</span>\n            order<span class=\"token punctuation\">.</span>PaidOnUtc <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CoreException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">currentUser<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> cannot pay this order.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        Session<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The core problem with this code is that it breaks encapsulation. The command handler depends too much on the <code>order</code> internals, and forms tight coupling. The <code>order</code> leaked it's domain logic to the command handler, thus it became anemic data-object.</p>\n<p>Besides breaking encapsulation, it also makes the paying order functionality  hard to unit test. The command handler depends on the database via the session object, and to the logged in user provider. Writing a unit test for this, means we need to write mocks for both services. If we refactor it, fixing the encapsulation, we'll see that writing unit tests will be an easier task to do. Besides, why create mocks until deemed necessary?</p>\n<p>Ultimately, the command handler should only coordinate the workflow, and the order object should only deal with the domain logic. They should not mix responsibilities between themselves. But this is not the case we have here.</p>\n<p>Our question is, can the command handler <strong>tell</strong> the <code>order</code> what to do, encapsulating the logic, instead of asking it for too many details? Let's find out.</p>\n<h2 id=\"step-1-hold-precondition-result-in-an-inline-variable\" tabindex=\"-1\">Step 1 - hold precondition result in an inline variable <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/refactoring-a-feature-envy-code/#step-1-hold-precondition-result-in-an-inline-variable\">#</a></h2>\n<p>Let's introduce <code>canOrderByPaid</code> boolean variable which will hold the result of the precondition for paying an order.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// Original</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> OrderStatus<span class=\"token punctuation\">.</span>Pending <span class=\"token operator\">&amp;&amp;</span> currentUser<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> UserStatus<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n  \n\n<span class=\"token comment\">// Refactored (step 1)</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> canOrderByPaid <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> OrderStatus<span class=\"token punctuation\">.</span>Pending <span class=\"token operator\">&amp;&amp;</span> currentUser<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> UserStatus<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canOrderByPaid<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>It's better to create a inline variable to describe more complex condition checks, and use it in the if-condition statement, than having bloated if-condition statement with a comment above, describing what it does.</p>\n<h2 id=\"step-2-encapsulate-the-precondition-in-the-order\" tabindex=\"-1\">Step 2 - encapsulate the precondition in the <code>Order</code> <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/refactoring-a-feature-envy-code/#step-2-encapsulate-the-precondition-in-the-order\">#</a></h2>\n<p>Now it makes sense to encapsulate the precondition for paying an order, in the order object itself.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// Original</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> OrderStatus<span class=\"token punctuation\">.</span>Pending <span class=\"token operator\">&amp;&amp;</span> currentUser<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> UserStatus<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n  \n\n<span class=\"token comment\">// Refactored (step 1)</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> canOrderByPaid <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> OrderStatus<span class=\"token punctuation\">.</span>Pending <span class=\"token operator\">&amp;&amp;</span> currentUser<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> UserStatus<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canOrderByPaid<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// Refactored (step 2)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">CanBePaidBy</span><span class=\"token punctuation\">(</span>currentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span> <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>The order class:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Code removed for clarity */</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">CanBePaidBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> \n        <span class=\"token operator\">=></span> Status <span class=\"token operator\">==</span> OrderStatus<span class=\"token punctuation\">.</span>Pending <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> UserStatus<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Code removed for clarity */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>With this change, we eliminated coupling from the command handler to the fields of order and user classes (e.g. <code>order.Status</code>, <code>user.Status</code>). Imagine in more complex cases, how much direct coupling will be reduced only by following good encapsulation.</p>\n<h2 id=\"step-3-encapsulate-the-actual-operation\" tabindex=\"-1\">Step 3 - encapsulate the actual operation <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/refactoring-a-feature-envy-code/#step-3-encapsulate-the-actual-operation\">#</a></h2>\n<p>Following the same way how we encapsulated the paying precondition, we'll encapsulate the paying operation.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// Refactored (step 2)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">CanBePaidBy</span><span class=\"token punctuation\">(</span>currentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    order<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> OrderStatus<span class=\"token punctuation\">.</span>Completed<span class=\"token punctuation\">;</span>\n    order<span class=\"token punctuation\">.</span>PaidByUserId <span class=\"token operator\">=</span> currentUser<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">;</span>\n    order<span class=\"token punctuation\">.</span>PaidOnUtc <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CoreException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">currentUser<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> cannot pay this order.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// Refactored (step 3)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">CanBePaidBy</span><span class=\"token punctuation\">(</span>currentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    order<span class=\"token punctuation\">.</span><span class=\"token function\">Pay</span><span class=\"token punctuation\">(</span>currentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CoreException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"User </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">currentUser<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> cannot pay this order.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The order class:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Code removed for clarity */</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Pay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> payer<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n        Status <span class=\"token operator\">=</span> OrderStatus<span class=\"token punctuation\">.</span>Completed<span class=\"token punctuation\">;</span>\n        PaidByUserId <span class=\"token operator\">=</span> payer<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">;</span>\n        PaidOnUtc <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* Code removed for clarity */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"step-4-encapsulate-further\" tabindex=\"-1\">Step 4 - encapsulate further <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/refactoring-a-feature-envy-code/#step-4-encapsulate-further\">#</a></h2>\n<p>Seeing the refactoring changes in previous steps, this final refactoring change comes natural.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">// Refactored (step 3)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">CanBePaidBy</span><span class=\"token punctuation\">(</span>currentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    order<span class=\"token punctuation\">.</span><span class=\"token function\">Pay</span><span class=\"token punctuation\">(</span>currentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CoreException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"User </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">currentUser<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> cannot pay this order.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// Refactored (step 4)</span>\norder<span class=\"token punctuation\">.</span><span class=\"token function\">Pay</span><span class=\"token punctuation\">(</span>currentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The order class:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Code removed for clarity */</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Pay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> payer<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CanBePaidBy</span><span class=\"token punctuation\">(</span>payer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CoreException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"User </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">payer<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> cannot pay this order.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Status <span class=\"token operator\">=</span> OrderStatus<span class=\"token punctuation\">.</span>Completed<span class=\"token punctuation\">;</span>\n        PaidByUserId <span class=\"token operator\">=</span> payer<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">;</span>\n        PaidOnUtc <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* Code removed for clarity */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"the-final-refactored-code\" tabindex=\"-1\">The final refactored code <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/refactoring-a-feature-envy-code/#the-final-refactored-code\">#</a></h2>\n<p>This is how the final refactored code looks like. Compare it to the original one in the beginning of this session. What key difference can you identify?</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PayOrderRequest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Guid</span> OrderId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PayOrderHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BaseCommandHandler<span class=\"token punctuation\">&lt;</span>PayOrderRequest<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PayOrderRequest</span> request<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> currentUser <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>LoggedInUserId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> order <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Order<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>OrderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        order<span class=\"token punctuation\">.</span><span class=\"token function\">Pay</span><span class=\"token punctuation\">(</span>currentUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        Session<span class=\"token punctuation\">.</span><span class=\"token function\">Store</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>And the <code>Order</code> class, encapsulating the domain logic:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Code removed for clarity */</span>\n  \n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">OrderStatus</span> Status <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Guid</span> PaidByUserId <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> PaidOnUtc <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Pay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> payer<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CanBePaidBy</span><span class=\"token punctuation\">(</span>payer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CoreException</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"User </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">payer<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> cannot pay this order.\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        order<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> OrderStatus<span class=\"token punctuation\">.</span>Completed<span class=\"token punctuation\">;</span>\n        order<span class=\"token punctuation\">.</span>PaidByUserId <span class=\"token operator\">=</span> payer<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">;</span>\n        order<span class=\"token punctuation\">.</span>PaidOnUtc <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">CanBePaidBy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> \n        <span class=\"token operator\">=></span> Status <span class=\"token operator\">==</span> OrderStatus<span class=\"token punctuation\">.</span>Pending <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> UserStatus<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Code removed for clarity */</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>You can see we moved the domain logic out of the command handler, and we put it to the <code>Order</code> entity, where it belongs.</p>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/refactoring-a-feature-envy-code/#conclusion\">#</a></h2>\n<p>The benefits we achieved from this refactoring session are:</p>\n<ul>\n<li>The command handler <strong>stops asking</strong> for details (and internals). Now it <strong>tells</strong> what other objects should do. Does not care about the details anymore. With this, we fulfilled the <strong>Tell Don't Ask Principle</strong>.</li>\n<li>The direct <strong>coupling</strong> from the command handler to the fields in user and order classes is <strong>eliminated</strong>. Less coupling, more sanity.</li>\n<li>The <code>Order</code> class is not a bag of public set properties anymore. It's not anemic, it's not a data-class. Now it has cohesive responsibility, <strong>encapsulating the actions it can perform</strong>.</li>\n<li><strong>Domain logic</strong> for paying <strong>is not leaked</strong> in other classes anymore. Now it's located in the responsible class itself. So, only by looking at the <code>Order</code> class we can understand what it can do. No need to open other related classes.</li>\n<li>Paying functionality can be easily <strong>unit tested</strong>, without having to deal with special mocking techniques. Less mocks, better tests.</li>\n</ul>\n<p><strong>Rule of thumb:</strong> Where ever you see a method uses fields of another class extensively to perform some action, consider moving the action's logic into <em>that</em> class itself.</p>\n",
			"date_published": "2017-07-29T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/visual-studio-2017-notes/",
			"url": "https://codingpipe.com/posts/visual-studio-2017-notes/",
			"title": "Visual Studio 2017 Tips",
			"content_html": "<p>Visual Studio 2017 has shipped. In this post I highlight the top changes from my perspective and the list of all useful extensions I've installed.<!--excerpt--></p>\n<p>For VS2015 extensions, check my <a href=\"https://codingpipe.com/2016/12/vs2016-extensions/\">older post</a>.</p>\n<h2 id=\"top-5-highlights-from-my-perspective\" tabindex=\"-1\">Top 5 Highlights From My Perspective <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/visual-studio-2017-notes/#top-5-highlights-from-my-perspective\">#</a></h2>\n<p>To see all new features and changes, check the <a href=\"https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes\">VS2017 release notes</a>. Here is my top list:</p>\n<ul>\n<li><a href=\"https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#csharpvb\">Support for C# 7</a></li>\n<li><a href=\"https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#coding-convention-support-via-editorconfig\">Support for Coding Convention via EditorConfig. Finally!</a>.</li>\n<li><a href=\"https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#dotnetcore\">Stable tools support for .NET Core and ASP.NET Core</a>.</li>\n<li><a href=\"https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#debug\">Improved Exception Helper for Debugging</a>.</li>\n<li><a href=\"https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes#a-idbetternav-aimproved-code-navigation\">Improved Code Navigation via &quot;Richer Omnibar&quot;</a>.</li>\n</ul>\n<h2 id=\"extensions\" tabindex=\"-1\">Extensions <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/visual-studio-2017-notes/#extensions\">#</a></h2>\n<ul>\n<li><a href=\"http://vsrefactoringessentials.com/\">Refactoring Essentials</a>. C# analyzers and refactoring proposals.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MadsKristensen.AddNewFile\">Add New File</a>. Create any type of files via standard templates without touching the mouse. Mapped to Ctrl+Shift+A.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MadsKristensen.OpenCommandLine\">Open Command Line</a>. Opens CMD in current solution directory. Mapped to Alt+Space.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.PowerCommandsforVisualStudio\">PowerCommands is a set of useful extensions for the Visual Studio IDE</a>. Besides the defaults, I've turned on &quot;Format document on save&quot; option.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.TimeStampMargin\">Time Stamp Margin</a>. Adds timestamps in the output dialog.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager\">ResXManager</a>. Manage localization of all ResX-Based resources in one place. Shows all resources of a solution and let's you edit the strings and their localizations in a well-arranged data grid.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MadsKristensen.ProjectFileTools\">Project File Tools</a>. Provides Intellisense and other tooling for XML based project files such as .csproj and .vbproj files.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MadsKristensen.VuejsPack-18329\">Vue.js Pack 2017</a>. Intellisense for Vue.js.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MadsKristensen.AureliaPack\">Aurelia Pack</a>. A snippet pack to make you more productive working with the Aurelia JavaScript framework.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=frhagn.Typewriter\">Typewriter</a>. Typewriter generates TypeScript files from c# code files using TypeScript Templates. This allows you to create fully typed TypeScript representations of server side API that automatically updates when you make changes to your C# code.</li>\n</ul>\n",
			"date_published": "2017-03-09T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/vs2016-extensions/",
			"url": "https://codingpipe.com/posts/vs2016-extensions/",
			"title": "Top Visual Studio 2015 Extensions I Use",
			"content_html": "<p>Rich IDEs are a great asset to enhance productivity in writing and reading code.<!--excerpt--></p>\n<p>Visual Studio 2015 as a rich IDE helps a lot when navigating through code and files, refactoring, smart searching classes/methods/properties and much more. But still there are some useful or improved functionalities not baked in, that can be easily found as extensions.<!--excerpt--></p>\n<p><strong>Here is the list of extensions that I use every day:</strong></p>\n<ul>\n<li><a href=\"http://vsrefactoringessentials.com/\">Refactoring Essentials</a> - Rich free refactoring tool for C#.</li>\n<li><a href=\"https://visualstudiogallery.msdn.microsoft.com/3f820e99-6c0d-41db-aa74-a18d9623b1f3\">Add New File</a> - The fastest and easiest way to add new files to any project.</li>\n<li><a href=\"https://github.com/jaredpar/EasyMotion\">Easy Motion</a> - A vim EasyMotion clone for Visual Studio. Instead of moving your hands to the arrow keys or even worse, grabbing the mouse, simple initiate an easy motion search by pressing <code>Shift + Control + ;</code>. (<em>NOTE: I changed my shortcut to be bound to <code>Ctrl + Shift + F</code> as I can trigger it only using the left hand.</em>)</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=SteveDowerMSFT.IndentGuides\">Indent Guides </a> - Adds vertical lines at each indent level. It can even add a vertical line to a certain character length (e.g. on 100 characters length so you know visually how long is your line of code).</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=GolanAvraham.ConfigurationTransform\">Configuration Transform</a> - Automatically transform web.config, app.config or any other config during the build process. Once the transformation is set, it will run on other build machines without the extension.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MatthewJohnsonMSFT.HideMainMenu\">Hide Main Menu</a> - Automatically hides the Visual Studio main menu when not in use. To show when hidden, press <code>ALT</code> key.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=mayerwin.RenameVisualStudioWindowTitle\">Rename Visual Studio Window Title </a> - This lightweight extension allows changing the window title of Visual Studio to include a folder tree with a configurable distance from the solution/project file. (<em>NOTE: The title template I use is:<code>[solutionName] ([configurationName]) - [documentParentPath:2:0]</code></em>)</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MadsKristensen.OpenCommandLine\">Open Command Line</a> - Opens a command line at the root of the project by pressing <code>ALT + Space</code>. Useful when you need to execute commands from CMD at the current project's directory.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager\">ResXManager</a> - Manage localization of all ResX-Based resources in one place. Shows all resources of a solution and lets you edit the strings and their localizations in a well-arranged data grid.</li>\n</ul>\n<p><em>NOTE: I do evaluate performance hit on Visual Studio itself before I use or recommend an extension. There are some other good extensions too that I don't use because they slow down Visual Studio a lot. Fast and responsive IDE has higher priority than new or improved functionalities on my machine :)</em></p>\n<p>What extensions do <em>you</em> use, dear reader?</p>\n",
			"date_published": "2016-12-31T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/",
			"url": "https://codingpipe.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/",
			"title": "Global Day of Coderetreat 2016 Skopje Event Recap",
			"content_html": "<p><code>#GDCR16</code> is a day for celebrating passion and software craftsmanship. This year's event in Skopje, Macedonia was a blast! Fresh ideas, new perspectives and great people is everything you need for such an event.<!--excerpt--></p>\n<h2 id=\"about-the-event\" tabindex=\"-1\">About the event <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/#about-the-event\">#</a></h2>\n<p><a href=\"http://globalday.coderetreat.org/\">Coderetreat</a> is a one day event that provides developers the opportunity for skills improvement by focusing on software development and <strong>design fundamentals</strong>. By practicing the basic principles of <strong>modular and object-oriented design</strong>, participants can improve their ability to write code that <strong>minimizes the cost of change over time</strong>. It aims to shrink the gap between the code we write under pressure of needing to deliver on time and the perfect code.</p>\n<p><img src=\"https://codingpipe.com/img/2016-10-27-global-day-of-coderetreat-2016-haselt-macedonia/6.png\" alt=\"Global Day of Coderetreat 2016 in Skopje, Macedonia\"></p>\n<h2 id=\"hosting-and-facilitating\" tabindex=\"-1\">Hosting and facilitating <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/#hosting-and-facilitating\">#</a></h2>\n<p>Having the huge enthusiasm about community work and passion in software development and coding, <a href=\"http://www.haselt.com/\">HASELT</a> supported this year's Coderetreat in Macedonia by providing sponsorship, logistics for organization and space where programmers were gathered. We've had the pleasure to have with us <a href=\"https://codingpipe.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/dalibornasevic.com\">Dalibor Nasevic</a>, who is long-time facilitator of Coderetreat events in Macedonia and helped all attendees to make the most out of the event.</p>\n<p><img src=\"https://codingpipe.com/img/2016-10-27-global-day-of-coderetreat-2016-haselt-macedonia/2.png\" alt=\"Global Day of Coderetreat 2016 in Skopje, Macedonia\"></p>\n<p><img src=\"https://codingpipe.com/img/2016-10-27-global-day-of-coderetreat-2016-haselt-macedonia/3.png\" alt=\"Global Day of Coderetreat 2016 in Skopje, Macedonia\"></p>\n<h2 id=\"sessions\" tabindex=\"-1\">Sessions <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/#sessions\">#</a></h2>\n<p>Starting early in the morning the facilitator introduced the agenda for the day. There were five sessions of pair programming. After each session, retrospective meetings were held where each pair discussed what they did. After that, participants switched pairs and prepared for the next session.</p>\n<p>The first session was intended to get the participants familiar with the problem, and introduction to <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Conway's Game of Life</a>. In the second session, &quot;Ping-pong pair programming&quot;, the pairs learned the importance of communication when pairing and collaborate together to see other ways of writing code. The third session was &quot;No primitives across method boundaries (input or output)&quot;. In the fourth session, &quot;No conditionals&quot;, the pairs had to find ways of avoiding conditionals and fewer logical paths. The last session, &quot;Evil pair programming&quot; was designed to practice writing quality tests, where the tester tries to write good tests and the coder writes just enough code to pass tests.</p>\n<p>At the end of all sessions, the participants had the final retrospective with Dalibor. He asked the following questions, to which all participants shared their thoughts:</p>\n<ul>\n<li>What, if anything, did you learn today?</li>\n<li>What, if anything, surprised you today?</li>\n<li>What, if anything, will you do differently moving forward?</li>\n</ul>\n<p><img src=\"https://codingpipe.com/img/2016-10-27-global-day-of-coderetreat-2016-haselt-macedonia/4.png\" alt=\"Global Day of Coderetreat 2016 in Skopje, Macedonia\"></p>\n<h2 id=\"impressions-from-the-event\" tabindex=\"-1\">Impressions from the event <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/#impressions-from-the-event\">#</a></h2>\n<p>Being able to see so diverse thoughts about designing software was truly inspirational, and the way how people collaborated and shared their ideas was really empowering to everyone, including myself.</p>\n<p>Personally, if I have to choose only a single event that I would like to attend to, Coderetreat would be definitely <em>that</em> one.</p>\n<p><strong>Here are impressions shared by my awesome colleagues, the driving force of the whole organization:</strong></p>\n<blockquote>\n<p>We had an amazing time, meeting developers willing to learn, improve and also share their knowledge with others. We hope that the participants found this event as inspirational and productive as we do.</p>\n</blockquote>\n<p><strong>and also, the impressions shared by Dalibor who put his energy and enthusiasm guiding the participants during the whole day:</strong></p>\n<blockquote>\n<p>It was great experience for me being part of another Global Day of Coderetreat and facilitate the local event in Skopje. I am very grateful to Bojan and the rest of the HASELT team for their passion and inspirational energy in organizing and hosting the event. I'm very happy for the attendees too. The ones for who the event is. The ones that chose to spend that Saturday practicing software design with other developers, work in different programming languages, share their knowledge and improve their craft together. Their passion, their positive energy and their enthusiasm. It's great to see how inspirational the event can be for them and what they are going to change on their daily jobs starting Monday.</p>\n</blockquote>\n<p><img src=\"https://codingpipe.com/img/2016-10-27-global-day-of-coderetreat-2016-haselt-macedonia/5.png\" alt=\"Global Day of Coderetreat 2016 in Skopje, Macedonia\"></p>\n<h2 id=\"whats-next\" tabindex=\"-1\">What's next? <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/#whats-next\">#</a></h2>\n<p>Next, after being part of this very inspirational event, we are encouraged to contribute even more to the local software development community. So, we put ourselves a goal to organize many similar tech events, workshops and regular meet-ups in order to bring the local community even closer, by encouraging discussions, empowering people, sharing experiences and ideas. Stay tuned for more info which is coming, very soon!</p>\n<h2 id=\"additional-reading\" tabindex=\"-1\">Additional Reading <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/global-day-of-coderetreat-2016-haselt-macedonia/#additional-reading\">#</a></h2>\n<ul>\n<li><a href=\"http://dalibornasevic.com/posts/74-notes-from-global-day-of-coderetreat-2016-in-skopje\">Dalibor's notes of Global Day of Coderetreat in Skopje</a></li>\n<li><a href=\"https://leanpub.com/4rulesofsimpledesign/c/gdcr\">Book: Understanding the Four Rules of Simple Design by Corey Haines</a></li>\n<li><a href=\"http://coderetreat.org/\">http://coderetreat.org/ </a></li>\n<li><a href=\"http://globalday.coderetreat.org/\">http://globalday.coderetreat.org/</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Conway's Game of Life</a></li>\n</ul>\n<p>Dear reader, thanks for investing your time in reading our collective story, and I hope you'll be inspired enough to join us in the next events, which are coming soon. Oh, and don't forget: always be learning, always be coding.</p>\n<p><strong><a href=\"https://www.facebook.com/HASELTofficial/photos/?tab=album&amp;album_id=666003166900108\">See more pictures here</a>.</strong></p>\n<blockquote>\n<p>This post was originally posted on <a href=\"http://haselt.com/global-day-of-coderetreat-2016-haselt/\">http://haselt.com</a>.</p>\n<p>A special thanks to my colleague <a href=\"https://www.linkedin.com/in/viktorijanikolovska\">Viktorija Nikolovska</a> for her help with this article.</p>\n</blockquote>\n",
			"date_published": "2016-10-27T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/feature-folders-structure-in-asp-net/",
			"url": "https://codingpipe.com/posts/feature-folders-structure-in-asp-net/",
			"title": "ASP.NET MVC5 Feature Folders Structure",
			"content_html": "<p>Structuring your files around <strong>business concerns</strong> is more natural way of handling projects than structuring them around <strong>technical concerns</strong>. The <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">Separation of Concerns</a> is applied in both approaches, but not both of them give the same desired clarity and ease for developers. This blogpost focuses on organizing MVC projects around <strong>feature folders</strong>, which represent the business concerns.<!--excerpt--></p>\n<p>Most of the time developers make modifications related to a single feature (e.g. adding new fields, changing business rules, adding validation...). Structuring folders around interrelated files can make modification process simpler. The common MVC folder structure violates the rule of <em>&quot;Files that change together should be structured together&quot;</em>. Structuring by business concerns embraces this very important rule.</p>\n<blockquote>\n<p>Files that change together should be structured together.</p>\n</blockquote>\n<h2 id=\"horizontal-technical-vs-vertical-business-folder-structure\" tabindex=\"-1\">Horizontal (Technical) vs. Vertical (Business) Folder Structure <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/feature-folders-structure-in-asp-net/#horizontal-technical-vs-vertical-business-folder-structure\">#</a></h2>\n<p>On the left side you can see the common MVC structure. On the right side you can see the feature folders structure of the very same project.</p>\n<pre class=\"language-plaintext\" tabindex=\"0\"><code class=\"language-plaintext\">    Styles\n        Shared.css\n        Login.css\n    Scripts\n        Login.js\n    Controllers\n        CoursesController.cs\n        DepartmentsController.cs\n        EnrollmentsController.cs\n        InstructorsController.cs\n        StudentsController.cs\n        UsersController.cs\n    Models  \n        CourseEditModel.cs\n        CourseIndexModel.cs\n        DepartmentEditModel.cs\n        DepartmentIndexModel.cs\n        EnrollmentEditModel.cs\n        EnrollmentIndexModel.cs\n        InstructorEditModel.cs\n        InstructorIndexModel.cs\n        StudentEditModel.cs\n        StudentIndexModel.cs\n        UserLoginModel.cs\n        UserRegisterModel.cs\n        UserForgotPasswordModel.cs\n    Views\n        Courses\n            Edit.cshtml\n            Index.cshtml\n        Departments\n            Edit.cshtml\n            Index.cshtml\n        Enrollments\n            Edit.cshtml\n            Index.cshtml\n        Instructors\n            Edit.cshtml\n            Index.cshtml\n        Shared\n            _Layout.cshtml\n        Students\n            Edit.cshtml\n            Index.cshtml\n        Users\n            ForgotPassword.cshtml\n            Login.cshtml\n            Register.cshtml\n    _ViewStart.cshtml</code></pre>\n<div style=\"\"></div>\n<pre class=\"language-plaintext\" tabindex=\"0\"><code class=\"language-plaintext\">    Features\n        Courses\n            CoursesController.cs\n            Edit.cs\n            Edit.cshtml\n            Index.cs\n            Index.cshtml\n        Departments\n            DepartmentsController.cs\n            Edit.cs\n            Edit.cshtml\n            Index.cs\n            Index.cshtml\n        Enrollments\n            EnrollmentsController.cs\n            Edit.cs\n            Edit.cshtml\n            Index.cs\n            Index.cshtml\n        Instructors\n            InstructorsController.cs\n            Edit.cs\n            Edit.cshtml\n            Index.cs\n            Index.cshtml\n        Shared\n            _Layout.cshtml\n            Shared.css\n        Students\n            StudentsController.cs\n            Edit.cs\n            Edit.cshtml\n            Index.cs\n            Index.cshtml\n        Users\n            UsersController.cs\n            ForgotPassword.cs\n            ForgotPassword.cshtml\n            Login.cs\n            Login.cshtml\n            Login.css\n            Login.js\n            Register.cs\n            Register.cshtml\n    _ViewStart.cshtml</code></pre>\n<p>When you see this in your IDE (e.g. in Visual Studio), the distinction between the files is even greater, given that there is accompanied file type icon shown besides the filename.</p>\n<p>Now, imagine you scale in amount of features, in addition to the standard N-Layer stuff like repositories, services, handlers, DTOs, etc... You will soon notice that things are starting to get messy in the technical folders organization. In the feature folders organization, each feature can scale on it's own, thus much easier to manage.</p>\n<p>Food for thought:</p>\n<ul>\n<li>What if we put our CSS and JavaScript files also in these feature folders?</li>\n<li>What if one feature folder becomes so demanding on the UI that needs to be a full SPA view/module - can we structure it to use Angular?</li>\n<li>Can we develop one feature UI in Angular, another one in React, all other in classic server-side MVC, and stay sane with our overall project structure?</li>\n</ul>\n<p>Example of single feature evolved as Angular application/module:</p>\n<pre class=\"language-plaintext\" tabindex=\"0\"><code class=\"language-plaintext\">    Features\n        ...\n        ShoppingCart\n            Components\n                CartComponent.js\n                CartComponent.css\n                PaymentComponent.js\n                PaymentComponent.css\n                CartContainer.js\n            App.js\n            App.css\n            Index.cshtml\n            ShoppingCartController.cs\n        ...</code></pre>\n<h2 id=\"benefits-of-using-feature-folders-over-technical-folder-structure\" tabindex=\"-1\">Benefits of using Feature Folders (over technical folder structure) <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/feature-folders-structure-in-asp-net/#benefits-of-using-feature-folders-over-technical-folder-structure\">#</a></h2>\n<p>Structuring your files by features (business concerns) makes things easier to find and manage.</p>\n<ul>\n<li>Time spent on navigation through Solution Explorer to locate interdependent files is drastically reduced since they are all in a single folder.</li>\n<li>You don't step over each other toes with your peers, thus, avoid spending time on fixing merge conflicts.</li>\n<li>You can scale and modify each feature on its own, independently from other features and even use different UI technology.</li>\n<li>You immediately understand what an application does and where to find necessary files for your given requirement.</li>\n<li>You can easily reuse similar features across projects by simply copying just a single folder.</li>\n<li>You can reason much easier about each feature just by looking in a single (feature) folder.</li>\n</ul>\n<h2 id=\"implementing-feature-folders-in-asp-net-mvc-5\" tabindex=\"-1\">Implementing Feature Folders in ASP.NET MVC 5 <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/feature-folders-structure-in-asp-net/#implementing-feature-folders-in-asp-net-mvc-5\">#</a></h2>\n<p>To make this work in ASP.NET MVC 5, we should inherit the <code>RazorViewEngine</code> and change the view location parts to ones that fit our new structure.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FeatureFoldersRazorViewEngine</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">RazorViewEngine</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">FeatureFoldersRazorViewEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> featureFolderViewLocationFormats <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"~/Features/{1}/{0}.cshtml\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"~/Features/{1}/{0}.vbhtml\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"~/Features/Shared/{0}.cshtml\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"~/Features/Shared/{0}.vbhtml\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n            ViewLocationFormats <span class=\"token operator\">=</span> featureFolderViewLocationFormats<span class=\"token punctuation\">;</span>\n            MasterLocationFormats <span class=\"token operator\">=</span> featureFolderViewLocationFormats<span class=\"token punctuation\">;</span>\n            PartialViewLocationFormats <span class=\"token operator\">=</span> featureFolderViewLocationFormats<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>Next, we have to add our newly created <code>FeatureFoldersRazorViewEngine</code> in our application.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Global</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">HttpApplication</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Application_Start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ...</span>\n            ViewEngines<span class=\"token punctuation\">.</span>Engines<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ViewEngines<span class=\"token punctuation\">.</span>Engines<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FeatureFoldersRazorViewEngine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/feature-folders-structure-in-asp-net/#summary\">#</a></h2>\n<p>Structuring our MVC projects following feature folders approach increases the productivity of our dev teams.</p>\n<p>At our company, we have been using feature folders project structure on over dozens projects for over a year, and due to the high success and productivity boost, it became our default project structure on the presentation layer.</p>\n",
			"date_published": "2016-05-27T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/",
			"url": "https://codingpipe.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/",
			"title": "How to Refactor Business Rules Using the Specification Pattern",
			"content_html": "<p>The other day, one of my colleges asked me for code review on a specific part of code and I said let's dig a little deeper into the options that we have. In this article, I demonstrate the re-factoring steps in detail that we've taken and eventually how we employed the <code>Specification Pattern</code> <!--excerpt-->. Have in mind that, I choose a very basic example in order to keep things simple and avoid confusion that can be arouse from domain complexity.<!--excerpt--></p>\n<p>Here is the original code:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token comment\">//..</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newCompany <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Company</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span>CountryId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// Query all companies from database </span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> companies <span class=\"token operator\">=</span> _companyRepository<span class=\"token punctuation\">.</span><span class=\"token function\">Query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Check if the newly created company is unique</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>companies<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> newCompany<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">.</span>CountryId <span class=\"token operator\">==</span> newCompany<span class=\"token punctuation\">.</span>CountryId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A company with the same name and country already exists\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsession<span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>newCompany<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//..</span></code></pre>\n<p>Here, we can see a few problems. First, all companies are queried from the database, and that can create performance issues. Another problem is too much operations happening in the <code>If</code> check line; thus, the lengthy line is making the code harder to read. And, the final problem is very plain practice of <code>Exception</code> throwing. Although, I like expressing explicit guard checks, that code can be better. Let's tackle these problems, one by one, in a few steps along this article and provide some improvement suggestions.</p>\n<p>Also, I provide here the <code>tl;dr;</code> version of the code:</p>\n<pre><code>//..\n\nvar newCompany = new Company(message.Name, message.CountryId);\n \nvar spec = new UniqueCompanySpecification(_companyRepository);\nif (spec.IsSatisfiedBy(newCompany) == false)\n throw new CompanyAlreadyExistsException();\n\nsession.Save(newCompany);\n//..\n</code></pre>\n<h1 id=\"how-we-get-there\" tabindex=\"-1\">How we get there? <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/#how-we-get-there\">#</a></h1>\n<h2 id=\"step-1-solve-the-query-performance-issues\" tabindex=\"-1\">Step 1 - Solve The Query Performance Issues <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/#step-1-solve-the-query-performance-issues\">#</a></h2>\n<pre><code>var numberOfSameCompanies = _companyRepository.Query()\n .Where(x =&gt; x.Name == newCompany.Name &amp;&amp; x.CountryId == newCompany.CountryId)\n .Count();\nif (numberOfSameCompanies &gt; 0)\n throw new Exception(&quot;A company with the same name and country already exists&quot;);\n</code></pre>\n<p>The query above retrieves the number of companies satisfying the given <code>where</code> condition. Performance issues have been solved.</p>\n<h2 id=\"step-2-make-the-if-condition-check-explicit\" tabindex=\"-1\">Step 2 - Make The <code>if</code> Condition Check Explicit <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/#step-2-make-the-if-condition-check-explicit\">#</a></h2>\n<pre><code>var numberOfSameCompanies = _companyRepository.Query()\n .Where(x =&gt; x.Name == newCompany.Name &amp;&amp; x.CountryId == newCompany.CountryId)\n .Count();\nvar doesCompanyAlreadyExists = numberOfSameCompanies &gt; 0;\nif (doesCompanyAlreadyExists)\n throw new Exception(&quot;A company with the same name and country already exists&quot;);\n</code></pre>\n<p>By setting some explicit conditions, we gain clear understanding of what the code does.</p>\n<h2 id=\"step-3-make-the-business-rule-violation-explicit\" tabindex=\"-1\">Step 3 - Make The Business Rule Violation Explicit <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/#step-3-make-the-business-rule-violation-explicit\">#</a></h2>\n<p>Original:</p>\n<pre><code>throw new Exception(&quot;A company with the same name and country already exists&quot;);\n</code></pre>\n<p>Re-factored to:</p>\n<pre><code>throw new CompanyAlreadyExistsException();\n</code></pre>\n<p>And the implementation of the exception:</p>\n<pre><code>public class CompanyAlreadyExistsException : Exception\n{\n  CompanyAlreadyExistsException()\n    :base(&quot;A company with the same name and country already exists&quot;)\n  {\n  }\n}\n</code></pre>\n<p>Now, it looks better. Anyway, we have still room for improvements.</p>\n<h2 id=\"step-4-encapsulate-the-business-rule-check-by-employing-the-specification-pattern\" tabindex=\"-1\">Step 4 - Encapsulate The Business Rule Check By Employing 'The Specification Pattern' <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/#step-4-encapsulate-the-business-rule-check-by-employing-the-specification-pattern\">#</a></h2>\n<p>The 'Specification Pattern' is a tactical design pattern presented in Eric Evans’ book Domain Driven Design. The <code>Specification Pattern</code> is a way of encapsulating business rule(s) and testing it against a candidate object to see if that object satisfies all requirements expressed in a specification. This pattern fits very good with the Single-Responsibility-Principle (SRP), which states that one class should have only one reason to change. Furthermore, this specification object can be easily unit tested and reused.</p>\n<p>Here, you can see how it is used:</p>\n<pre><code> var spec = new UniqueCompanySpecification(_companyRepository);\n if (spec.IsSatisfiedBy(newCompany) == false)\n  throw new CompanyAlreadyExistsException();\n</code></pre>\n<p>And the implementation details:</p>\n<pre><code> public class UniqueCompanySpecification : ISpecification&lt;Company&gt;\n {\n  readonly ICompanyRepository _companyRepository;\n\n  public UniqueCompanySpecification(ICompanyRepository companyRepository)\n  {\n   _companyRepository = companyRepository;\n  }\n\n  public bool IsSatisfiedBy(Company candidate)\n  {\n   var numberOfSameCompanies = _companyRepository.Query()\n    .Where(x =&gt; x.Name == newCompany.Name &amp;&amp; x.CountryId == newCompany.CountryId)\n    .Count();\n   bool isUnique = numberOfSameCompanies == 0;\n   return isUnique;\n  }\n }\n\n public interface ISpecification&lt;T&gt;\n {\n  bool IsSatisfiedBy(T candidate);\n } \n</code></pre>\n<p>After all re-factoring steps, the final code is as following:</p>\n<pre><code> //..\n\n var newCompany = new Company(message.Name, message.CountryId);\n \n var spec = new UniqueCompanySpecification(_companyRepository);\n if (spec.IsSatisfiedBy(newCompany) == false)\n  throw new CompanyAlreadyExistsException();\n\n session.Save(newCompany);\n //..\n</code></pre>\n<h1 id=\"summary\" tabindex=\"-1\">Summary <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/towards-good-enough-code-re-factoring-business-rule-check-specification-pattern/#summary\">#</a></h1>\n<p>In this article, I've shown a re-factoring process and usage of the Specification Pattern in order to satisfy an explicit business rule.\nThe re-factoring steps we took:</p>\n<ol>\n<li>Solve the query performance issues</li>\n<li>Make the <code>if</code> condition check explicit</li>\n<li>Make the business rule violation explicit</li>\n<li>Encapsulate the business rule check by employing the Specification Pattern</li>\n</ol>\n<p>The Specification Pattern lets you decouple the design of requirements, fulfillment, and validation. It also allows you to make your system definitions more clear and declarative, but be careful not to fall into temptation to over-use it.</p>\n<p><strong>References:</strong></p>\n<ul>\n<li><a href=\"http://martinfowler.com/apsupp/spec.pdf\">Specification Pattern by Eric Evans and Martin Fowler</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Specification_pattern\">https://en.wikipedia.org/wiki/Specification_pattern</a></li>\n<li><a href=\"http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215\">Book: Domain Driven Design, Tackling Complexity In The Hearth of Software - by Eric Evans</a></li>\n</ul>\n",
			"date_published": "2015-09-29T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/getting-started-with-rhino-security-structuremap/",
			"url": "https://codingpipe.com/posts/getting-started-with-rhino-security-structuremap/",
			"title": "Rhino Security and StructureMap Integration Guide",
			"content_html": "<p>In this posting I will show you how to configure Rhino Security infrastructure to work with StructureMap IoC container and provide to you database schema (for MSSQL and <a href=\"http://bojanv91.github.io/2014/12/database-development-guidance/\">FluentMigrator</a>) that you will need in order Rhino Security to get working. I've struggled some time before I got everything working, so here are my results. :) <!--excerpt--></p>\n<blockquote>\n<p><a href=\"https://github.com/ayende/rhino-security\">Rhino Security</a> is a security framework to provide row level security for NHibernate. Rhino Security is perfect for people who want to set up user and group security in their NHibernate domain models.</p>\n<blockquote>\n<p><a href=\"https://github.com/ayende/rhino-security\">Rhino Security GitHub repository</a></p>\n</blockquote>\n</blockquote>\n<p>More details about the architecture and how Rhino Security works behind the scenes can be found <a href=\"http://ayende.com/blog/2958/a-vision-of-enterprise-platform-security-infrastructure\">here</a>, <a href=\"http://ayende.com/blog/3109/rhino-security-overview-part-i\">here</a> and <a href=\"http://ayende.com/blog/3113/rhino-security-part-ii-discussing-the-implementation\">here</a>.</p>\n<h2 id=\"action-plan\" tabindex=\"-1\">Action Plan <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/getting-started-with-rhino-security-structuremap/#action-plan\">#</a></h2>\n<ul>\n<li>Installing NuGet packages</li>\n<li>Configuring StructureMap container and registering Rhino.Security into NHibernate</li>\n<li>Implementing CommonServiceLocator provider for StructureMap</li>\n<li>User entity that implements Rhino.Security.IUser interface</li>\n<li>Preparing the database schema</li>\n<li>Usage DEMO (code samples <a href=\"https://github.com/bojanv91/RhinoSecurityWithStructureMap\">https://github.com/bojanv91/RhinoSecurityWithStructureMap</a>)</li>\n</ul>\n<p><img src=\"https://codingpipe.com/img/2015-01-11-getting-started-with-rhino-security-structuremap/rhino-01.png\" alt=\"Getting started with Rhino Security and StructureMap\"></p>\n<h3 id=\"installing-nuget-packages\" tabindex=\"-1\">Installing NuGet packages <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/getting-started-with-rhino-security-structuremap/#installing-nuget-packages\">#</a></h3>\n<pre><code>Install-Package Rhino.Security   \nInstall-Package NHibernate\nInstall-Package FluentNHibernate\nInstall-Package StructureMap\nInstall-Package CommonServiceLocator\n</code></pre>\n<p>FluentNHibernate provides fluent mapping interface for mapping our domain model entities to table structures via NHibernate.<br>\nCommonServiceLocator provides abstraction over IoC containers and service locators and contains a shared interface for service location. Rhino Security makes use of it, that is why can be used with any IoC container.</p>\n<h3 id=\"configuring-structuremap-container-and-registering-rhino-security-into-nhibernate\" tabindex=\"-1\">Configuring StructureMap container and registering Rhino.Security into NHibernate <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/getting-started-with-rhino-security-structuremap/#configuring-structuremap-container-and-registering-rhino-security-into-nhibernate\">#</a></h3>\n<p>In the following code snippet I have all configuration stuff in one class, called the Bootstrapper. It's purpose is to provide functionality for booting up our application, the starting point. Explanations about what does what are put in comments. If something is still unclear do write me a comment, I'll happily update that part.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"> <span class=\"token keyword\">using</span> <span class=\"token namespace\">FluentNHibernate<span class=\"token punctuation\">.</span>Cfg</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">using</span> <span class=\"token namespace\">FluentNHibernate<span class=\"token punctuation\">.</span>Cfg<span class=\"token punctuation\">.</span>Db</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">using</span> <span class=\"token namespace\">NHibernate</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">using</span> <span class=\"token namespace\">NHibernate<span class=\"token punctuation\">.</span>Cfg</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">using</span> <span class=\"token namespace\">NHibernate<span class=\"token punctuation\">.</span>Context</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Interfaces</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Services</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">namespace</span> <span class=\"token namespace\">RhinoSecurityWithStructureMap</span>\n <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bootstrapper</span>\n     <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> connectionString<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{</span>\n             <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StructureMap<span class=\"token punctuation\">.</span>Container</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             container<span class=\"token punctuation\">.</span><span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span>cfg <span class=\"token operator\">=></span>\n                 <span class=\"token punctuation\">{</span>\n                     <span class=\"token comment\">//NHibernate configurations </span>\n                     cfg<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">For</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ISessionFactory<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">CreateSessionFactory</span><span class=\"token punctuation\">(</span>connectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     cfg<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">For</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ISession<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">=></span> <span class=\"token function\">GetSession</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n                     <span class=\"token comment\">//Rhino Security configurations </span>\n                     cfg<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">For</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IAuthorizationService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Use</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AuthorizationService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     cfg<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">For</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IAuthorizationRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Use</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AuthorizationRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     cfg<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">For</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IPermissionsBuilderService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Use</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PermissionsBuilderService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     cfg<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">For</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IPermissionsService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Use</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>PermissionsService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n             <span class=\"token comment\">//Setting up StuctureMapServiceLocator as a CommonServiceLocator that Rhino.Security will use for DI</span>\n             Microsoft<span class=\"token punctuation\">.</span>Practices<span class=\"token punctuation\">.</span>ServiceLocation<span class=\"token punctuation\">.</span>ServiceLocator\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">SetLocatorProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StructureMapServiceLocator</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n \n         <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ISessionFactory</span> <span class=\"token function\">CreateSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> connectionString<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{</span>\n             <span class=\"token class-name\">FluentConfiguration</span> fluentConfig <span class=\"token operator\">=</span> Fluently<span class=\"token punctuation\">.</span><span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">Database</span><span class=\"token punctuation\">(</span>MsSqlConfiguration<span class=\"token punctuation\">.</span>MsSql2012<span class=\"token punctuation\">.</span><span class=\"token function\">ConnectionString</span><span class=\"token punctuation\">(</span>connectionString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">//specifying connection string for Microsoft SQL Server 2012 </span>\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">Mappings</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">=></span> m<span class=\"token punctuation\">.</span>FluentMappings<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddFromAssemblyOf</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Bootstrapper<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                  <span class=\"token comment\">//specifying in which assembly NHibernate should look for entity mappings</span>\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">CurrentSessionContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ThreadStaticSessionContext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>AssemblyQualifiedName<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//specifying the session context lifecycle to be initialized per thread</span>\n                 <span class=\"token punctuation\">.</span><span class=\"token function\">ExposeConfiguration</span><span class=\"token punctuation\">(</span>cfg <span class=\"token operator\">=></span>\n                 <span class=\"token punctuation\">{</span>\n                     Rhino<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>User<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">,</span> Rhino<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>SecurityTableStructure<span class=\"token punctuation\">.</span>Prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n             <span class=\"token keyword\">return</span> fluentConfig<span class=\"token punctuation\">.</span><span class=\"token function\">BuildSessionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n \n         <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ISession</span> <span class=\"token function\">GetSession</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StructureMap<span class=\"token punctuation\">.</span>IContext</span> context<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">{</span>\n             <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sessionFactory <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ISessionFactory<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">return</span> sessionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"implementing-commonservicelocator-provider-for-structuremap\" tabindex=\"-1\">Implementing CommonServiceLocator provider for StructureMap <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/getting-started-with-rhino-security-structuremap/#implementing-commonservicelocator-provider-for-structuremap\">#</a></h3>\n<p>The code is pretty much straightforward. We just implement Microsoft.Practices.ServiceLocation.IServiceLocator interface with the common code that is provided to us by StructureMap IContainer interface, basically this class acts as a wrapper.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StructureMapServiceLocator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Microsoft<span class=\"token punctuation\">.</span>Practices<span class=\"token punctuation\">.</span>ServiceLocation<span class=\"token punctuation\">.</span>IServiceLocator</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IContainer</span> _container<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">StructureMapServiceLocator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IContainer</span> container<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _container <span class=\"token operator\">=</span> container<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>TService<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">GetAllInstances</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _container<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetAllInstances</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetAllInstances</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> serviceType<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>_container<span class=\"token punctuation\">.</span><span class=\"token function\">GetAllInstances</span><span class=\"token punctuation\">(</span>serviceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TService</span> <span class=\"token generic-method\"><span class=\"token function\">GetInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _container<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TService</span> <span class=\"token generic-method\"><span class=\"token function\">GetInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _container<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> serviceType<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _container<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span>serviceType<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> serviceType<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _container<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span>serviceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">GetService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> serviceType<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> _container<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span>serviceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"user-entity-implements-rhino-security-iuser-interface\" tabindex=\"-1\">User entity implements Rhino.Security.IUser interface <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/getting-started-with-rhino-security-structuremap/#user-entity-implements-rhino-security-iuser-interface\">#</a></h3>\n<p>In our domain model we commonly have entity which represents the actual user. Rhino.Security must know which entity is the user entity in order to work. So our User entity must implement Rhino.Security.IUser interface, more precisely only SecurityInfo property from the interface must be implemented.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Rhino<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>IUser</span></span>\n <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>     \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Username <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> PasswordHashed <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n \n     <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Rhino<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>SecurityInfo</span> SecurityInfo\n     <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">get</span>\n         <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rhino<span class=\"token punctuation\">.</span>Security<span class=\"token punctuation\">.</span>SecurityInfo</span><span class=\"token punctuation\">(</span>Username<span class=\"token punctuation\">,</span> Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"preparing-the-database-schema\" tabindex=\"-1\">Preparing the database schema <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/getting-started-with-rhino-security-structuremap/#preparing-the-database-schema\">#</a></h3>\n<p>Schema files can be found in the following links:</p>\n<ul>\n<li><a href=\"https://github.com/bojanv91/RhinoSecurityWithStructureMap/blob/master/RhinoSecurityWithStructureMap/DatabaseScripts/rhino_security_and_basic_user.sql.sql\">SQL dump</a></li>\n<li><a href=\"https://github.com/bojanv91/RhinoSecurityWithStructureMap/blob/master/RhinoSecurityWithStructureMap/DatabaseScripts/rhino_security_and_basic_user.cs\">Fluent Migrator schema</a> (<a href=\"http://bojanv91.github.io/2014/12/database-development-guidance/\">blogpost about how to use Fluent Migrator</a>)</li>\n</ul>\n<p><img src=\"https://codingpipe.com/img/2015-01-11-getting-started-with-rhino-security-structuremap/rhino-02.png\" alt=\"Rhino database schema\"></p>\n<h3 id=\"usage-demo\" tabindex=\"-1\">Usage DEMO <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/getting-started-with-rhino-security-structuremap/#usage-demo\">#</a></h3>\n<p>The full code sample can be found in following github repository: <a href=\"https://github.com/bojanv91/RhinoSecurityWithStructureMap\">https://github.com/bojanv91/RhinoSecurityWithStructureMap</a>. Here I provide excerpt code snippets from the actual test code.</p>\n<p>Setting up user groups, operations and permissions:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> _authorizationRepository <span class=\"token operator\">=</span> ServiceLocator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IAuthorizationRepository<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> _authorizationService <span class=\"token operator\">=</span> ServiceLocator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IAuthorizationService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> _permissionsBuilderService <span class=\"token operator\">=</span> ServiceLocator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IPermissionsBuilderService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> _permissionService <span class=\"token operator\">=</span> ServiceLocator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IPermissionsService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> transaction <span class=\"token operator\">=</span> _session<span class=\"token punctuation\">.</span><span class=\"token function\">BeginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//creating user group 'Admin'</span>\n        _authorizationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">CreateUsersGroup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//creating operations</span>\n        _authorizationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">CreateOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _authorizationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">CreateOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Content/Create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _authorizationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">CreateOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Content/View\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _authorizationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">CreateOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Content/Delete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> transaction <span class=\"token operator\">=</span> _session<span class=\"token punctuation\">.</span><span class=\"token function\">BeginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//adding the LoggedInUser to the 'Admin' users group</span>\n        _authorizationRepository<span class=\"token punctuation\">.</span><span class=\"token function\">AssociateUserWith</span><span class=\"token punctuation\">(</span>_loggedInUser<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//Building 'Allow' permissions for the LoggedInUser, </span>\n        <span class=\"token comment\">//by default if not defined as allowed, the operation is denied</span>\n        <span class=\"token comment\">//For the sake of this example, we say the the users that are in 'Admin' users group can</span>\n        <span class=\"token comment\">//create and view content, but cannot delete content. </span>\n        _permissionsBuilderService<span class=\"token punctuation\">.</span><span class=\"token function\">Allow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Content/Create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">For</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnEverything</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">DefaultLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _permissionsBuilderService<span class=\"token punctuation\">.</span><span class=\"token function\">Allow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Content/View\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">For</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnEverything</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">DefaultLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//We can explicitly define 'Deny' permission, but as the default behaviour denies everything </span>\n        <span class=\"token comment\">//that is not defined as 'Allow', I am not going to define it. You don't trust me? </span>\n        <span class=\"token comment\">//That's why we have tests ;) </span>\n        <span class=\"token comment\">//_permissionsBuilderService.Deny(\"/Content/Delete\").For(\"Admin\").OnEverything().DefaultLevel().Save();</span>\n\n        transaction<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>Test code demonstrating the usage:</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RhinoTests</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IUseFixture<span class=\"token punctuation\">&lt;</span>TestFixture<span class=\"token punctuation\">></span></span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IAuthorizationService</span> _authorizationService<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">User</span> _loggedInUser<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">RhinoTests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n        <span class=\"token punctuation\">{</span>\n            _authorizationService <span class=\"token operator\">=</span> ServiceLocator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetInstance</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IAuthorizationService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _loggedInUser <span class=\"token operator\">=</span> TestFixture<span class=\"token punctuation\">.</span>_loggedInUser<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">it_should_allow_content_creation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> result <span class=\"token operator\">=</span> _authorizationService<span class=\"token punctuation\">.</span><span class=\"token function\">IsAllowed</span><span class=\"token punctuation\">(</span>_loggedInUser<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/Content/Create\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Assert<span class=\"token punctuation\">.</span><span class=\"token function\">True</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">it_should_allow_content_viewing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> result <span class=\"token operator\">=</span> _authorizationService<span class=\"token punctuation\">.</span><span class=\"token function\">IsAllowed</span><span class=\"token punctuation\">(</span>_loggedInUser<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/Content/View\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Assert<span class=\"token punctuation\">.</span><span class=\"token function\">True</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">it_should_deny_content_deletition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> result <span class=\"token operator\">=</span> _authorizationService<span class=\"token punctuation\">.</span><span class=\"token function\">IsAllowed</span><span class=\"token punctuation\">(</span>_loggedInUser<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/Content/Delete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Assert<span class=\"token punctuation\">.</span><span class=\"token function\">False</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetFixture</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestFixture</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>Happy coding folks!</p>\n",
			"date_published": "2015-01-11T00:00:00Z"
		}
		,
		{
			"id": "https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/",
			"url": "https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/",
			"title": ".NET Database Development with FluentMigrator (2014 Edition)",
			"content_html": "<p>I have been thinking a lot lately about how properly and simply to implement database versioning strategy. These years I've experienced working with different types of database setup and furthermore researched and analyzed some more approaches and tools regarding this topic. In this posting I write about my findings and why I like Fluent Migrator as a help tool in order to get the job done. But first, let's talk about the <em>goals</em> we try to achieve. <!--excerpt--></p>\n<h2 id=\"goals\" tabindex=\"-1\">Goals <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#goals\">#</a></h2>\n<ul>\n<li>Auditing schema changes</li>\n<li>Auditing test data changes</li>\n<li>Keeping schema and test data integrity across machines</li>\n<li>Versioning via source version control systems</li>\n<li>DB-provider agnostic migration (MSSQL, PostgreSql, MySql, Oracle)</li>\n<li>Simple and automated migration strategy (local and in production)</li>\n<li>New developers on project should not sweat while making the database work on their machines, neither the CI server</li>\n</ul>\n<p>Links to <a href=\"https://github.com/schambers/fluentmigrator/wiki\">Fluent Migrator</a> and <a href=\"https://github.com/bojanv91/DatabaseMigrationsExample\">this guide's project</a>.</p>\n<p>In the end - all you just need to do is run MSBuildMigrator.Migrate.bat file and watch your database being deployed, upgraded, downgraded...it will figure out ;) .</p>\n<h2 id=\"step-by-step-guide\" tabindex=\"-1\">Step by step guide <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#step-by-step-guide\">#</a></h2>\n<h3 id=\"1-open-visual-studio-and-create-new-class-library-project\" tabindex=\"-1\">1. Open Visual Studio and create New Class Library Project <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#1-open-visual-studio-and-create-new-class-library-project\">#</a></h3>\n<p><img src=\"https://codingpipe.com/img/2014-12-12-database-development-guidance/img01.png\" alt=\"Open Visual Studio and create New Class Library Project\"></p>\n<h3 id=\"2-install-package-fluentmigrator\" tabindex=\"-1\">2. Install-Package FluentMigrator <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#2-install-package-fluentmigrator\">#</a></h3>\n<p><img src=\"https://codingpipe.com/img/2014-12-12-database-development-guidance/img02.png\" alt=\"Install-Package FluentMigrator\"></p>\n<h3 id=\"3-create-new-folder-migrations-to-project-here-we-are-going-to-store-migration-files\" tabindex=\"-1\">3. Create new folder &quot;Migrations&quot; to project - here we are going to store migration files <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#3-create-new-folder-migrations-to-project-here-we-are-going-to-store-migration-files\">#</a></h3>\n<p><img src=\"https://codingpipe.com/img/2014-12-12-database-development-guidance/img03.png\" alt=\"Create new folder &quot;Migrations&quot; to project - here we are going to store migration files\"></p>\n<h3 id=\"4-now-lets-create-database-tables-with-migration-files\" tabindex=\"-1\">4. Now, let's create database tables with migration files <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#4-now-lets-create-database-tables-with-migration-files\">#</a></h3>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FluentMigrator<span class=\"token punctuation\">.</span>Migration</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Baseline</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">FluentMigrator<span class=\"token punctuation\">.</span>Migration</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Create<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Category\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithColumn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AsGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotNullable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PrimaryKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithColumn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AsString</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Create<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Product\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithColumn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AsGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">NotNullable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PrimaryKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithColumn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CategoryId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AsGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForeignKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Category\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Id\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithColumn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AsString</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithColumn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Price\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AsDecimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Down</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Delete<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Product\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Delete<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Category\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>That is all what is needed. In essence a migration is a class which drives from <strong>Migration abstract class</strong>  and implements <strong>'Up'</strong> and <strong>'Down'</strong> methods. Additionally you will also need to define <strong>Migration Attribute</strong> with unique identifier in order the migration runner to know the order of migration files. I like it how FM API is designed, it really follows the SQL language and how I would write this script in plain SQL.\nRead further <a href=\"https://github.com/schambers/fluentmigrator/wiki/Migration\">here</a>.</p>\n<p>Just for providing more examples I have added one more migration file for adding one more column to Product table for storing image URL.</p>\n<pre class=\"language-csharp\" tabindex=\"0\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Migration</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">201411131100</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">M201411131100_Product_added_column_for_storing_image_url</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Migration</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Alter<span class=\"token punctuation\">.</span><span class=\"token function\">Table</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Product\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddColumn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ImageUrl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AsString</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Down</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Delete<span class=\"token punctuation\">.</span><span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ImageUrl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FromTable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Product\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now this is how everything looks in my solution.</p>\n<p><img src=\"https://codingpipe.com/img/2014-12-12-database-development-guidance/img04.png\" alt=\"\"></p>\n<p>Next, let's initialize the database with our script.</p>\n<h3 id=\"5-creating-migration-runner-msbuild-migrator-bat-and-connectionstrings-config\" tabindex=\"-1\">5. Creating Migration Runner (MSBuild), Migrator (.BAT) and ConnectionStrings (.CONFIG) <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#5-creating-migration-runner-msbuild-migrator-bat-and-connectionstrings-config\">#</a></h3>\n<p><img src=\"https://codingpipe.com/img/2014-12-12-database-development-guidance/img05.png\" alt=\"\"></p>\n<h4 id=\"1-msbuildmigrationrunner-proj\" tabindex=\"-1\">1. MSBuildMigrationRunner.proj <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#1-msbuildmigrationrunner-proj\">#</a></h4>\n<pre class=\"language-xml\" tabindex=\"0\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/developer/msbuild/2003<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">DefaultTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Migrate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DatabaseProvider</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DatabaseProvider</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ConnectionStringConfigPath</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ConnectionStringConfigPath</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ConnectionStringName</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ConnectionStringName</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DataMigrationProjectName</span><span class=\"token punctuation\">></span></span>DatabaseMigrationsExample<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DataMigrationProjectName</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DataMigrationProjectRootPath</span><span class=\"token punctuation\">></span></span>$(MSBuildProjectDirectory)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DataMigrationProjectRootPath</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MigratorTasksDirectory</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MigratorTasksDirectory</span><span class=\"token punctuation\">></span></span>\n    \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DataMigrationProjectBuildDLL</span><span class=\"token punctuation\">></span></span>$(DataMigrationProjectRootPath)\\bin\\Debug\\$(DataMigrationProjectName).dll<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DataMigrationProjectBuildDLL</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DataMigrationProjectCsproj</span><span class=\"token punctuation\">></span></span>$(DataMigrationProjectRootPath)\\$(DataMigrationProjectName).csproj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DataMigrationProjectCsproj</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n  \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>UsingTask</span> <span class=\"token attr-name\">TaskName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FluentMigrator.MSBuild.Migrate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">AssemblyFile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(MigratorTasksDirectory)FluentMigrator.MSBuild.dll<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n   \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Build<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MSBuild</span> <span class=\"token attr-name\">Projects</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(DataMigrationProjectCsproj)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Properties</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Configuration=Debug<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">></span></span>\n   \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Migrate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">DependsOnTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Build<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Message</span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Starting FluentMigrator Migration<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Migrate</span> <span class=\"token attr-name\">Database</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(DatabaseProvider)<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">Connection</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(ConnectionStringName)<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">ConnectionStringConfigPath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(ConnectionStringConfigPath)<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">Target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(DataMigrationProjectBuildDLL)<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">Output</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>True<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">Verbose</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>True<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Migrate</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">></span></span>\n  \n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MigratePreview<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">DependsOnTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Build<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Message</span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Previewing FluentMigrator Migration<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Migrate</span> <span class=\"token attr-name\">Database</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(DatabaseProvider)<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">Connection</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(ConnectionStringName)<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">ConnectionStringConfigPath</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(ConnectionStringConfigPath)<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">Target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(DataMigrationProjectBuildDLL)<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">Output</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>True<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">Verbose</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>True<span class=\"token punctuation\">\"</span></span>\n     <span class=\"token attr-name\">PreviewOnly</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>True<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Migrate</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"2-connectionstrings-config\" tabindex=\"-1\">2. ConnectionStrings.config <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#2-connectionstrings-config\">#</a></h4>\n<pre class=\"language-xml\" tabindex=\"0\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>connectionStrings</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>clear</span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Default<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">connectionString</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Server=###;User ID=###;Password=###;Database=###;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>connectionStrings</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"3-msbuildmigrator-migrate-bat\" tabindex=\"-1\">3. MSBuildMigrator.Migrate.bat <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#3-msbuildmigrator-migrate-bat\">#</a></h4>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">C:<span class=\"token punctuation\">\\</span>Windows<span class=\"token punctuation\">\\</span>Microsoft.NET<span class=\"token punctuation\">\\</span>Framework<span class=\"token punctuation\">\\</span>v4.0.30319<span class=\"token punctuation\">\\</span>MSBuild.exe MSBuildMigrationRunner.proj /t:Migrate /p:DatabaseProvider<span class=\"token operator\">=</span>SqlServer2012 /p:ConnectionStringConfigPath<span class=\"token operator\">=</span>ConnectionStrings.config /p:ConnectionStringName<span class=\"token operator\">=</span>Default /p:DataMigrationProjectName<span class=\"token operator\">=</span>DatabaseMigrationsExample /p:DataMigrationProjectRootPath<span class=\"token operator\">=</span>. /p:MigratorTasksDirectory<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">\\</span>packages<span class=\"token punctuation\">\\</span>FluentMigrator.1.3.1.0<span class=\"token punctuation\">\\</span>tools<span class=\"token punctuation\">\\</span>\npause</code></pre>\n<ul>\n<li>/t:Migrate - performs Migration</li>\n<li>/t:MigratePreview - performs previewing of what would happen when migration is called</li>\n<li>/p:DatabaseProvider=? - specify your database providers name (SqlServer2012, postgres, mysql, oracle, sqlite and other can be found in FluentMigrator documentation)</li>\n<li>/p:ConnectionStringConfigPath=? - path to connection strings file</li>\n<li>/p:ConnectionStringName=? - name of the connection string to use from the configuration file</li>\n<li>/p:DataMigrationProjectName=? - Visual Studio project name where your migration files reside</li>\n<li>/p:DataMigrationProjectRootPath=? - path to where your Visual Studio migration project resides</li>\n<li>/p:MigratorTasksDirectory=? - path to FluentMigrator tools folder</li>\n</ul>\n<p>Viola, this is all you need to do. For your project you will need to put the connection string to your database and make changes where needed in the .BAT file, such as database provider and project name as an essential changes. Other config stuff should be pretty common, but if you have different structure than mine, you have full power and control with the flexibility provided here.</p>\n<h3 id=\"5-run-your-msbuildmigrator-migrate-bat-file\" tabindex=\"-1\">5. Run your MSBuildMigrator.Migrate.bat file <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#5-run-your-msbuildmigrator-migrate-bat-file\">#</a></h3>\n<p><img src=\"https://codingpipe.com/img/2014-12-12-database-development-guidance/img06.png\" alt=\"\"></p>\n<p>Table VersionInfo is used for storing migration metadata.</p>\n<p><img src=\"https://codingpipe.com/img/2014-12-12-database-development-guidance/img07.png\" alt=\"\"></p>\n<p>All of our tables are created.</p>\n<p><img src=\"https://codingpipe.com/img/2014-12-12-database-development-guidance/img08.png\" alt=\"\"></p>\n<p>In VersionInfo table you can see the &quot;commits&quot;.</p>\n<p><img src=\"https://codingpipe.com/img/2014-12-12-database-development-guidance/img09.png\" alt=\"\"></p>\n<h2 id=\"rules-of-thumb\" tabindex=\"-1\">Rules of Thumb <a class=\"header-anchor\" href=\"https://codingpipe.com/posts/database-development-guide-for-dotnet-teams-with-fluentmigrator-2014-edition/#rules-of-thumb\">#</a></h2>\n<ul>\n<li>First migration is always called &quot;BaseLine&quot; with migration ID: 0. Everything starts from there.</li>\n<li>Migration unique identification number is composed of current datetime when the migration is being created in format #yyyyMMddhhmm##<br>\n(example: now is 2014-11-13 10:15, so migration ID would be 201411131015)</li>\n<li>Migration filename should explain what is being changed - just like how you would write a commit message - in format 'M#yyyyMMddhhmm#_Message.cs'<br>\n(example: M201411131015_created_all_initial_tables)</li>\n<li>Class name should follow the exact convention like the filename<br>\n(example: class M201411131015_created_all_initial_tables { .. }</li>\n<li>MSBuildMigrationRunner.proj, ConnectionStrings.config, MSBuildMigrator.Migrate.bat are stored in Migration project root folder</li>\n</ul>\n<hr>\n<p>Happy coding folks! Having questions or concerns? Shoot me a tweet -&gt; @bojanv91</p>\n",
			"date_published": "2014-12-12T00:00:00Z"
		}
		
	]
}
